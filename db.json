{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/uploads/事件流.jpg","path":"uploads/事件流.jpg","modified":1,"renderable":0},{"_id":"source/uploads/add--kiosk-printing.png","path":"uploads/add--kiosk-printing.png","modified":1,"renderable":0},{"_id":"source/uploads/单行溢出.jpg","path":"uploads/单行溢出.jpg","modified":1,"renderable":0},{"_id":"source/uploads/我离开我自己-杨乃文.lrc","path":"uploads/我离开我自己-杨乃文.lrc","modified":1,"renderable":0},{"_id":"source/uploads/非整行溢出.jpg","path":"uploads/非整行溢出.jpg","modified":1,"renderable":0},{"_id":"source/uploads/风-汪小敏.lrc","path":"uploads/风-汪小敏.lrc","modified":1,"renderable":0},{"_id":"source/uploads/애월낙조 (涯月落照)-장필순.lrc","path":"uploads/애월낙조 (涯月落照)-장필순.lrc","modified":1,"renderable":0},{"_id":"source/uploads/涯月落照.jpg","path":"uploads/涯月落照.jpg","modified":1,"renderable":0},{"_id":"source/uploads/多行溢出.jpg","path":"uploads/多行溢出.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"source/uploads/alipay.jpg","path":"uploads/alipay.jpg","modified":1,"renderable":0},{"_id":"source/uploads/PDFRenderingQueue_getHighestPriority里面点击打印.jpg","path":"uploads/PDFRenderingQueue_getHighestPriority里面点击打印.jpg","modified":1,"renderable":0},{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":0},{"_id":"source/uploads/杨乃文.jpg","path":"uploads/杨乃文.jpg","modified":1,"renderable":0},{"_id":"source/uploads/cache.png","path":"uploads/cache.png","modified":1,"renderable":0},{"_id":"source/uploads/你好旧时光.jpg","path":"uploads/你好旧时光.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cover.jpg","path":"images/cover.jpg","modified":1,"renderable":1},{"_id":"source/uploads/cache1.png","path":"uploads/cache1.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/uploads/水管的友情.jpg","path":"uploads/水管的友情.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/uploads/水管的友情.flac","path":"uploads/水管的友情.flac","modified":1,"renderable":0},{"_id":"source/uploads/애월낙조(涯月落照)-장필순.mp3","path":"uploads/애월낙조(涯月落照)-장필순.mp3","modified":1,"renderable":0},{"_id":"source/uploads/我离开我自己.flac","path":"uploads/我离开我自己.flac","modified":1,"renderable":0},{"_id":"source/uploads/风.flac","path":"uploads/风.flac","modified":1,"renderable":0}],"Cache":[{"_id":"source/robots.txt","hash":"ed574c4e94581d3dcb77ecfa575f5a284e618a86","modified":1577156677370},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1577156677744},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1577156677744},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1577156677745},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1577156677745},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1577156677749},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1577156677750},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1577156677744},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1577156677750},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1577156677751},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1577156677752},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1577156677750},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1577156677752},{"_id":"themes/next/_config.yml","hash":"8787eaf0ee28f1b6aff0063f072b551b1dd14c43","modified":1577156677752},{"_id":"themes/next/package.json","hash":"f8daf21c819497b31bca30ade42f8ba6a465fca2","modified":1577156677790},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1577156677751},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1577156677753},{"_id":"source/_posts/PDF-js.md","hash":"f9cb7a592c50d92ffebb8a1f576a0b1b05eaad96","modified":1577156677360},{"_id":"source/_posts/HEXO-NEXT主题个性化配置.md","hash":"fc03ab23cb75ba2750d699fd141f2d2d5b499bbc","modified":1577156677358},{"_id":"source/_posts/JS之操作符.md","hash":"c5a7d00fe62b97b1b8623f9a14fbd3a259a343bd","modified":1577156677358},{"_id":"source/_posts/Promise方法.md","hash":"3ee950e0dc1dfebae87c6155f97f81714a829abe","modified":1577181687982},{"_id":"source/_posts/return、break、continue的区别.md","hash":"8ef4a7c07d8a45ca85d4a8529d7608b6447d6329","modified":1577156677363},{"_id":"source/_posts/canvas-生成图片并保存.md","hash":"4780ed17b4d90bd2789da706f6f6c9a80275d60e","modified":1577156677362},{"_id":"source/_posts/antd-table中集成react-dnd.md","hash":"7ee05c05b3384d4759d1c4753243a92bfd2d8d3e","modified":1577156677361},{"_id":"source/_posts/前端基础知识点.md","hash":"67adbecd827cb0f2710684ab8f650d75a6772a67","modified":1577156677364},{"_id":"source/_posts/js生成UUID.md","hash":"efc8ed313975a03dcc31a7c7563fcf0c5781c647","modified":1577156677363},{"_id":"source/_posts/apidoc自动生成api接口文档.md","hash":"be96b719372f057b8fc5a9db2902c68615cb0391","modified":1577156677362},{"_id":"source/_posts/谷歌浏览器实现直接打印效果.md","hash":"a4f02aa600779a94a5b25696330750af5d98fea1","modified":1577156677365},{"_id":"source/_posts/文本溢出的几中写法.md","hash":"93b2ff8482726a99583654b95af6f216bf3f6980","modified":1577156677365},{"_id":"source/_posts/signalr实时推送-javascript客户端.md","hash":"4f3ac6e5a7cd922064cd01154020b7446ddcadc3","modified":1577156677363},{"_id":"source/_posts/面向对象的程序设计.md","hash":"db2517ff41c03aa77cf3c83f3135912760264703","modified":1577156677366},{"_id":"source/about/index.md","hash":"bcd571966a666eeed2a66fb60e51472afd485578","modified":1577156677367},{"_id":"source/categories/index.md","hash":"280cedffc3190437e0af071da179089f8c5a528e","modified":1577156677368},{"_id":"source/pageTest/index.md","hash":"eb6e8fee0603932cd5c900f71da86a3d93a318b4","modified":1577156677370},{"_id":"source/tags/index.md","hash":"f55d11783a59dcb8b3dfe8bfc5c72e3fe4014282","modified":1577156677371},{"_id":"source/_posts/面试整理——一.md","hash":"aa6b6583c3a5d8b1e73ca4eb64d7380b84016362","modified":1577156677367},{"_id":"source/uploads/事件流.jpg","hash":"02d22c3f7cc7de8419e23115b2bbd78614395574","modified":1577156677376},{"_id":"source/_posts/拖拽组件：react-dnd.md","hash":"cf5a084572339163aae6f0f7e97d3f567182bb81","modified":1577156677365},{"_id":"source/_posts/webpack.md","hash":"20dce928ca3066012aa7891e38351900bcf45569","modified":1577156677364},{"_id":"source/uploads/add--kiosk-printing.png","hash":"3f05fd6a26c030ab0f24033d38526cdf6b987406","modified":1577156677373},{"_id":"source/uploads/单行溢出.jpg","hash":"a9576d906e1ace5cc6b82de9ecdfde9cce0ad9f4","modified":1577156677378},{"_id":"source/uploads/我离开我自己-杨乃文.lrc","hash":"95e7d311ceba0eb797732d71e021c8bde83aed86","modified":1577156677378},{"_id":"source/uploads/非整行溢出.jpg","hash":"bf6446c4746a3b5df3176bb57a97b6eb9aaa087c","modified":1577156677506},{"_id":"source/uploads/风-汪小敏.lrc","hash":"7e5d2ea20b22dc7e9a29ac3b3d18c2995f2f30a8","modified":1577156677506},{"_id":"source/_posts/浏览器缓存.md","hash":"bd9114a6cc83fb7a65bee11d7fff5c1fa895d97a","modified":1591079334171},{"_id":"source/uploads/애월낙조 (涯月落照)-장필순.lrc","hash":"cfcdff1305a321bac7e8fb001ebb7fa1d4599e5a","modified":1577156677617},{"_id":"source/音乐/index.md","hash":"2bb1c322f34c240bcd50f2216e7f77b2c29bca2a","modified":1577156677703},{"_id":"source/uploads/涯月落照.jpg","hash":"c24ef5b9daaa5a6d553a6e88002ce8466dd908fb","modified":1577156677505},{"_id":"themes/next/.idea/misc.xml","hash":"0d81a7654b3ab7b1fa88a882ac9120820be781d1","modified":1577156677747},{"_id":"themes/next/.idea/modules.xml","hash":"ed8badb9bbf06c9cef2efe24c4c852a282221152","modified":1577156677748},{"_id":"themes/next/.idea/next.iml","hash":"c7c4a216364e1a90dc9ebf19e4c967f26c4f8e52","modified":1577156677749},{"_id":"themes/next/.idea/workspace.xml","hash":"15999a5dcfbe2fd3848590ae4bd8ba3783354df5","modified":1577156677749},{"_id":"source/_posts/hexo-nexT主题-githubPages个人博客搭建.md","hash":"c01d0c11b6084ff1a9d67bcb478c593634c48262","modified":1577156677362},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1577156677753},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1577156677754},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1577156677754},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1577156677754},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1577156677754},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1577156677755},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1577156677756},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1577156677757},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1577156677756},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1577156677755},{"_id":"source/uploads/多行溢出.jpg","hash":"d23e4221729427e9c60bd3eb53d950909513fe33","modified":1577156677378},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1577156677757},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1577156677758},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1577156677758},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1577156677758},{"_id":"themes/next/layout/_layout.swig","hash":"46954c24a335c6a891be85177c0965ea0a138d92","modified":1577156677759},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1577156677788},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1577156677757},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1577156677788},{"_id":"themes/next/layout/index.swig","hash":"a5e843d772b1244a3109b8f656869930f040728b","modified":1577156677789},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1577156677757},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1577156677790},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1577156677789},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1577156677789},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1577156677791},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1577156677791},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1577156677790},{"_id":"themes/next/source/404.html","hash":"9ce7edc47cd7f94f374ea3d93b31e1906e15d64f","modified":1577156677795},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1577156678341},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1577156678341},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1577156678342},{"_id":"source/uploads/alipay.jpg","hash":"203cb84f930bbb65403cba10ebcae8a9b8615c1c","modified":1577156677374},{"_id":"source/uploads/PDFRenderingQueue_getHighestPriority里面点击打印.jpg","hash":"81c210c129d7b2ddbae63203680beb446a6d346d","modified":1577156677373},{"_id":"source/uploads/avatar.jpg","hash":"d5c753d64be46b1bd60601f4e198450836028309","modified":1577156677376},{"_id":"source/uploads/杨乃文.jpg","hash":"d7bd80b3e45ac3c3813504481fe91f47bb1544df","modified":1577156677474},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577156677759},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577156677841},{"_id":"source/uploads/cache.png","hash":"65639f3e737ada454d9173c8cc403a5b6ddaf15d","modified":1591093982955},{"_id":"source/uploads/你好旧时光.jpg","hash":"c60009734b2256d0ca95d5a48c1f0fe3386e6881","modified":1577156677377},{"_id":"themes/next/.idea/inspectionProfiles/Project_Default.xml","hash":"62981ca258671eb2e922c824b39a75c2f000fa29","modified":1577156677746},{"_id":"themes/next/.idea/jsLinters/jshint.xml","hash":"999eaa2594e3a6c1d24263a2e4e8984682b2e804","modified":1577156677746},{"_id":"themes/next/layout/_custom/header.swig","hash":"d80ab5a9dd1e0e070089823aa1ad470ba9389012","modified":1577156677759},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1577156677760},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1577156677762},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1577156677763},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1577156677763},{"_id":"themes/next/layout/_partials/footer.swig","hash":"25b83e72c554d612c694b89d1616c90b418576af","modified":1577156677763},{"_id":"themes/next/layout/_partials/head.swig","hash":"c91247b083d6f8d12a459a4976af1304e5e6b2c1","modified":1577156677764},{"_id":"themes/next/layout/_partials/header.swig","hash":"0035ff5211758157715ceac738978ba0107db626","modified":1577156677765},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1577156677765},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1577156677765},{"_id":"themes/next/layout/_partials/search.swig","hash":"dd8171d0ca3d7257dfee51ad54f93421410ccb66","modified":1577156677766},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1577156677770},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1577156677760},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6b1b031db18d966af9f3783de91fdfabef20d8b9","modified":1577156677762},{"_id":"themes/next/layout/_macro/post.swig","hash":"f60b97a176d96df06dc4ebb1566532e19cd72f4a","modified":1577156677760},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1577156677771},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1577156677773},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1577156677781},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1577156677781},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1577156677782},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1577156677782},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1577156677782},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1577156677783},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1577156677783},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1577156677792},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1577156677792},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1577156677792},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1577156677793},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1577156677793},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1577156677792},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1577156677794},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1577156677794},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1577156677841},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1577156677842},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1577156677842},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1577156677842},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1577156677843},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1577156677843},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1577156677843},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1577156677844},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1577156677844},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1577156677846},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1577156677844},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1577156677846},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577156677846},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1577156677847},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577156677847},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1577156677847},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1577156677847},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1577156677845},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1577156677848},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1577156677794},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577156677772},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577156677772},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577156677825},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577156677825},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577156677826},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577156677839},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577156677840},{"_id":"themes/next/source/images/cover.jpg","hash":"13376a6e2b89c578378d1caacb862fdd347c35b5","modified":1577156677845},{"_id":"source/uploads/cache1.png","hash":"a1a87b6570a0655625bf758464ebddd6f71658de","modified":1591079054666},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1577156677764},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1577156677765},{"_id":"themes/next/layout/_partials/search/algolia.swig","hash":"e12fe1a839abaef734d36f9f0f762de7aba053a1","modified":1577156677766},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1577156677767},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1577156677767},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1577156677767},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1577156677768},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1577156677771},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1577156677771},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1577156677772},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1577156677778},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1577156677778},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1577156677778},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1577156677779},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1577156677779},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1577156677780},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1577156677780},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1577156677780},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1577156677781},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1577156677774},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1577156677768},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1577156677774},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1577156677768},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1577156677774},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1577156677770},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1577156677775},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1577156677775},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1577156677775},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1577156677776},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1577156677776},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1577156677776},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1577156677776},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1577156677777},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1577156677777},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1577156677777},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1577156677785},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1577156677785},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1577156677786},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1577156677788},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"14e84f0ad182595c69d22e944cd9773a873053f3","modified":1577156677824},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1577156677825},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1577156677826},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1577156677826},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1577156677839},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1577156677840},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1577156677840},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1577156677838},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1577156677849},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1577156677849},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1577156677849},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1577156677851},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1577156677851},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1577156677849},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1577156677852},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1577156677852},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1577156677850},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1577156677850},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1577156677860},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1577156677938},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1577156677941},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1577156677962},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1577156677963},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1577156677942},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1577156677852},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1577156677965},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1577156677968},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1577156677968},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1577156677971},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1577156677971},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1577156677971},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1577156678292},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1577156678296},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1577156678298},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1577156678299},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1577156678303},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1577156678304},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1577156678305},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1577156678306},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1577156678307},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1577156678313},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1577156678314},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1577156678314},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1577156678317},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1577156678317},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1577156678318},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1577156678318},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1577156678319},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1577156678319},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1577156678319},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1577156678320},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1577156678320},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1577156678320},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1577156678321},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1577156678321},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1577156678321},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1577156678322},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1577156678322},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1577156678337},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1577156678337},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1577156678340},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1577156678340},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1577156678340},{"_id":"source/uploads/水管的友情.jpg","hash":"64c32f1c85a149e0e8d083da53efa7b068f2612b","modified":1577156677505},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1577156677963},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1577156677859},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1577156678294},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1577156677784},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1577156677820},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1577156677784},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1577156677796},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1577156677797},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1577156677797},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1577156677796},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1577156677797},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1577156677804},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1577156677812},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1577156677821},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1577156677821},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1577156677823},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1577156677823},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1577156677823},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1577156677822},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1577156677828},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1577156677827},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1577156677830},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1577156677828},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1577156677829},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1577156677833},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1577156677833},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1577156677834},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1577156677830},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1577156677834},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1577156677831},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1577156677835},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1577156677828},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1577156677836},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1577156677836},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1577156677836},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1577156677837},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1577156677838},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1577156677838},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1577156677851},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1577156677855},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577156677944},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577156677946},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577156677951},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577156677952},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577156677953},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1577156677960},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577156677947},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1577156677962},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1577156677858},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1577156677967},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1577156677856},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1577156677972},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1577156677974},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1577156677966},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1577156677961},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1577156678336},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1577156678336},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1577156677972},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1577156677856},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577156678287},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577156678290},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1577156678338},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1577156677798},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1577156677798},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1577156677798},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1577156677799},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1577156677799},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1577156677799},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1577156677800},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1577156677800},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1577156677801},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1577156677801},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1577156677801},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1577156677803},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1577156677804},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1577156677804},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1577156677804},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1577156677804},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1577156677805},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1577156677805},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1577156677805},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1577156677806},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1577156677806},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1577156677806},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1577156677807},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1577156677807},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1577156677807},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1577156677808},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1577156677808},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1577156677809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1577156677809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1577156677809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1577156677810},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1577156677810},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1577156677811},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1577156677808},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1577156677811},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1577156677811},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1577156677811},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1577156677812},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1577156677812},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1577156677813},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1577156677813},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1577156677813},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1577156677814},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1577156677814},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1577156677815},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1577156677815},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1577156677815},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1577156677814},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1577156677816},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1577156677817},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1577156677816},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1577156677817},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1577156677817},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1577156677818},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1577156677818},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1577156677819},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1577156677819},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1577156677819},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1577156677832},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1577156677833},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1577156677835},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1577156677853},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1577156677854},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577156677954},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1577156677954},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1577156677958},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1577156677959},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1577156677959},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1577156677960},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1577156677976},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1577156677990},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1577156677855},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1577156677855},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1577156677854},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577156677978},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1577156677860},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1577156678335},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1577156677988},{"_id":"source/uploads/水管的友情.flac","hash":"dd69b4d800b0e11d7d38c38c18eadbf0d27a176a","modified":1577156677502},{"_id":"source/uploads/애월낙조(涯月落照)-장필순.mp3","hash":"73daa52bae289beeb852ee08a564ce4fe7a909f1","modified":1577156677701},{"_id":"source/uploads/我离开我自己.flac","hash":"ccfa7fb8da0ef62b418da7d84b35ec896ecac8e7","modified":1577156677471},{"_id":"source/uploads/风.flac","hash":"ebc0ee249a97a413d6ac13bed34ea529d520beb8","modified":1577156677614},{"_id":"public/baidusitemap.xml","hash":"c05c76d90725711e468e4c0a271e77605e7d6e64","modified":1591094218358},{"_id":"public/search.xml","hash":"074ece022fbc466af73d12a59fe6ea94c127b715","modified":1591094218715},{"_id":"public/sitemap.xml","hash":"0b6b8b3e85b50aca29b19714317d2f482a69022d","modified":1591094218716},{"_id":"public/about/index.html","hash":"ad2244c789ce16d9e1370e641fa80a59cab1230d","modified":1591094218765},{"_id":"public/categories/index.html","hash":"a8040a164c69a995dbaaeafcc0d4cb1e6ca38c38","modified":1591094218765},{"_id":"public/pageTest/index.html","hash":"8a9477cb65ba1324ce758b11caada1934d158b89","modified":1591094218765},{"_id":"public/tags/index.html","hash":"966f53493aaeedffafa1314347379af81685c32a","modified":1591094218765},{"_id":"public/音乐/index.html","hash":"695a1fab0eb5086a3eceac65bd216064f5e20e2f","modified":1591094218766},{"_id":"public/浏览器缓存/2020/05/28/index.html","hash":"e9c20897f360626822c22d0eb522c62f289313e2","modified":1591094218766},{"_id":"public/Promise方法/2019/12/24/index.html","hash":"74c1be553e780007e9a62014c1d9932bbc73cdb1","modified":1591094218766},{"_id":"public/signalr实时推送-javascript客户端/2019/05/04/index.html","hash":"cffa0cfc71081ac6754740fe94e8e6ea729762f5","modified":1591094218766},{"_id":"public/apidoc自动生成api接口文档/2019/04/24/index.html","hash":"356905a33cb1ce28a52e8afb6891d0b613a52234","modified":1591094218766},{"_id":"public/前端基础知识点/2019/04/02/index.html","hash":"d368e9d285c0f08db5530e4690cff6f1dc5c61d1","modified":1591094218766},{"_id":"public/canvas-生成图片并保存/2019/03/01/index.html","hash":"736257636b9ce0229714189019476c7faaa09d80","modified":1591094218766},{"_id":"public/谷歌浏览器实现直接打印效果/2019/02/28/index.html","hash":"de68362a085acb8d41e33e274604e03d474cd407","modified":1591094218766},{"_id":"public/文本溢出的几中写法/2018/12/27/index.html","hash":"e92db056ce1b32c686e54428f7ed62f371a246aa","modified":1591094218766},{"_id":"public/antd-table中集成react-dnd/2018/12/21/index.html","hash":"75433bc676656258d082f66df11009565bdff1d9","modified":1591094218766},{"_id":"public/拖拽组件：react-dnd/2018/12/19/index.html","hash":"236166139d15bc7e5f3b9b8e522df6fd0eb91285","modified":1591094218766},{"_id":"public/面试整理——一/2018/11/22/index.html","hash":"bb16dff45ea1190daab7fd7aaa6de9eb5335e504","modified":1591094218766},{"_id":"public/webpack/2018/10/12/index.html","hash":"3fd0363496ca5d711f51e72005c8582314e6ab77","modified":1591094218766},{"_id":"public/面向对象的程序设计/2018/09/29/index.html","hash":"18303777e8f346dfb5d5efc1b65193ad7c05b4d9","modified":1591094218766},{"_id":"public/js生成UUID/2018/09/14/index.html","hash":"b5a9ca5ec7f27d7130bd7ec13c41a62c9cc408b4","modified":1591094218766},{"_id":"public/return、break、continue的区别/2018/09/07/index.html","hash":"7761e34758f238cfb6fa49754b36a64cde28732c","modified":1591094218766},{"_id":"public/PDF-js/2018/09/07/index.html","hash":"8240feaea5919d0d6515e1b7e1098c49f09e7bd3","modified":1591094218766},{"_id":"public/JS之操作符/2018/09/06/index.html","hash":"97843df6546e18236a493d4c155054448da2141f","modified":1591094218766},{"_id":"public/hexo-nexT主题-githubPages个人博客搭建/2018/08/29/index.html","hash":"94677126cc6aa4f34e8b95ee59333f3f1bfaa11b","modified":1591094218766},{"_id":"public/HEXO-NEXT主题个性化配置/2018/08/27/index.html","hash":"816af3e9c31b1aa811522d8ca9ebe82ccf23d959","modified":1591094218767},{"_id":"public/archives/index.html","hash":"40225561fa6c0a91c8f648fc4673e57d2feedfcb","modified":1591094218767},{"_id":"public/archives/page/2/index.html","hash":"c091e19b09959c15bb748d65072a9851c4c56bbd","modified":1591094218767},{"_id":"public/archives/page/3/index.html","hash":"b8987c20ef230746a1e0497519d92d1d01ea479c","modified":1591094218767},{"_id":"public/archives/page/4/index.html","hash":"b48ae12c20af26ce9a59e0b0a6ad3210cad58637","modified":1591094218767},{"_id":"public/archives/2018/index.html","hash":"41019c49961c312027a6f723a0557ae9583be41a","modified":1591094218767},{"_id":"public/archives/2018/page/2/index.html","hash":"545099bd699faa72ab5edcce211f01226b40bc97","modified":1591094218767},{"_id":"public/archives/2018/08/index.html","hash":"61441165574b6a21e6e1fd468c9053d7b5c7520b","modified":1591094218767},{"_id":"public/archives/2018/09/index.html","hash":"3e4f3cc9db03377ebdd2c4310fec829ece6c0c11","modified":1591094218767},{"_id":"public/archives/2018/10/index.html","hash":"d1c02958b4591802fe3d07368f9a14c3b1c1e6f3","modified":1591094218767},{"_id":"public/archives/2018/11/index.html","hash":"3b32c034641bedd4f0622919872123586414e5bf","modified":1591094218767},{"_id":"public/archives/2018/12/index.html","hash":"0772928361830c7d0dfda4d6571d48400c82af8f","modified":1591094218767},{"_id":"public/archives/2019/index.html","hash":"6eca9f8b0c82da252bc0a3353c57aa8daa60d553","modified":1591094218767},{"_id":"public/archives/2019/02/index.html","hash":"b7d2c71a1a748b1e74a011e7dcc3c580f93fdc16","modified":1591094218767},{"_id":"public/archives/2019/03/index.html","hash":"e9cb343e6a4ee30e049c8bc030b75ab71941e476","modified":1591094218767},{"_id":"public/archives/2019/05/index.html","hash":"801dc6999fffa7178fca167d2674586e27763f86","modified":1591094218767},{"_id":"public/archives/2019/04/index.html","hash":"9eb60be2c58bbc67f827eba0909366a2c5da304a","modified":1591094218767},{"_id":"public/archives/2019/12/index.html","hash":"246e112678b1b0e47b8efed28e7af88dde6be147","modified":1591094218767},{"_id":"public/archives/2020/index.html","hash":"1421844e7316f3d9c5c00c01736145c0ecaf1a0f","modified":1591094218767},{"_id":"public/archives/2020/05/index.html","hash":"e339ec9ae61a60ec80aa1b967f5715867443c954","modified":1591094218768},{"_id":"public/page/2/index.html","hash":"aee0c7c66fed2aa84bf17f49649d43b6ae14da01","modified":1591094218768},{"_id":"public/page/3/index.html","hash":"e5f08a264714a4ad5a6041ea1c372ca3b15ce00f","modified":1591094218768},{"_id":"public/index.html","hash":"2d56192923f4d719ff6944d0344504906dbafed7","modified":1591094218768},{"_id":"public/page/4/index.html","hash":"e94997cbde35d06a3e4f4443aef0f5e6ee88de38","modified":1591094218768},{"_id":"public/categories/javascript/index.html","hash":"8f107ff162ffee83976beaa25ce0987173eeb12a","modified":1591094218768},{"_id":"public/categories/javascript/page/2/index.html","hash":"1c0f425ffb92421efe5ac03a2b7b9f01fc31c1be","modified":1591094218768},{"_id":"public/categories/博客搭建/index.html","hash":"436c6d990490138947317a370ff71c2be7f23260","modified":1591094218768},{"_id":"public/categories/css/index.html","hash":"e235d68c59d6026da4cef8353eb2348bd9fabc8e","modified":1591094218768},{"_id":"public/categories/javascript/signalR/index.html","hash":"a9fd4190af2c3f7bf8ec195c17458d8e66f3afa6","modified":1591094218768},{"_id":"public/categories/RESTful/index.html","hash":"ca1a81b9da52b319d5a39cb2969fe9df2dec6cd1","modified":1591094218768},{"_id":"public/categories/webpack/index.html","hash":"209d4a2cf856e957033f901c4fd332a807638d2c","modified":1591094218768},{"_id":"public/categories/浏览器/index.html","hash":"b10bfd29a1a562fcea09750a1d8e566136a4d1ec","modified":1591094218768},{"_id":"public/categories/浏览器/缓存/index.html","hash":"a7ca7a046cbfa800de202f3826b2eac0282e1b03","modified":1591094218768},{"_id":"public/tags/PDF-js/index.html","hash":"cb19d277f787f3ee4b2e2933740bb8ae18740f2d","modified":1591094218768},{"_id":"public/tags/JavaScript/index.html","hash":"9c087ca8b806223ca4266a32bf6ce69cd36499d7","modified":1591094218768},{"_id":"public/tags/PDF解析器/index.html","hash":"f7ccd0e2572f3b06bfd146b2fb20996521d6da95","modified":1591094218768},{"_id":"public/tags/hexo/index.html","hash":"252aea4a1cdfec9e246f6cd24424170c35f9f880","modified":1591094218768},{"_id":"public/tags/nexT/index.html","hash":"cc96a0d177a53c736353b3c66dfd4d4e028b1d72","modified":1591094218769},{"_id":"public/tags/操作符/index.html","hash":"d35ce1d4a3e413e102074e4122cfc58902c2da60","modified":1591094218769},{"_id":"public/tags/JS/index.html","hash":"b8819ada5c899b15868acafe56fc59aa3eb0eb45","modified":1591094218769},{"_id":"public/tags/Promise/index.html","hash":"3ab0d44fd4c5ced10d1893371564889204c93402","modified":1591094218769},{"_id":"public/tags/return/index.html","hash":"7990f81d76eb1c17e8a457af0de9e73bbc0634ad","modified":1591094218769},{"_id":"public/tags/break/index.html","hash":"2bd818f0a80e9ba48b4f331a5f18a3351ae0f29f","modified":1591094218769},{"_id":"public/tags/continue/index.html","hash":"2cc2ff02d889b47b07b6b9e749670729d8748f4a","modified":1591094218769},{"_id":"public/tags/react/index.html","hash":"7eefd6f2bfbcdf55d7c29d8964ecdff65ca59e02","modified":1591094218769},{"_id":"public/tags/react-dnd/index.html","hash":"b7cbce6d2a8c92678f97264db8618f60ec2ef932","modified":1591094218769},{"_id":"public/tags/ant-design/index.html","hash":"e560a87b39beb8c147db4ee6bd16cbba21d0fbe1","modified":1591094218769},{"_id":"public/tags/table/index.html","hash":"2e8866c43b7bc5b5e819cbd50e1c4c4a77fd876c","modified":1591094218769},{"_id":"public/tags/拖拽/index.html","hash":"4f4e49ebb2ba3450f6347a2d65595a38f472c652","modified":1591094218769},{"_id":"public/tags/UUID/index.html","hash":"4e32e3c1937907be1ae4d07f13962477c62135b3","modified":1591094218769},{"_id":"public/tags/直接打印/index.html","hash":"414f65332233b07a29abd644a4e6265b5cf6e4b0","modified":1591094218769},{"_id":"public/tags/谷歌/index.html","hash":"bc115a5be4eba5d9d3db98eb29e8e6560781cf54","modified":1591094218770},{"_id":"public/tags/kiosk-printing/index.html","hash":"29ce89dd81db44462d5e665a22e6d18d93e44128","modified":1591094218770},{"_id":"public/tags/css/index.html","hash":"9a695c9b94a78b711b3f3d868a376e5ad30a8fbd","modified":1591094218770},{"_id":"public/tags/多行溢出/index.html","hash":"093cb3c2382126acfaae00f6338bc8f252fbff58","modified":1591094218770},{"_id":"public/tags/单行溢出/index.html","hash":"b319391a5f44e9044218683881ea36d8458e17e6","modified":1591094218770},{"_id":"public/tags/signalR/index.html","hash":"80fb8a8e7f06b3e0462b421be668fb90f19b0e1c","modified":1591094218770},{"_id":"public/tags/面向对象/index.html","hash":"440d9271937a222e673ed1419fd3b5dcd2d41edd","modified":1591094218770},{"_id":"public/tags/左右布局/index.html","hash":"55c4c2c5272792364df75f6ee4fdb2d6f05b638f","modified":1591094218770},{"_id":"public/tags/盒子模型/index.html","hash":"78661ac71e3c7e9fe595a8af15e33107fac9b389","modified":1591094218770},{"_id":"public/tags/css画三角形/index.html","hash":"d544d0893ea581bdb50f6b46ea5d0f8dc2abfdfd","modified":1591094218770},{"_id":"public/tags/webpack/index.html","hash":"e5d9605bac56d467f6bfb00580882645161812db","modified":1591094218770},{"_id":"public/tags/模块打包/index.html","hash":"28507d7b78a8e86f182d71ec13693f9f45943b2b","modified":1591094218770},{"_id":"public/tags/githubPages/index.html","hash":"237ab705c975663a890d712f47b736578bd3a57a","modified":1591094218770},{"_id":"public/robots.txt","hash":"ed574c4e94581d3dcb77ecfa575f5a284e618a86","modified":1591094218818},{"_id":"public/uploads/事件流.jpg","hash":"02d22c3f7cc7de8419e23115b2bbd78614395574","modified":1591094218818},{"_id":"public/uploads/add--kiosk-printing.png","hash":"3f05fd6a26c030ab0f24033d38526cdf6b987406","modified":1591094218819},{"_id":"public/uploads/单行溢出.jpg","hash":"a9576d906e1ace5cc6b82de9ecdfde9cce0ad9f4","modified":1591094218819},{"_id":"public/uploads/我离开我自己-杨乃文.lrc","hash":"95e7d311ceba0eb797732d71e021c8bde83aed86","modified":1591094218819},{"_id":"public/uploads/非整行溢出.jpg","hash":"bf6446c4746a3b5df3176bb57a97b6eb9aaa087c","modified":1591094218819},{"_id":"public/uploads/风-汪小敏.lrc","hash":"7e5d2ea20b22dc7e9a29ac3b3d18c2995f2f30a8","modified":1591094218819},{"_id":"public/uploads/애월낙조 (涯月落照)-장필순.lrc","hash":"cfcdff1305a321bac7e8fb001ebb7fa1d4599e5a","modified":1591094218819},{"_id":"public/uploads/涯月落照.jpg","hash":"c24ef5b9daaa5a6d553a6e88002ce8466dd908fb","modified":1591094218819},{"_id":"public/uploads/多行溢出.jpg","hash":"d23e4221729427e9c60bd3eb53d950909513fe33","modified":1591094218819},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1591094218819},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1591094218819},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1591094218819},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1591094218819},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1591094218819},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1591094218819},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1591094218819},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1591094218819},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1591094218819},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1591094218820},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1591094218820},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1591094218820},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1591094218820},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1591094218820},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1591094218820},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1591094218820},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1591094218820},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1591094218820},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1591094218820},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1591094218820},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1591094220933},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1591094220947},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1591094220955},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1591094220957},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1591094220958},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1591094220958},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1591094220958},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1591094220959},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1591094220959},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1591094220960},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1591094220960},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1591094220961},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1591094220961},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1591094220962},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1591094220962},{"_id":"public/uploads/alipay.jpg","hash":"203cb84f930bbb65403cba10ebcae8a9b8615c1c","modified":1591094220962},{"_id":"public/uploads/PDFRenderingQueue_getHighestPriority里面点击打印.jpg","hash":"81c210c129d7b2ddbae63203680beb446a6d346d","modified":1591094220962},{"_id":"public/uploads/avatar.jpg","hash":"d5c753d64be46b1bd60601f4e198450836028309","modified":1591094220962},{"_id":"public/uploads/杨乃文.jpg","hash":"d7bd80b3e45ac3c3813504481fe91f47bb1544df","modified":1591094220963},{"_id":"public/images/cover.jpg","hash":"13376a6e2b89c578378d1caacb862fdd347c35b5","modified":1591094220963},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1591094221082},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1591094221086},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1591094221101},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1591094221101},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1591094221101},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1591094221101},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1591094221101},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1591094221101},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1591094221101},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1591094221101},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1591094221101},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1591094221101},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1591094221102},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1591094221102},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1591094221102},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1591094221102},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1591094221102},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1591094221102},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1591094221102},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1591094221102},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1591094221102},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1591094221103},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1591094221103},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1591094221103},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1591094221103},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1591094221103},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1591094221103},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1591094221103},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1591094221103},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1591094221103},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1591094221103},{"_id":"public/404.html","hash":"4cd5ccb2752698a514ef658cef6e5be46e25ce80","modified":1591094221104},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"9df01e3b445243c09f505b203d9175e3780c2496","modified":1591094221104},{"_id":"public/lib/jquery_lazyload/README.html","hash":"58996cc3bbe52f55bf11c5276124176cb53995ad","modified":1591094221105},{"_id":"public/css/main.css","hash":"90d99964e50fbabe600aac0cdde9c62c73774e86","modified":1591094221107},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1591094221107},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1591094221108},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1591094221108},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1591094221109},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1591094221109},{"_id":"public/uploads/cache.png","hash":"65639f3e737ada454d9173c8cc403a5b6ddaf15d","modified":1591094221109},{"_id":"public/uploads/你好旧时光.jpg","hash":"c60009734b2256d0ca95d5a48c1f0fe3386e6881","modified":1591094221110},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1591094221167},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1591094221167},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1591094221167},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1591094221167},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1591094221167},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1591094221167},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1591094221167},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1591094221167},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1591094221167},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1591094221167},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1591094221167},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1591094221170},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1591094221171},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1591094221182},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1591094221183},{"_id":"public/lib/fastclick/README.html","hash":"780dc918531c1160ac853a983324b25b4ee1eab5","modified":1591094221183},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1591094221184},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1591094221184},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1591094221184},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1591094221184},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1591094221184},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1591094221184},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1591094221186},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1591094221186},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1591094221187},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1591094221187},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1591094221187},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1591094221187},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1591094221187},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1591094221188},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1591094221188},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1591094221190},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1591094221191},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1591094221193},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1591094221194},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1591094221196},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1591094221196},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1591094221196},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1591094221197},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1591094221201},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1591094221400},{"_id":"public/uploads/cache1.png","hash":"a1a87b6570a0655625bf758464ebddd6f71658de","modified":1591094221400},{"_id":"public/uploads/水管的友情.jpg","hash":"64c32f1c85a149e0e8d083da53efa7b068f2612b","modified":1591094222182},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1591094223402},{"_id":"public/uploads/水管的友情.flac","hash":"dd69b4d800b0e11d7d38c38c18eadbf0d27a176a","modified":1591094224003},{"_id":"public/uploads/애월낙조(涯月落照)-장필순.mp3","hash":"73daa52bae289beeb852ee08a564ce4fe7a909f1","modified":1591094224052},{"_id":"public/uploads/我离开我自己.flac","hash":"ccfa7fb8da0ef62b418da7d84b35ec896ecac8e7","modified":1591094224195},{"_id":"public/uploads/风.flac","hash":"ebc0ee249a97a413d6ac13bed34ea529d520beb8","modified":1591094224269}],"Category":[{"name":"javascript","_id":"ckaxser5n0004cston6cx47wd"},{"name":"博客搭建","_id":"ckaxser61000bcstol86ye1q6"},{"name":"RESTful","_id":"ckaxser73000ucstowsva8lz7"},{"name":"css","_id":"ckaxser7a0012cstoytw7669z"},{"name":"signalR","parent":"ckaxser5n0004cston6cx47wd","_id":"ckaxser7i001ccsto5165tiql"},{"name":"webpack","_id":"ckaxser7m001icsto5q1qmdbw"},{"name":"浏览器","_id":"ckaxser7t001pcstovo4x76dx"},{"name":"缓存","parent":"ckaxser7t001pcstovo4x76dx","_id":"ckaxser7x001wcstom4guwrg6"}],"Data":[],"Page":[{"title":"我","date":"2018-08-29T01:20:02.000Z","comments":0,"_content":"\n<blockquote class=\"blockquote-center\">\n    不怕念起 唯恐觉迟\n</blockquote>","source":"about/index.md","raw":"---\ntitle: 我\ndate: 2018-08-29 09:20:02\ncomments: false\n---\n\n<blockquote class=\"blockquote-center\">\n    不怕念起 唯恐觉迟\n</blockquote>","updated":"2019-12-24T03:04:37.367Z","path":"about/index.html","layout":"page","_id":"ckaxser580001cstog34fiogv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote class=\"blockquote-center\"><br>    不怕念起 唯恐觉迟<br></blockquote>","site":{"data":{}},"excerpt":"","more":"<blockquote class=\"blockquote-center\"><br>    不怕念起 唯恐觉迟<br></blockquote>"},{"title":"分类","date":"2018-08-24T09:18:10.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-08-24 17:18:10\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-12-24T03:04:37.368Z","path":"categories/index.html","layout":"page","_id":"ckaxser5i0003cstob7llk07q","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""},{"title":"pageTest","date":"2018-08-24T08:58:07.000Z","_content":"","source":"pageTest/index.md","raw":"---\ntitle: pageTest\ndate: 2018-08-24 16:58:07\n---\n","updated":"2019-12-24T03:04:37.370Z","path":"pageTest/index.html","comments":1,"layout":"page","_id":"ckaxser5r0007csto2licyjfr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-08-24T09:16:48.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-08-24 17:16:48\ntype: tags\ncomments: false\n---\n","updated":"2019-12-24T03:04:37.371Z","path":"tags/index.html","layout":"page","_id":"ckaxser5u0009cstoql32qhhc","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""},{"title":"音乐","date":"2018-08-28T07:11:02.000Z","comments":1,"_content":"\n\n\n{% blockquote 刘瑜, 送你一颗子弹 %}\n灵魂惊慌失措时，总有一个方圆6.5分钟的故乡可以投奔，多么好。有我的世界里同时还有 Tom waits，人生几乎变得有意义。\n{% endblockquote %}\n\n\n\n{% aplayerlist %}\n{\n    \"narrow\": false,                          \n    \"autoplay\": true,                      \n    \"mode\": \"random\",                        \n    \"showlrc\": 3,                          \n    \"mutex\": true,                         \n    \"theme\": \"#e6d0b2\",\t                     \n    \"preload\": \"metadata\",                   \n    \"listmaxheight\": \"700px\",                \n    \"music\": [\n              {\n                  \"title\": \"风\",\n                  \"author\": \"汪小敏\",\n                  \"url\": \"/uploads/风.flac\",\n                  \"lrc\": \"/uploads/风-汪小敏.lrc\",\n                  \"pic\": \"/uploads/你好旧时光.jpg\"\n              },{\n                  \"title\": \"我离开我自己\",\n                  \"author\": \"杨乃文\",\n                  \"url\": \"/uploads/我离开我自己.flac\",\n                  \"pic\": \"/uploads/杨乃文.jpg\",\n                  \"lrc\": \"/uploads/我离开我自己-杨乃文.lrc\"\n              },\n              {\n                  \"title\": \"애월낙조\",\n                  \"author\": \"张弼顺\",\n                  \"lrc\":\"/uploads/애월낙조 (涯月落照)-장필순.lrc\",\n                  \"pic\": \"/uploads/涯月落照.jpg\",\n                  \"url\": \"/uploads/애월낙조(涯月落照)-장필순.mp3\"\n              },\n              {\n                  \"title\": \"水管的友情\",\n                  \"author\": \"周杰伦\",\n                  \"url\": \"/uploads/水管的友情.flac\",\n                  \"pic\": \"/uploads/水管的友情.jpg\"\n              }\n          ]\n}\n{% endaplayerlist %}","source":"音乐/index.md","raw":"---\ntitle: 音乐\ndate: 2018-08-28 15:11:02\ncomments: true\n---\n\n\n\n{% blockquote 刘瑜, 送你一颗子弹 %}\n灵魂惊慌失措时，总有一个方圆6.5分钟的故乡可以投奔，多么好。有我的世界里同时还有 Tom waits，人生几乎变得有意义。\n{% endblockquote %}\n\n\n\n{% aplayerlist %}\n{\n    \"narrow\": false,                          \n    \"autoplay\": true,                      \n    \"mode\": \"random\",                        \n    \"showlrc\": 3,                          \n    \"mutex\": true,                         \n    \"theme\": \"#e6d0b2\",\t                     \n    \"preload\": \"metadata\",                   \n    \"listmaxheight\": \"700px\",                \n    \"music\": [\n              {\n                  \"title\": \"风\",\n                  \"author\": \"汪小敏\",\n                  \"url\": \"/uploads/风.flac\",\n                  \"lrc\": \"/uploads/风-汪小敏.lrc\",\n                  \"pic\": \"/uploads/你好旧时光.jpg\"\n              },{\n                  \"title\": \"我离开我自己\",\n                  \"author\": \"杨乃文\",\n                  \"url\": \"/uploads/我离开我自己.flac\",\n                  \"pic\": \"/uploads/杨乃文.jpg\",\n                  \"lrc\": \"/uploads/我离开我自己-杨乃文.lrc\"\n              },\n              {\n                  \"title\": \"애월낙조\",\n                  \"author\": \"张弼顺\",\n                  \"lrc\":\"/uploads/애월낙조 (涯月落照)-장필순.lrc\",\n                  \"pic\": \"/uploads/涯月落照.jpg\",\n                  \"url\": \"/uploads/애월낙조(涯月落照)-장필순.mp3\"\n              },\n              {\n                  \"title\": \"水管的友情\",\n                  \"author\": \"周杰伦\",\n                  \"url\": \"/uploads/水管的友情.flac\",\n                  \"pic\": \"/uploads/水管的友情.jpg\"\n              }\n          ]\n}\n{% endaplayerlist %}","updated":"2019-12-24T03:04:37.703Z","path":"音乐/index.html","layout":"page","_id":"ckaxser62000dcsto857899n7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote><p>灵魂惊慌失措时，总有一个方圆6.5分钟的故乡可以投奔，多么好。有我的世界里同时还有 Tom waits，人生几乎变得有意义。</p>\n<footer><strong>刘瑜</strong><cite>送你一颗子弹</cite></footer></blockquote>\n\n        <div id=\"aplayer-apwVQyWg\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":true,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"700px\",\"music\":[{\"title\":\"风\",\"author\":\"汪小敏\",\"url\":\"/uploads/风.flac\",\"lrc\":\"/uploads/风-汪小敏.lrc\",\"pic\":\"/uploads/你好旧时光.jpg\"},{\"title\":\"我离开我自己\",\"author\":\"杨乃文\",\"url\":\"/uploads/我离开我自己.flac\",\"pic\":\"/uploads/杨乃文.jpg\",\"lrc\":\"/uploads/我离开我自己-杨乃文.lrc\"},{\"title\":\"애월낙조\",\"author\":\"张弼顺\",\"lrc\":\"/uploads/애월낙조 (涯月落照)-장필순.lrc\",\"pic\":\"/uploads/涯月落照.jpg\",\"url\":\"/uploads/애월낙조(涯月落照)-장필순.mp3\"},{\"title\":\"水管的友情\",\"author\":\"周杰伦\",\"url\":\"/uploads/水管的友情.flac\",\"pic\":\"/uploads/水管的友情.jpg\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-apwVQyWg\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>","site":{"data":{}},"excerpt":"","more":"<blockquote><p>灵魂惊慌失措时，总有一个方圆6.5分钟的故乡可以投奔，多么好。有我的世界里同时还有 Tom waits，人生几乎变得有意义。</p>\n<footer><strong>刘瑜</strong><cite>送你一颗子弹</cite></footer></blockquote>\n\n        <div id=\"aplayer-apwVQyWg\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":true,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"700px\",\"music\":[{\"title\":\"风\",\"author\":\"汪小敏\",\"url\":\"/uploads/风.flac\",\"lrc\":\"/uploads/风-汪小敏.lrc\",\"pic\":\"/uploads/你好旧时光.jpg\"},{\"title\":\"我离开我自己\",\"author\":\"杨乃文\",\"url\":\"/uploads/我离开我自己.flac\",\"pic\":\"/uploads/杨乃文.jpg\",\"lrc\":\"/uploads/我离开我自己-杨乃文.lrc\"},{\"title\":\"애월낙조\",\"author\":\"张弼顺\",\"lrc\":\"/uploads/애월낙조 (涯月落照)-장필순.lrc\",\"pic\":\"/uploads/涯月落照.jpg\",\"url\":\"/uploads/애월낙조(涯月落照)-장필순.mp3\"},{\"title\":\"水管的友情\",\"author\":\"周杰伦\",\"url\":\"/uploads/水管的友情.flac\",\"pic\":\"/uploads/水管的友情.jpg\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-apwVQyWg\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>"}],"Post":[{"title":"PDF.js","toc":true,"comments":1,"date":"2018-09-07T01:42:38.000Z","_content":"# PDF.js介绍\nPDF.js 是基于开放的 HTML5 及 JavaScript 技术实现的开源产品。简单说就是一个 PDF 解析器。\n\n最初使用这个东西的原因是公司技术总监说要做一个打印模板设计器。本公司的产品有很多内容都是需要打印的，且每个打印的内容页面设计是不一样的，导致每次实现打印页面的时候就要单独写一个HTML页面，部分还涉及到小票的套打，很繁琐。因此，需要做一个打印设计器，方便每次打印页面的生成，具体我也不知道是怎么弄的。。。后台开发将设计好的内容以buffer的形式传给前端显示，前端这边需要做的就是将`buffer内容用PDF显示出来`。\n# 下载\n[官网地址](http://mozilla.github.io/pdf.js/)\n\n# 显示 buffer 内容\n1. 将viewer.js文件中的变量 DEFAULT_URL 删除\n2. 在viewer.html中重新定义DEFAULT_URL,我们在这里做buffer的转换，`必须把buffer转换成Uint8Array类型`，这样pdf.js才能直接解析。\n    ```\n    <script>\n        let  = \"\";//注意，删除的变量在这里重新定义\n        let PDFData = window.sessionStorage.pdf;\n        let rawLength = PDFData.length;\n        //转换成pdf.js能直接解析的Uint8Array类型,见pdf.js-4068\n        let array = new Uint8Array(new ArrayBuffer(rawLength));\n        for(i = 0; i < rawLength; i++) {\n            array[i] = PDFData.charCodeAt(i) & 0xff;\n        }\n        DEFAULT_URL = array;\n    </script>\n    ```\n这段代码中我将buffer保存在浏览器本地传过来的，因为是在react项目中使用，我没有想到更好的办法将react组件中产生的内容传递到HTML页面中。。。。\n\n以上代码要放在`<script src=\"viewer.js\"></script>`前面。\n\n至此，内容应该是可以显示了。\n\n# 直接弹出打印预览窗口\n\n前面说过，公司产品有很多内容都是需要打印的，客户不会太愿意在打开PDF预览界面之后手动点击打印按钮去打印，然后弹出打印预览窗口，还要点击打印，从打印机打印出来，这对客户来说`打印`需要执行的操作付出的代价过大了，所以为了更好的客户体验，在PDF页面渲染完成后直接弹出打印预览界面。\n\n## PDF.js重写了浏览器本身的打印方法\n\n```\n    //viewer.js\n    document.getElementById('print').addEventListener('click',\n        SecondaryToolbar.printClick.bind(SecondaryToolbar));\n```\n## RenderingStates 渲染状态\nviewer.js 中有RenderingStates来表示渲染的状态\n```\nvar RenderingStates = {\n    INITIAL: 0,\n    RUNNING: 1,\n    PAUSED: 2,\n    FINISHED: 3\n};\n```\n错误：\n    首先想到在`view.renderingState === RenderingStates.FINISHED`的时候执行，即\n\n    ```\n    isViewFinished: function PDFRenderingQueue_isViewFinished(view) {\n        <!-- 添加打印代码 -->\n        if(view.renderingState === RenderingStates.FINISHED && sessionStorage.isPrint === 'true'){\n            document.getElementById('print').click()\n        }\n        <!-- 添加打印代码 end-->\n        return view.renderingState === RenderingStates.FINISHED;\n        }\n    ```\n然后在加载页面多的时候会有这样的提示\n![img](http://pe5s1kztp.bkt.clouddn.com/images/PDF%E8%AD%A6%E5%91%8A.jpg \"PDF未完全加载已供打印\")\n\n嗯==，然后我实在没有找到很合适的地方去调用打印的这个方法，最后在这里加上的\n![img](/uploads/PDFRenderingQueue_getHighestPriority里面点击打印.jpg)\n在PDFRenderingQueue原型里面的PDFRenderingQueue_getHighestPriority方法里调用\n\n ```\n if (sessionStorage.isPrint === 'true') {\n                document.getElementById('print').click();\n                sessionStorage.isPrint=false;\n            }\n            ```\n\n这样以后，‘PDF未完全加载已供打印’的提示没有的，打印页面也正常了。\n\n注意`sessionStorage.isPrint=false;`这个控制语句要加上，不然即使点击了取消打印预览窗口，该窗口还是会不断弹出来。\n\n## 实现类似直接打印效果（不预览）\n\n **思路：将弹出窗口的尺寸放到最小，打印完成后，自动将窗口关闭**\n1.\t创建谷歌浏览器快捷方式（下次要从快捷方式打开）\n2.\t快捷方式，右击->属性->目标 的尾部添加  --kiosk-printing 注意前面有空格 ![img](/uploads/add--kiosk-printing.png)\n **实际上，这步之后，window.print(),就不会弹出预览窗口了**\n3. pdfjs里面有对 **beforeprint**和 **afterprint**两个方法监听，只需在afterprint方法里面将窗口关闭就可。\n\n以上只针对一些项目需要的功能进行处理。","source":"_posts/PDF-js.md","raw":"---\ntitle: PDF.js\ntoc: true\ncomments: true\ndate: 2018-09-07 09:42:38\ncategories: javascript\ntags: \n    - PDF.js \n    - JavaScript \n    - PDF解析器\n---\n# PDF.js介绍\nPDF.js 是基于开放的 HTML5 及 JavaScript 技术实现的开源产品。简单说就是一个 PDF 解析器。\n\n最初使用这个东西的原因是公司技术总监说要做一个打印模板设计器。本公司的产品有很多内容都是需要打印的，且每个打印的内容页面设计是不一样的，导致每次实现打印页面的时候就要单独写一个HTML页面，部分还涉及到小票的套打，很繁琐。因此，需要做一个打印设计器，方便每次打印页面的生成，具体我也不知道是怎么弄的。。。后台开发将设计好的内容以buffer的形式传给前端显示，前端这边需要做的就是将`buffer内容用PDF显示出来`。\n# 下载\n[官网地址](http://mozilla.github.io/pdf.js/)\n\n# 显示 buffer 内容\n1. 将viewer.js文件中的变量 DEFAULT_URL 删除\n2. 在viewer.html中重新定义DEFAULT_URL,我们在这里做buffer的转换，`必须把buffer转换成Uint8Array类型`，这样pdf.js才能直接解析。\n    ```\n    <script>\n        let  = \"\";//注意，删除的变量在这里重新定义\n        let PDFData = window.sessionStorage.pdf;\n        let rawLength = PDFData.length;\n        //转换成pdf.js能直接解析的Uint8Array类型,见pdf.js-4068\n        let array = new Uint8Array(new ArrayBuffer(rawLength));\n        for(i = 0; i < rawLength; i++) {\n            array[i] = PDFData.charCodeAt(i) & 0xff;\n        }\n        DEFAULT_URL = array;\n    </script>\n    ```\n这段代码中我将buffer保存在浏览器本地传过来的，因为是在react项目中使用，我没有想到更好的办法将react组件中产生的内容传递到HTML页面中。。。。\n\n以上代码要放在`<script src=\"viewer.js\"></script>`前面。\n\n至此，内容应该是可以显示了。\n\n# 直接弹出打印预览窗口\n\n前面说过，公司产品有很多内容都是需要打印的，客户不会太愿意在打开PDF预览界面之后手动点击打印按钮去打印，然后弹出打印预览窗口，还要点击打印，从打印机打印出来，这对客户来说`打印`需要执行的操作付出的代价过大了，所以为了更好的客户体验，在PDF页面渲染完成后直接弹出打印预览界面。\n\n## PDF.js重写了浏览器本身的打印方法\n\n```\n    //viewer.js\n    document.getElementById('print').addEventListener('click',\n        SecondaryToolbar.printClick.bind(SecondaryToolbar));\n```\n## RenderingStates 渲染状态\nviewer.js 中有RenderingStates来表示渲染的状态\n```\nvar RenderingStates = {\n    INITIAL: 0,\n    RUNNING: 1,\n    PAUSED: 2,\n    FINISHED: 3\n};\n```\n错误：\n    首先想到在`view.renderingState === RenderingStates.FINISHED`的时候执行，即\n\n    ```\n    isViewFinished: function PDFRenderingQueue_isViewFinished(view) {\n        <!-- 添加打印代码 -->\n        if(view.renderingState === RenderingStates.FINISHED && sessionStorage.isPrint === 'true'){\n            document.getElementById('print').click()\n        }\n        <!-- 添加打印代码 end-->\n        return view.renderingState === RenderingStates.FINISHED;\n        }\n    ```\n然后在加载页面多的时候会有这样的提示\n![img](http://pe5s1kztp.bkt.clouddn.com/images/PDF%E8%AD%A6%E5%91%8A.jpg \"PDF未完全加载已供打印\")\n\n嗯==，然后我实在没有找到很合适的地方去调用打印的这个方法，最后在这里加上的\n![img](/uploads/PDFRenderingQueue_getHighestPriority里面点击打印.jpg)\n在PDFRenderingQueue原型里面的PDFRenderingQueue_getHighestPriority方法里调用\n\n ```\n if (sessionStorage.isPrint === 'true') {\n                document.getElementById('print').click();\n                sessionStorage.isPrint=false;\n            }\n            ```\n\n这样以后，‘PDF未完全加载已供打印’的提示没有的，打印页面也正常了。\n\n注意`sessionStorage.isPrint=false;`这个控制语句要加上，不然即使点击了取消打印预览窗口，该窗口还是会不断弹出来。\n\n## 实现类似直接打印效果（不预览）\n\n **思路：将弹出窗口的尺寸放到最小，打印完成后，自动将窗口关闭**\n1.\t创建谷歌浏览器快捷方式（下次要从快捷方式打开）\n2.\t快捷方式，右击->属性->目标 的尾部添加  --kiosk-printing 注意前面有空格 ![img](/uploads/add--kiosk-printing.png)\n **实际上，这步之后，window.print(),就不会弹出预览窗口了**\n3. pdfjs里面有对 **beforeprint**和 **afterprint**两个方法监听，只需在afterprint方法里面将窗口关闭就可。\n\n以上只针对一些项目需要的功能进行处理。","slug":"PDF-js","published":1,"updated":"2019-12-24T03:04:37.360Z","layout":"post","photos":[],"link":"","_id":"ckaxser520000cstoq5cwcafs","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"PDF-js介绍\"><a href=\"#PDF-js介绍\" class=\"headerlink\" title=\"PDF.js介绍\"></a>PDF.js介绍</h1><p>PDF.js 是基于开放的 HTML5 及 JavaScript 技术实现的开源产品。简单说就是一个 PDF 解析器。</p>\n<p>最初使用这个东西的原因是公司技术总监说要做一个打印模板设计器。本公司的产品有很多内容都是需要打印的，且每个打印的内容页面设计是不一样的，导致每次实现打印页面的时候就要单独写一个HTML页面，部分还涉及到小票的套打，很繁琐。因此，需要做一个打印设计器，方便每次打印页面的生成，具体我也不知道是怎么弄的。。。后台开发将设计好的内容以buffer的形式传给前端显示，前端这边需要做的就是将<code>buffer内容用PDF显示出来</code>。</p>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p><a href=\"http://mozilla.github.io/pdf.js/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官网地址</a></p>\n<h1 id=\"显示-buffer-内容\"><a href=\"#显示-buffer-内容\" class=\"headerlink\" title=\"显示 buffer 内容\"></a>显示 buffer 内容</h1><ol>\n<li>将viewer.js文件中的变量 DEFAULT_URL 删除</li>\n<li>在viewer.html中重新定义DEFAULT_URL,我们在这里做buffer的转换，<code>必须把buffer转换成Uint8Array类型</code>，这样pdf.js才能直接解析。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    let  = &quot;&quot;;//注意，删除的变量在这里重新定义</span><br><span class=\"line\">    let PDFData = window.sessionStorage.pdf;</span><br><span class=\"line\">    let rawLength = PDFData.length;</span><br><span class=\"line\">    //转换成pdf.js能直接解析的Uint8Array类型,见pdf.js-4068</span><br><span class=\"line\">    let array = new Uint8Array(new ArrayBuffer(rawLength));</span><br><span class=\"line\">    for(i = 0; i &lt; rawLength; i++) &#123;</span><br><span class=\"line\">        array[i] = PDFData.charCodeAt(i) &amp; 0xff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DEFAULT_URL = array;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码中我将buffer保存在浏览器本地传过来的，因为是在react项目中使用，我没有想到更好的办法将react组件中产生的内容传递到HTML页面中。。。。</p>\n<p>以上代码要放在<code>&lt;script src=&quot;viewer.js&quot;&gt;&lt;/script&gt;</code>前面。</p>\n<p>至此，内容应该是可以显示了。</p>\n<h1 id=\"直接弹出打印预览窗口\"><a href=\"#直接弹出打印预览窗口\" class=\"headerlink\" title=\"直接弹出打印预览窗口\"></a>直接弹出打印预览窗口</h1><p>前面说过，公司产品有很多内容都是需要打印的，客户不会太愿意在打开PDF预览界面之后手动点击打印按钮去打印，然后弹出打印预览窗口，还要点击打印，从打印机打印出来，这对客户来说<code>打印</code>需要执行的操作付出的代价过大了，所以为了更好的客户体验，在PDF页面渲染完成后直接弹出打印预览界面。</p>\n<h2 id=\"PDF-js重写了浏览器本身的打印方法\"><a href=\"#PDF-js重写了浏览器本身的打印方法\" class=\"headerlink\" title=\"PDF.js重写了浏览器本身的打印方法\"></a>PDF.js重写了浏览器本身的打印方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//viewer.js</span><br><span class=\"line\">document.getElementById(&apos;print&apos;).addEventListener(&apos;click&apos;,</span><br><span class=\"line\">    SecondaryToolbar.printClick.bind(SecondaryToolbar));</span><br></pre></td></tr></table></figure>\n<h2 id=\"RenderingStates-渲染状态\"><a href=\"#RenderingStates-渲染状态\" class=\"headerlink\" title=\"RenderingStates 渲染状态\"></a>RenderingStates 渲染状态</h2><p>viewer.js 中有RenderingStates来表示渲染的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var RenderingStates = &#123;</span><br><span class=\"line\">    INITIAL: 0,</span><br><span class=\"line\">    RUNNING: 1,</span><br><span class=\"line\">    PAUSED: 2,</span><br><span class=\"line\">    FINISHED: 3</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>错误：<br>    首先想到在<code>view.renderingState === RenderingStates.FINISHED</code>的时候执行，即</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isViewFinished: function PDFRenderingQueue_isViewFinished(view) &#123;</span><br><span class=\"line\">    &lt;!-- 添加打印代码 --&gt;</span><br><span class=\"line\">    if(view.renderingState === RenderingStates.FINISHED &amp;&amp; sessionStorage.isPrint === &apos;true&apos;)&#123;</span><br><span class=\"line\">        document.getElementById(&apos;print&apos;).click()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;!-- 添加打印代码 end--&gt;</span><br><span class=\"line\">    return view.renderingState === RenderingStates.FINISHED;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后在加载页面多的时候会有这样的提示<br><img src=\"http://pe5s1kztp.bkt.clouddn.com/images/PDF%E8%AD%A6%E5%91%8A.jpg\" alt=\"img\" title=\"PDF未完全加载已供打印\"></p>\n<p>嗯==，然后我实在没有找到很合适的地方去调用打印的这个方法，最后在这里加上的<br><img src=\"/uploads/PDFRenderingQueue_getHighestPriority里面点击打印.jpg\" alt=\"img\"><br>在PDFRenderingQueue原型里面的PDFRenderingQueue_getHighestPriority方法里调用</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (sessionStorage.isPrint === &apos;true&apos;) &#123;</span><br><span class=\"line\">               document.getElementById(&apos;print&apos;).click();</span><br><span class=\"line\">               sessionStorage.isPrint=false;</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n<p>这样以后，‘PDF未完全加载已供打印’的提示没有的，打印页面也正常了。</p>\n<p>注意<code>sessionStorage.isPrint=false;</code>这个控制语句要加上，不然即使点击了取消打印预览窗口，该窗口还是会不断弹出来。</p>\n<h2 id=\"实现类似直接打印效果（不预览）\"><a href=\"#实现类似直接打印效果（不预览）\" class=\"headerlink\" title=\"实现类似直接打印效果（不预览）\"></a>实现类似直接打印效果（不预览）</h2><p> <strong>思路：将弹出窗口的尺寸放到最小，打印完成后，自动将窗口关闭</strong></p>\n<ol>\n<li>创建谷歌浏览器快捷方式（下次要从快捷方式打开）</li>\n<li>快捷方式，右击-&gt;属性-&gt;目标 的尾部添加  –kiosk-printing 注意前面有空格 <img src=\"/uploads/add--kiosk-printing.png\" alt=\"img\"><br><strong>实际上，这步之后，window.print(),就不会弹出预览窗口了</strong></li>\n<li>pdfjs里面有对 <strong>beforeprint</strong>和 <strong>afterprint</strong>两个方法监听，只需在afterprint方法里面将窗口关闭就可。</li>\n</ol>\n<p>以上只针对一些项目需要的功能进行处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"PDF-js介绍\"><a href=\"#PDF-js介绍\" class=\"headerlink\" title=\"PDF.js介绍\"></a>PDF.js介绍</h1><p>PDF.js 是基于开放的 HTML5 及 JavaScript 技术实现的开源产品。简单说就是一个 PDF 解析器。</p>\n<p>最初使用这个东西的原因是公司技术总监说要做一个打印模板设计器。本公司的产品有很多内容都是需要打印的，且每个打印的内容页面设计是不一样的，导致每次实现打印页面的时候就要单独写一个HTML页面，部分还涉及到小票的套打，很繁琐。因此，需要做一个打印设计器，方便每次打印页面的生成，具体我也不知道是怎么弄的。。。后台开发将设计好的内容以buffer的形式传给前端显示，前端这边需要做的就是将<code>buffer内容用PDF显示出来</code>。</p>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p><a href=\"http://mozilla.github.io/pdf.js/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官网地址</a></p>\n<h1 id=\"显示-buffer-内容\"><a href=\"#显示-buffer-内容\" class=\"headerlink\" title=\"显示 buffer 内容\"></a>显示 buffer 内容</h1><ol>\n<li>将viewer.js文件中的变量 DEFAULT_URL 删除</li>\n<li>在viewer.html中重新定义DEFAULT_URL,我们在这里做buffer的转换，<code>必须把buffer转换成Uint8Array类型</code>，这样pdf.js才能直接解析。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    let  = &quot;&quot;;//注意，删除的变量在这里重新定义</span><br><span class=\"line\">    let PDFData = window.sessionStorage.pdf;</span><br><span class=\"line\">    let rawLength = PDFData.length;</span><br><span class=\"line\">    //转换成pdf.js能直接解析的Uint8Array类型,见pdf.js-4068</span><br><span class=\"line\">    let array = new Uint8Array(new ArrayBuffer(rawLength));</span><br><span class=\"line\">    for(i = 0; i &lt; rawLength; i++) &#123;</span><br><span class=\"line\">        array[i] = PDFData.charCodeAt(i) &amp; 0xff;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DEFAULT_URL = array;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码中我将buffer保存在浏览器本地传过来的，因为是在react项目中使用，我没有想到更好的办法将react组件中产生的内容传递到HTML页面中。。。。</p>\n<p>以上代码要放在<code>&lt;script src=&quot;viewer.js&quot;&gt;&lt;/script&gt;</code>前面。</p>\n<p>至此，内容应该是可以显示了。</p>\n<h1 id=\"直接弹出打印预览窗口\"><a href=\"#直接弹出打印预览窗口\" class=\"headerlink\" title=\"直接弹出打印预览窗口\"></a>直接弹出打印预览窗口</h1><p>前面说过，公司产品有很多内容都是需要打印的，客户不会太愿意在打开PDF预览界面之后手动点击打印按钮去打印，然后弹出打印预览窗口，还要点击打印，从打印机打印出来，这对客户来说<code>打印</code>需要执行的操作付出的代价过大了，所以为了更好的客户体验，在PDF页面渲染完成后直接弹出打印预览界面。</p>\n<h2 id=\"PDF-js重写了浏览器本身的打印方法\"><a href=\"#PDF-js重写了浏览器本身的打印方法\" class=\"headerlink\" title=\"PDF.js重写了浏览器本身的打印方法\"></a>PDF.js重写了浏览器本身的打印方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//viewer.js</span><br><span class=\"line\">document.getElementById(&apos;print&apos;).addEventListener(&apos;click&apos;,</span><br><span class=\"line\">    SecondaryToolbar.printClick.bind(SecondaryToolbar));</span><br></pre></td></tr></table></figure>\n<h2 id=\"RenderingStates-渲染状态\"><a href=\"#RenderingStates-渲染状态\" class=\"headerlink\" title=\"RenderingStates 渲染状态\"></a>RenderingStates 渲染状态</h2><p>viewer.js 中有RenderingStates来表示渲染的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var RenderingStates = &#123;</span><br><span class=\"line\">    INITIAL: 0,</span><br><span class=\"line\">    RUNNING: 1,</span><br><span class=\"line\">    PAUSED: 2,</span><br><span class=\"line\">    FINISHED: 3</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>错误：<br>    首先想到在<code>view.renderingState === RenderingStates.FINISHED</code>的时候执行，即</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isViewFinished: function PDFRenderingQueue_isViewFinished(view) &#123;</span><br><span class=\"line\">    &lt;!-- 添加打印代码 --&gt;</span><br><span class=\"line\">    if(view.renderingState === RenderingStates.FINISHED &amp;&amp; sessionStorage.isPrint === &apos;true&apos;)&#123;</span><br><span class=\"line\">        document.getElementById(&apos;print&apos;).click()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;!-- 添加打印代码 end--&gt;</span><br><span class=\"line\">    return view.renderingState === RenderingStates.FINISHED;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>然后在加载页面多的时候会有这样的提示<br><img src=\"http://pe5s1kztp.bkt.clouddn.com/images/PDF%E8%AD%A6%E5%91%8A.jpg\" alt=\"img\" title=\"PDF未完全加载已供打印\"></p>\n<p>嗯==，然后我实在没有找到很合适的地方去调用打印的这个方法，最后在这里加上的<br><img src=\"/uploads/PDFRenderingQueue_getHighestPriority里面点击打印.jpg\" alt=\"img\"><br>在PDFRenderingQueue原型里面的PDFRenderingQueue_getHighestPriority方法里调用</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (sessionStorage.isPrint === &apos;true&apos;) &#123;</span><br><span class=\"line\">               document.getElementById(&apos;print&apos;).click();</span><br><span class=\"line\">               sessionStorage.isPrint=false;</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n<p>这样以后，‘PDF未完全加载已供打印’的提示没有的，打印页面也正常了。</p>\n<p>注意<code>sessionStorage.isPrint=false;</code>这个控制语句要加上，不然即使点击了取消打印预览窗口，该窗口还是会不断弹出来。</p>\n<h2 id=\"实现类似直接打印效果（不预览）\"><a href=\"#实现类似直接打印效果（不预览）\" class=\"headerlink\" title=\"实现类似直接打印效果（不预览）\"></a>实现类似直接打印效果（不预览）</h2><p> <strong>思路：将弹出窗口的尺寸放到最小，打印完成后，自动将窗口关闭</strong></p>\n<ol>\n<li>创建谷歌浏览器快捷方式（下次要从快捷方式打开）</li>\n<li>快捷方式，右击-&gt;属性-&gt;目标 的尾部添加  –kiosk-printing 注意前面有空格 <img src=\"/uploads/add--kiosk-printing.png\" alt=\"img\"><br><strong>实际上，这步之后，window.print(),就不会弹出预览窗口了</strong></li>\n<li>pdfjs里面有对 <strong>beforeprint</strong>和 <strong>afterprint</strong>两个方法监听，只需在afterprint方法里面将窗口关闭就可。</li>\n</ol>\n<p>以上只针对一些项目需要的功能进行处理。</p>\n"},{"title":"HEXO+NEXT主题个性化配置","date":"2018-08-27T10:02:52.000Z","comments":1,"toc":true,"_content":"主要说明当前博客中的音乐及其他主题个性化配置\n<!--more-->\n### 左下角音乐\n*使用插件hexo-tag-aplayer | aplayer*\n1. npm install hexo-tag-aplayer --save （aplayer）\n2. 在themes/next/layout/_custom/header 中加入以下语句，具体的可参考官方文档设置\n```    \n<div id=\"player1\" class=\"aplayer\"></div>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"http://pe5s1kztp.bkt.clouddn.com/css/APlayer.min.css\" />\n<script src=\"http://pe5s1kztp.bkt.clouddn.com/js/APlayer.min.js\"></script>\n<script type=\"text/javascript\">\nconst apo = new APlayer({\n    container: document.getElementById('player1'),\n    fixed: true,//固定在左下角\n    autoplay: false,\n    audio: [{\n        name: '周杰伦',\n        artist: '水管的友情',\n        url: 'http://pe5s1kztp.bkt.clouddn.com/music%E6%B0%B4%E7%AE%A1%E7%9A%84%E5%8F%8B%E6%83%85.flac',\n        cover: 'http://pe5s1kztp.bkt.clouddn.com/images/employee-1118183_640.jpg',\n    }]\n});\n</script>\n``` \n\n\n### 其他个性化配置可参考\n\n\n[二次元博客 :）](http://mashirosorata.vicp.io/)\n","source":"_posts/HEXO-NEXT主题个性化配置.md","raw":"---\ntitle: HEXO+NEXT主题个性化配置\ndate: 2018-08-27 18:02:52\ncomments: true #是否可评论\ncategories: 博客搭建  #分类\ntoc: true #是否显示文章目录\ntags: \n\t- hexo\n\t- nexT\n\n---\n主要说明当前博客中的音乐及其他主题个性化配置\n<!--more-->\n### 左下角音乐\n*使用插件hexo-tag-aplayer | aplayer*\n1. npm install hexo-tag-aplayer --save （aplayer）\n2. 在themes/next/layout/_custom/header 中加入以下语句，具体的可参考官方文档设置\n```    \n<div id=\"player1\" class=\"aplayer\"></div>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"http://pe5s1kztp.bkt.clouddn.com/css/APlayer.min.css\" />\n<script src=\"http://pe5s1kztp.bkt.clouddn.com/js/APlayer.min.js\"></script>\n<script type=\"text/javascript\">\nconst apo = new APlayer({\n    container: document.getElementById('player1'),\n    fixed: true,//固定在左下角\n    autoplay: false,\n    audio: [{\n        name: '周杰伦',\n        artist: '水管的友情',\n        url: 'http://pe5s1kztp.bkt.clouddn.com/music%E6%B0%B4%E7%AE%A1%E7%9A%84%E5%8F%8B%E6%83%85.flac',\n        cover: 'http://pe5s1kztp.bkt.clouddn.com/images/employee-1118183_640.jpg',\n    }]\n});\n</script>\n``` \n\n\n### 其他个性化配置可参考\n\n\n[二次元博客 :）](http://mashirosorata.vicp.io/)\n","slug":"HEXO-NEXT主题个性化配置","published":1,"updated":"2019-12-24T03:04:37.358Z","layout":"post","photos":[],"link":"","_id":"ckaxser5b0002cstoxw7wvl2z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>主要说明当前博客中的音乐及其他主题个性化配置<br><a id=\"more\"></a></p>\n<h3 id=\"左下角音乐\"><a href=\"#左下角音乐\" class=\"headerlink\" title=\"左下角音乐\"></a>左下角音乐</h3><p><em>使用插件hexo-tag-aplayer | aplayer</em></p>\n<ol>\n<li>npm install hexo-tag-aplayer –save （aplayer）</li>\n<li>在themes/next/layout/_custom/header 中加入以下语句，具体的可参考官方文档设置<pre><code>&lt;div id=&quot;player1&quot; class=&quot;aplayer&quot;&gt;&lt;/div&gt;\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://pe5s1kztp.bkt.clouddn.com/css/APlayer.min.css&quot; /&gt;\n&lt;script src=&quot;http://pe5s1kztp.bkt.clouddn.com/js/APlayer.min.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nconst apo = new APlayer({\n container: document.getElementById(&apos;player1&apos;),\n fixed: true,//固定在左下角\n autoplay: false,\n audio: [{\n     name: &apos;周杰伦&apos;,\n     artist: &apos;水管的友情&apos;,\n     url: &apos;http://pe5s1kztp.bkt.clouddn.com/music%E6%B0%B4%E7%AE%A1%E7%9A%84%E5%8F%8B%E6%83%85.flac&apos;,\n     cover: &apos;http://pe5s1kztp.bkt.clouddn.com/images/employee-1118183_640.jpg&apos;,\n }]\n});\n&lt;/script&gt;\n</code></pre></li>\n</ol>\n<h3 id=\"其他个性化配置可参考\"><a href=\"#其他个性化配置可参考\" class=\"headerlink\" title=\"其他个性化配置可参考\"></a>其他个性化配置可参考</h3><p><a href=\"http://mashirosorata.vicp.io/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">二次元博客 :）</a></p>\n","site":{"data":{}},"excerpt":"<p>主要说明当前博客中的音乐及其他主题个性化配置<br>","more":"</p>\n<h3 id=\"左下角音乐\"><a href=\"#左下角音乐\" class=\"headerlink\" title=\"左下角音乐\"></a>左下角音乐</h3><p><em>使用插件hexo-tag-aplayer | aplayer</em></p>\n<ol>\n<li>npm install hexo-tag-aplayer –save （aplayer）</li>\n<li>在themes/next/layout/_custom/header 中加入以下语句，具体的可参考官方文档设置<pre><code>&lt;div id=&quot;player1&quot; class=&quot;aplayer&quot;&gt;&lt;/div&gt;\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://pe5s1kztp.bkt.clouddn.com/css/APlayer.min.css&quot; /&gt;\n&lt;script src=&quot;http://pe5s1kztp.bkt.clouddn.com/js/APlayer.min.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nconst apo = new APlayer({\n container: document.getElementById(&apos;player1&apos;),\n fixed: true,//固定在左下角\n autoplay: false,\n audio: [{\n     name: &apos;周杰伦&apos;,\n     artist: &apos;水管的友情&apos;,\n     url: &apos;http://pe5s1kztp.bkt.clouddn.com/music%E6%B0%B4%E7%AE%A1%E7%9A%84%E5%8F%8B%E6%83%85.flac&apos;,\n     cover: &apos;http://pe5s1kztp.bkt.clouddn.com/images/employee-1118183_640.jpg&apos;,\n }]\n});\n&lt;/script&gt;\n</code></pre></li>\n</ol>\n<h3 id=\"其他个性化配置可参考\"><a href=\"#其他个性化配置可参考\" class=\"headerlink\" title=\"其他个性化配置可参考\"></a>其他个性化配置可参考</h3><p><a href=\"http://mashirosorata.vicp.io/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">二次元博客 :）</a></p>"},{"title":"JS之操作符","toc":true,"comments":0,"date":"2018-09-06T07:24:33.000Z","_content":"记录JS操作符一些重要并容易被忽略的一些用法\n<!-- more -->\n## 与（&&）操作\n\n![真值表](http://pe5s1kztp.bkt.clouddn.com/images/%E9%80%BB%E8%BE%91%E4%B8%8E%E7%9A%84%E7%9C%9F%E5%80%BC%E8%A1%A8.jpg \"逻辑与真值表\")\n\n逻辑与操作属于`短路操作`，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值,即第一个操作数为false的时候。\n\n例：\n```\nvar found = true;\nvar result = (found && someUndefinedVariable); // 这里会发生错误\nalert(result); // 这一行不会执行\n\n```\n*`若开始found为false，则无论第二个操作符是什么，最后都会执行result为false`*\n## 或（||）操作\n与逻辑与操作符相似，逻辑或操作符也是`短路操作符`。也就是说，如果第一个操作数的求值结果为true，就不会对第二个操作数求值了。\n\n例：\n```\nvar found = true;\nvar result = (found || someUndefinedVariable); // 不会发生错误\nalert(result); // 会执行（\"true\"）\n```\n\n## 加\n\n`只要有一个是字符串，另一个也默认转成字符串拼接`\n- '5'+null= 5null\n- 5+null= 5\n- 5+undefined= NaN\n\n\n\n1、有一个是字符串，那么另外一个也会转换为字符串进行拼接。假如一个是字符串，另外一个是null或者undefined，那么相加，null或者undefined就会调用String()方法，获得字符串“null”或者“undefined”，然后进行拼接。\n\n2、假如一个数字加null或者undefined，那么还是把null或者undefined进行Number()转换之后再相加。\n\n3、剩下的原则和其他的差不多，就不多说了。\n\n\n## 乘\n在处理特殊值的情况下，乘法操作符遵循下列特殊的规则：\n- 如果有一个操作数是 NaN，则结果是 NaN；\n- 如果是 Infinity 与 0 相乘，则结果是 NaN；\n- 如果是 Infinity 与非 0 数值相乘，则结果是 Infinity 或-Infinity，取决于有符号操作数\n的符号；\n- 如果是 Infinity 与 Infinity 相乘，则结果是 Infinity；\n- 如果有一个操作数不是数值，则在后台调用 `Number()`将其转换为数值，然后再应用上面的规则。\n\n## 减\n将结果转换成数值运算\n\n如果操作数是对象，则调用对象`valueOf`方法，如果结果是NaN那么结果就是NaN。如果没有valueOf方法，那么调用`toString()`方法，并将得到的字符串转换为数值。\n\n## 其他\n`除了加法以外，几乎都是，只要有一个操作数是数值，另一个也默认使用Number()进行数字转换`\n### 除\n规则与*乘*类似，总之按照正常的运算逻辑来...\n\n有逻辑不通的请一律参考*乘*的特殊规则\n\n其中：\n- 0/0==NaN\n\n### 取余、求模\n- 0%0==NaN\n\n### 关系操作符\n统一返回true或者false\n\n    `如果比较的两个数都是字符串，那么会比较字符串对应的字符串编码值。`\n-----\n## 几个Number()转化取值：\n- Number(null)==0\n- Number(undefined)==NaN\n\n## 总结\n之前对运算的概念比较模糊，遇到正常的值还好，一旦遇到undefined、null这类特殊的预算就完全懵，其实对于有数字的运算，无外乎几种结果：数值、NaN、Infinity，加法才可能产生字符串的结果。\n\n最后，本文写的过程中也学习了,这篇文章 [js操作符类型转换大全（前端面试题之操作符）](https://www.haorooms.com/post/js_czf_mst)","source":"_posts/JS之操作符.md","raw":"---\ntitle: JS之操作符\ntoc: true\ncomments: false\ndate: 2018-09-06 15:24:33\ncategories: javascript\ntags: \n    - JavaScript \n    - 操作符\n---\n记录JS操作符一些重要并容易被忽略的一些用法\n<!-- more -->\n## 与（&&）操作\n\n![真值表](http://pe5s1kztp.bkt.clouddn.com/images/%E9%80%BB%E8%BE%91%E4%B8%8E%E7%9A%84%E7%9C%9F%E5%80%BC%E8%A1%A8.jpg \"逻辑与真值表\")\n\n逻辑与操作属于`短路操作`，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值,即第一个操作数为false的时候。\n\n例：\n```\nvar found = true;\nvar result = (found && someUndefinedVariable); // 这里会发生错误\nalert(result); // 这一行不会执行\n\n```\n*`若开始found为false，则无论第二个操作符是什么，最后都会执行result为false`*\n## 或（||）操作\n与逻辑与操作符相似，逻辑或操作符也是`短路操作符`。也就是说，如果第一个操作数的求值结果为true，就不会对第二个操作数求值了。\n\n例：\n```\nvar found = true;\nvar result = (found || someUndefinedVariable); // 不会发生错误\nalert(result); // 会执行（\"true\"）\n```\n\n## 加\n\n`只要有一个是字符串，另一个也默认转成字符串拼接`\n- '5'+null= 5null\n- 5+null= 5\n- 5+undefined= NaN\n\n\n\n1、有一个是字符串，那么另外一个也会转换为字符串进行拼接。假如一个是字符串，另外一个是null或者undefined，那么相加，null或者undefined就会调用String()方法，获得字符串“null”或者“undefined”，然后进行拼接。\n\n2、假如一个数字加null或者undefined，那么还是把null或者undefined进行Number()转换之后再相加。\n\n3、剩下的原则和其他的差不多，就不多说了。\n\n\n## 乘\n在处理特殊值的情况下，乘法操作符遵循下列特殊的规则：\n- 如果有一个操作数是 NaN，则结果是 NaN；\n- 如果是 Infinity 与 0 相乘，则结果是 NaN；\n- 如果是 Infinity 与非 0 数值相乘，则结果是 Infinity 或-Infinity，取决于有符号操作数\n的符号；\n- 如果是 Infinity 与 Infinity 相乘，则结果是 Infinity；\n- 如果有一个操作数不是数值，则在后台调用 `Number()`将其转换为数值，然后再应用上面的规则。\n\n## 减\n将结果转换成数值运算\n\n如果操作数是对象，则调用对象`valueOf`方法，如果结果是NaN那么结果就是NaN。如果没有valueOf方法，那么调用`toString()`方法，并将得到的字符串转换为数值。\n\n## 其他\n`除了加法以外，几乎都是，只要有一个操作数是数值，另一个也默认使用Number()进行数字转换`\n### 除\n规则与*乘*类似，总之按照正常的运算逻辑来...\n\n有逻辑不通的请一律参考*乘*的特殊规则\n\n其中：\n- 0/0==NaN\n\n### 取余、求模\n- 0%0==NaN\n\n### 关系操作符\n统一返回true或者false\n\n    `如果比较的两个数都是字符串，那么会比较字符串对应的字符串编码值。`\n-----\n## 几个Number()转化取值：\n- Number(null)==0\n- Number(undefined)==NaN\n\n## 总结\n之前对运算的概念比较模糊，遇到正常的值还好，一旦遇到undefined、null这类特殊的预算就完全懵，其实对于有数字的运算，无外乎几种结果：数值、NaN、Infinity，加法才可能产生字符串的结果。\n\n最后，本文写的过程中也学习了,这篇文章 [js操作符类型转换大全（前端面试题之操作符）](https://www.haorooms.com/post/js_czf_mst)","slug":"JS之操作符","published":1,"updated":"2019-12-24T03:04:37.358Z","layout":"post","photos":[],"link":"","_id":"ckaxser5q0006cstolsbt895c","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>记录JS操作符一些重要并容易被忽略的一些用法<br><a id=\"more\"></a></p>\n<h2 id=\"与（-amp-amp-）操作\"><a href=\"#与（-amp-amp-）操作\" class=\"headerlink\" title=\"与（&amp;&amp;）操作\"></a>与（&amp;&amp;）操作</h2><p><img src=\"http://pe5s1kztp.bkt.clouddn.com/images/%E9%80%BB%E8%BE%91%E4%B8%8E%E7%9A%84%E7%9C%9F%E5%80%BC%E8%A1%A8.jpg\" alt=\"真值表\" title=\"逻辑与真值表\"></p>\n<p>逻辑与操作属于<code>短路操作</code>，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值,即第一个操作数为false的时候。</p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var found = true;</span><br><span class=\"line\">var result = (found &amp;&amp; someUndefinedVariable); // 这里会发生错误</span><br><span class=\"line\">alert(result); // 这一行不会执行</span><br></pre></td></tr></table></figure></p>\n<p><em><code>若开始found为false，则无论第二个操作符是什么，最后都会执行result为false</code></em></p>\n<h2 id=\"或（-）操作\"><a href=\"#或（-）操作\" class=\"headerlink\" title=\"或（||）操作\"></a>或（||）操作</h2><p>与逻辑与操作符相似，逻辑或操作符也是<code>短路操作符</code>。也就是说，如果第一个操作数的求值结果为true，就不会对第二个操作数求值了。</p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var found = true;</span><br><span class=\"line\">var result = (found || someUndefinedVariable); // 不会发生错误</span><br><span class=\"line\">alert(result); // 会执行（&quot;true&quot;）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"加\"><a href=\"#加\" class=\"headerlink\" title=\"加\"></a>加</h2><p><code>只要有一个是字符串，另一个也默认转成字符串拼接</code></p>\n<ul>\n<li>‘5’+null= 5null</li>\n<li>5+null= 5</li>\n<li>5+undefined= NaN</li>\n</ul>\n<p>1、有一个是字符串，那么另外一个也会转换为字符串进行拼接。假如一个是字符串，另外一个是null或者undefined，那么相加，null或者undefined就会调用String()方法，获得字符串“null”或者“undefined”，然后进行拼接。</p>\n<p>2、假如一个数字加null或者undefined，那么还是把null或者undefined进行Number()转换之后再相加。</p>\n<p>3、剩下的原则和其他的差不多，就不多说了。</p>\n<h2 id=\"乘\"><a href=\"#乘\" class=\"headerlink\" title=\"乘\"></a>乘</h2><p>在处理特殊值的情况下，乘法操作符遵循下列特殊的规则：</p>\n<ul>\n<li>如果有一个操作数是 NaN，则结果是 NaN；</li>\n<li>如果是 Infinity 与 0 相乘，则结果是 NaN；</li>\n<li>如果是 Infinity 与非 0 数值相乘，则结果是 Infinity 或-Infinity，取决于有符号操作数<br>的符号；</li>\n<li>如果是 Infinity 与 Infinity 相乘，则结果是 Infinity；</li>\n<li>如果有一个操作数不是数值，则在后台调用 <code>Number()</code>将其转换为数值，然后再应用上面的规则。</li>\n</ul>\n<h2 id=\"减\"><a href=\"#减\" class=\"headerlink\" title=\"减\"></a>减</h2><p>将结果转换成数值运算</p>\n<p>如果操作数是对象，则调用对象<code>valueOf</code>方法，如果结果是NaN那么结果就是NaN。如果没有valueOf方法，那么调用<code>toString()</code>方法，并将得到的字符串转换为数值。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><code>除了加法以外，几乎都是，只要有一个操作数是数值，另一个也默认使用Number()进行数字转换</code></p>\n<h3 id=\"除\"><a href=\"#除\" class=\"headerlink\" title=\"除\"></a>除</h3><p>规则与<em>乘</em>类似，总之按照正常的运算逻辑来…</p>\n<p>有逻辑不通的请一律参考<em>乘</em>的特殊规则</p>\n<p>其中：</p>\n<ul>\n<li>0/0==NaN</li>\n</ul>\n<h3 id=\"取余、求模\"><a href=\"#取余、求模\" class=\"headerlink\" title=\"取余、求模\"></a>取余、求模</h3><ul>\n<li>0%0==NaN</li>\n</ul>\n<h3 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h3><p>统一返回true或者false</p>\n<pre><code>`如果比较的两个数都是字符串，那么会比较字符串对应的字符串编码值。`\n</code></pre><hr>\n<h2 id=\"几个Number-转化取值：\"><a href=\"#几个Number-转化取值：\" class=\"headerlink\" title=\"几个Number()转化取值：\"></a>几个Number()转化取值：</h2><ul>\n<li>Number(null)==0</li>\n<li>Number(undefined)==NaN</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>之前对运算的概念比较模糊，遇到正常的值还好，一旦遇到undefined、null这类特殊的预算就完全懵，其实对于有数字的运算，无外乎几种结果：数值、NaN、Infinity，加法才可能产生字符串的结果。</p>\n<p>最后，本文写的过程中也学习了,这篇文章 <a href=\"https://www.haorooms.com/post/js_czf_mst\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">js操作符类型转换大全（前端面试题之操作符）</a></p>\n","site":{"data":{}},"excerpt":"<p>记录JS操作符一些重要并容易被忽略的一些用法<br>","more":"</p>\n<h2 id=\"与（-amp-amp-）操作\"><a href=\"#与（-amp-amp-）操作\" class=\"headerlink\" title=\"与（&amp;&amp;）操作\"></a>与（&amp;&amp;）操作</h2><p><img src=\"http://pe5s1kztp.bkt.clouddn.com/images/%E9%80%BB%E8%BE%91%E4%B8%8E%E7%9A%84%E7%9C%9F%E5%80%BC%E8%A1%A8.jpg\" alt=\"真值表\" title=\"逻辑与真值表\"></p>\n<p>逻辑与操作属于<code>短路操作</code>，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值,即第一个操作数为false的时候。</p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var found = true;</span><br><span class=\"line\">var result = (found &amp;&amp; someUndefinedVariable); // 这里会发生错误</span><br><span class=\"line\">alert(result); // 这一行不会执行</span><br></pre></td></tr></table></figure></p>\n<p><em><code>若开始found为false，则无论第二个操作符是什么，最后都会执行result为false</code></em></p>\n<h2 id=\"或（-）操作\"><a href=\"#或（-）操作\" class=\"headerlink\" title=\"或（||）操作\"></a>或（||）操作</h2><p>与逻辑与操作符相似，逻辑或操作符也是<code>短路操作符</code>。也就是说，如果第一个操作数的求值结果为true，就不会对第二个操作数求值了。</p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var found = true;</span><br><span class=\"line\">var result = (found || someUndefinedVariable); // 不会发生错误</span><br><span class=\"line\">alert(result); // 会执行（&quot;true&quot;）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"加\"><a href=\"#加\" class=\"headerlink\" title=\"加\"></a>加</h2><p><code>只要有一个是字符串，另一个也默认转成字符串拼接</code></p>\n<ul>\n<li>‘5’+null= 5null</li>\n<li>5+null= 5</li>\n<li>5+undefined= NaN</li>\n</ul>\n<p>1、有一个是字符串，那么另外一个也会转换为字符串进行拼接。假如一个是字符串，另外一个是null或者undefined，那么相加，null或者undefined就会调用String()方法，获得字符串“null”或者“undefined”，然后进行拼接。</p>\n<p>2、假如一个数字加null或者undefined，那么还是把null或者undefined进行Number()转换之后再相加。</p>\n<p>3、剩下的原则和其他的差不多，就不多说了。</p>\n<h2 id=\"乘\"><a href=\"#乘\" class=\"headerlink\" title=\"乘\"></a>乘</h2><p>在处理特殊值的情况下，乘法操作符遵循下列特殊的规则：</p>\n<ul>\n<li>如果有一个操作数是 NaN，则结果是 NaN；</li>\n<li>如果是 Infinity 与 0 相乘，则结果是 NaN；</li>\n<li>如果是 Infinity 与非 0 数值相乘，则结果是 Infinity 或-Infinity，取决于有符号操作数<br>的符号；</li>\n<li>如果是 Infinity 与 Infinity 相乘，则结果是 Infinity；</li>\n<li>如果有一个操作数不是数值，则在后台调用 <code>Number()</code>将其转换为数值，然后再应用上面的规则。</li>\n</ul>\n<h2 id=\"减\"><a href=\"#减\" class=\"headerlink\" title=\"减\"></a>减</h2><p>将结果转换成数值运算</p>\n<p>如果操作数是对象，则调用对象<code>valueOf</code>方法，如果结果是NaN那么结果就是NaN。如果没有valueOf方法，那么调用<code>toString()</code>方法，并将得到的字符串转换为数值。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><code>除了加法以外，几乎都是，只要有一个操作数是数值，另一个也默认使用Number()进行数字转换</code></p>\n<h3 id=\"除\"><a href=\"#除\" class=\"headerlink\" title=\"除\"></a>除</h3><p>规则与<em>乘</em>类似，总之按照正常的运算逻辑来…</p>\n<p>有逻辑不通的请一律参考<em>乘</em>的特殊规则</p>\n<p>其中：</p>\n<ul>\n<li>0/0==NaN</li>\n</ul>\n<h3 id=\"取余、求模\"><a href=\"#取余、求模\" class=\"headerlink\" title=\"取余、求模\"></a>取余、求模</h3><ul>\n<li>0%0==NaN</li>\n</ul>\n<h3 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h3><p>统一返回true或者false</p>\n<pre><code>`如果比较的两个数都是字符串，那么会比较字符串对应的字符串编码值。`\n</code></pre><hr>\n<h2 id=\"几个Number-转化取值：\"><a href=\"#几个Number-转化取值：\" class=\"headerlink\" title=\"几个Number()转化取值：\"></a>几个Number()转化取值：</h2><ul>\n<li>Number(null)==0</li>\n<li>Number(undefined)==NaN</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>之前对运算的概念比较模糊，遇到正常的值还好，一旦遇到undefined、null这类特殊的预算就完全懵，其实对于有数字的运算，无外乎几种结果：数值、NaN、Infinity，加法才可能产生字符串的结果。</p>\n<p>最后，本文写的过程中也学习了,这篇文章 <a href=\"https://www.haorooms.com/post/js_czf_mst\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">js操作符类型转换大全（前端面试题之操作符）</a></p>"},{"title":"Promise方法","toc":true,"comments":0,"date":"2019-12-24T06:21:05.000Z","keywords":"Promise","description":"Promise","_content":"## polyfill初级\n\n    class MyPomise {\n    constructor(handle){\n        if(typeof handle!=='function){\n            throw new Error('MyPromise must accept a function as a parameter')\n        }\n        //添加状态\n        this._status='PENDING'\n        //添加值\n        this._val=undefined\n\n        // 执行handle\n        try{\n            handle(this._resolve.bind(this),this._reject.bind(this))\n        }catch(err){\n            this.reject(err)\n        }\n    }\n        _resolve(val){\n            if(this._status!=='PENDING'){\n                return\n            }\n            this._status='FULFILLED'\n            this._val=val\n        }\n        _reject(err){\n            if(this._status!=='PENDING'){\n                return\n            }\n            this._status='REJECTED'\n            this._val=err\n        }\n    }\n\n## polyfill中级\n\n    ","source":"_posts/Promise方法.md","raw":"---\ntitle: Promise方法\ntoc: true\ncomments: false\ncategories: javascript\ndate: 2019-12-24 14:21:05\ntags: \n    - JS \n    - Promise \nkeywords: Promise\ndescription: Promise\n---\n## polyfill初级\n\n    class MyPomise {\n    constructor(handle){\n        if(typeof handle!=='function){\n            throw new Error('MyPromise must accept a function as a parameter')\n        }\n        //添加状态\n        this._status='PENDING'\n        //添加值\n        this._val=undefined\n\n        // 执行handle\n        try{\n            handle(this._resolve.bind(this),this._reject.bind(this))\n        }catch(err){\n            this.reject(err)\n        }\n    }\n        _resolve(val){\n            if(this._status!=='PENDING'){\n                return\n            }\n            this._status='FULFILLED'\n            this._val=val\n        }\n        _reject(err){\n            if(this._status!=='PENDING'){\n                return\n            }\n            this._status='REJECTED'\n            this._val=err\n        }\n    }\n\n## polyfill中级\n\n    ","slug":"Promise方法","published":1,"updated":"2019-12-24T10:01:27.982Z","layout":"post","photos":[],"link":"","_id":"ckaxser5s0008cstoafxsszrq","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"polyfill初级\"><a href=\"#polyfill初级\" class=\"headerlink\" title=\"polyfill初级\"></a>polyfill初级</h2><pre><code>class MyPomise {\nconstructor(handle){\n    if(typeof handle!==&apos;function){\n        throw new Error(&apos;MyPromise must accept a function as a parameter&apos;)\n    }\n    //添加状态\n    this._status=&apos;PENDING&apos;\n    //添加值\n    this._val=undefined\n\n    // 执行handle\n    try{\n        handle(this._resolve.bind(this),this._reject.bind(this))\n    }catch(err){\n        this.reject(err)\n    }\n}\n    _resolve(val){\n        if(this._status!==&apos;PENDING&apos;){\n            return\n        }\n        this._status=&apos;FULFILLED&apos;\n        this._val=val\n    }\n    _reject(err){\n        if(this._status!==&apos;PENDING&apos;){\n            return\n        }\n        this._status=&apos;REJECTED&apos;\n        this._val=err\n    }\n}\n</code></pre><h2 id=\"polyfill中级\"><a href=\"#polyfill中级\" class=\"headerlink\" title=\"polyfill中级\"></a>polyfill中级</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"polyfill初级\"><a href=\"#polyfill初级\" class=\"headerlink\" title=\"polyfill初级\"></a>polyfill初级</h2><pre><code>class MyPomise {\nconstructor(handle){\n    if(typeof handle!==&apos;function){\n        throw new Error(&apos;MyPromise must accept a function as a parameter&apos;)\n    }\n    //添加状态\n    this._status=&apos;PENDING&apos;\n    //添加值\n    this._val=undefined\n\n    // 执行handle\n    try{\n        handle(this._resolve.bind(this),this._reject.bind(this))\n    }catch(err){\n        this.reject(err)\n    }\n}\n    _resolve(val){\n        if(this._status!==&apos;PENDING&apos;){\n            return\n        }\n        this._status=&apos;FULFILLED&apos;\n        this._val=val\n    }\n    _reject(err){\n        if(this._status!==&apos;PENDING&apos;){\n            return\n        }\n        this._status=&apos;REJECTED&apos;\n        this._val=err\n    }\n}\n</code></pre><h2 id=\"polyfill中级\"><a href=\"#polyfill中级\" class=\"headerlink\" title=\"polyfill中级\"></a>polyfill中级</h2>"},{"title":"JavaScript中return、break、continue的区别","toc":true,"comments":0,"date":"2018-09-07T05:49:28.000Z","_content":"\n**break是跳出一层循环，continue是结束一趟循环 ,return才是结束所有层循环!**\n\n如果有多层for循环,break会跳出当前这一层,去执行最外层循环(而不是退出所有层循环);而continue则结束当前次循环(继续)而去执行下次循环,但本层循环没有结束.(注意一层循环和一次循环的区别:一层循环包含若干(i)次循环)\n\n### return \n return 从当前的**方法**中退出,返回到该调用的方法的语句处,继续执行。 \n\n### break\n 1. **只能在循环体内和switch语句体内使用break语句。**\n 2. 当break出现在循环体中的switch语句体内时，其作用只是跳出该switch语句体。 \n 3. 当break出现在循环体中，但并不在switch语句体内时，则在执行break后，跳出本层循环体。 \n 4. 在循环结构中，应用break语句使流程跳出**本层**循环体，从而提前结束本层循环。\n\n### continue\n\n 其作用是结束本次循环，即跳过本次循环体中余下尚未执行的语句，接着再一次进行循环的条件判定","source":"_posts/return、break、continue的区别.md","raw":"---\ntitle: JavaScript中return、break、continue的区别\ntoc: true\ncomments: false\ncategories: javascript\ndate: 2018-09-07 13:49:28\ntags: \n    - return\n    - break\n    - continue\n---\n\n**break是跳出一层循环，continue是结束一趟循环 ,return才是结束所有层循环!**\n\n如果有多层for循环,break会跳出当前这一层,去执行最外层循环(而不是退出所有层循环);而continue则结束当前次循环(继续)而去执行下次循环,但本层循环没有结束.(注意一层循环和一次循环的区别:一层循环包含若干(i)次循环)\n\n### return \n return 从当前的**方法**中退出,返回到该调用的方法的语句处,继续执行。 \n\n### break\n 1. **只能在循环体内和switch语句体内使用break语句。**\n 2. 当break出现在循环体中的switch语句体内时，其作用只是跳出该switch语句体。 \n 3. 当break出现在循环体中，但并不在switch语句体内时，则在执行break后，跳出本层循环体。 \n 4. 在循环结构中，应用break语句使流程跳出**本层**循环体，从而提前结束本层循环。\n\n### continue\n\n 其作用是结束本次循环，即跳过本次循环体中余下尚未执行的语句，接着再一次进行循环的条件判定","slug":"return、break、continue的区别","published":1,"updated":"2019-12-24T03:04:37.363Z","layout":"post","photos":[],"link":"","_id":"ckaxser5y000acstoknzrql4a","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><strong>break是跳出一层循环，continue是结束一趟循环 ,return才是结束所有层循环!</strong></p>\n<p>如果有多层for循环,break会跳出当前这一层,去执行最外层循环(而不是退出所有层循环);而continue则结束当前次循环(继续)而去执行下次循环,但本层循环没有结束.(注意一层循环和一次循环的区别:一层循环包含若干(i)次循环)</p>\n<h3 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h3><p> return 从当前的<strong>方法</strong>中退出,返回到该调用的方法的语句处,继续执行。 </p>\n<h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><ol>\n<li><strong>只能在循环体内和switch语句体内使用break语句。</strong></li>\n<li>当break出现在循环体中的switch语句体内时，其作用只是跳出该switch语句体。 </li>\n<li>当break出现在循环体中，但并不在switch语句体内时，则在执行break后，跳出本层循环体。 </li>\n<li>在循环结构中，应用break语句使流程跳出<strong>本层</strong>循环体，从而提前结束本层循环。</li>\n</ol>\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p> 其作用是结束本次循环，即跳过本次循环体中余下尚未执行的语句，接着再一次进行循环的条件判定</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>break是跳出一层循环，continue是结束一趟循环 ,return才是结束所有层循环!</strong></p>\n<p>如果有多层for循环,break会跳出当前这一层,去执行最外层循环(而不是退出所有层循环);而continue则结束当前次循环(继续)而去执行下次循环,但本层循环没有结束.(注意一层循环和一次循环的区别:一层循环包含若干(i)次循环)</p>\n<h3 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h3><p> return 从当前的<strong>方法</strong>中退出,返回到该调用的方法的语句处,继续执行。 </p>\n<h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><ol>\n<li><strong>只能在循环体内和switch语句体内使用break语句。</strong></li>\n<li>当break出现在循环体中的switch语句体内时，其作用只是跳出该switch语句体。 </li>\n<li>当break出现在循环体中，但并不在switch语句体内时，则在执行break后，跳出本层循环体。 </li>\n<li>在循环结构中，应用break语句使流程跳出<strong>本层</strong>循环体，从而提前结束本层循环。</li>\n</ol>\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p> 其作用是结束本次循环，即跳过本次循环体中余下尚未执行的语句，接着再一次进行循环的条件判定</p>\n"},{"title":"canvas 生成图片并保存","toc":true,"comments":0,"date":"2019-03-01T08:36:32.000Z","keywords":null,"description":null,"_content":"","source":"_posts/canvas-生成图片并保存.md","raw":"---\ntitle: canvas 生成图片并保存\ntoc: true\ncomments: false\ncategories: javascript\ndate: 2019-03-01 16:36:32\ntags:\nkeywords:\ndescription:\n---\n","slug":"canvas-生成图片并保存","published":1,"updated":"2019-12-24T03:04:37.362Z","layout":"post","photos":[],"link":"","_id":"ckaxser64000ecstoz625c0ys","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""},{"title":"前端基础知识点","toc":true,"comments":0,"date":"2019-04-02T06:53:14.000Z","keywords":null,"description":null,"_content":"# 一、关于HTML\n## HTML语义化的理解\n    1. 主要围绕 h1~6、strong、li等标签\n    2. 结构化（内容上语义化），即使没有css样式也能很好地展示页面结构；代码语义化，便于开发者阅读同时能让浏览器爬虫和机器很好地阅读，有利于SEO。\n    \n## SEO优化","source":"_posts/前端基础知识点.md","raw":"---\ntitle: 前端基础知识点\ntoc: true\ncomments: false\ncategories: javascript\ndate: 2019-04-02 14:53:14\ntags:\nkeywords:\ndescription:\n---\n# 一、关于HTML\n## HTML语义化的理解\n    1. 主要围绕 h1~6、strong、li等标签\n    2. 结构化（内容上语义化），即使没有css样式也能很好地展示页面结构；代码语义化，便于开发者阅读同时能让浏览器爬虫和机器很好地阅读，有利于SEO。\n    \n## SEO优化","slug":"前端基础知识点","published":1,"updated":"2019-12-24T03:04:37.364Z","layout":"post","photos":[],"link":"","_id":"ckaxser66000fcstou12mgfqe","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"一、关于HTML\"><a href=\"#一、关于HTML\" class=\"headerlink\" title=\"一、关于HTML\"></a>一、关于HTML</h1><h2 id=\"HTML语义化的理解\"><a href=\"#HTML语义化的理解\" class=\"headerlink\" title=\"HTML语义化的理解\"></a>HTML语义化的理解</h2><pre><code>1. 主要围绕 h1~6、strong、li等标签\n2. 结构化（内容上语义化），即使没有css样式也能很好地展示页面结构；代码语义化，便于开发者阅读同时能让浏览器爬虫和机器很好地阅读，有利于SEO。\n</code></pre><h2 id=\"SEO优化\"><a href=\"#SEO优化\" class=\"headerlink\" title=\"SEO优化\"></a>SEO优化</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、关于HTML\"><a href=\"#一、关于HTML\" class=\"headerlink\" title=\"一、关于HTML\"></a>一、关于HTML</h1><h2 id=\"HTML语义化的理解\"><a href=\"#HTML语义化的理解\" class=\"headerlink\" title=\"HTML语义化的理解\"></a>HTML语义化的理解</h2><pre><code>1. 主要围绕 h1~6、strong、li等标签\n2. 结构化（内容上语义化），即使没有css样式也能很好地展示页面结构；代码语义化，便于开发者阅读同时能让浏览器爬虫和机器很好地阅读，有利于SEO。\n</code></pre><h2 id=\"SEO优化\"><a href=\"#SEO优化\" class=\"headerlink\" title=\"SEO优化\"></a>SEO优化</h2>"},{"title":"antd-table中集成react-dnd","toc":true,"comments":1,"date":"2018-12-21T02:31:20.000Z","_content":"\n [ant-design官网表格排序例子(https://ant.design/components/table-cn/#components-table-demo-drag-sorting)\n\n# 重写Table组件里的component\n\n代码如下：\n```\nclass DragSortingTable extends React.Component {\n  state = {\n    data: [...],\n  }\n\n  components = {\n    body: {\n      row: DragableBodyRow,\n    },\n  }\n\n  moveRow = (dragIndex, hoverIndex) => {\n    ...\n  }\n\n  render() {\n    return (\n      <Table\n        columns={columns}\n        dataSource={this.state.data}\n        components={this.components}\n        onRow={(record, index) => ({\n          index,\n          moveRow: this.moveRow,\n        })}\n      />\n    );\n  }\n}\n```\n\n其中主要代码是`components={this.components}`用来覆盖默认的 table 元素，拖动行则需要对row重写：\n ```components = {\n        body: {\n        row: DragableBodyRow,\n        },\n    }\n  ```\nDragableBodyRow为： \n```\nconst DragableBodyRow = DropTarget('row', rowTarget, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n}))(\n  DragSource('row', rowSource, (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    dragRow: monitor.getItem(),\n  }))(BodyRow)\n);\n```\nDropTarget和DragSource 是高阶组件.\n```\n  class BodyRow extends React.Component {\n    render() {\n      const {\n        connectDragSource,\n        connectDropTarget,\n        ...restProps\n      } = this.props;\n\n      ...\n\n      return connectDragSource(\n        connectDropTarget(\n          <tr\n            {...restProps}\n          />\n        )\n      );\n    }\n  }\n  ```","source":"_posts/antd-table中集成react-dnd.md","raw":"---\ntitle: antd-table中集成react-dnd\ntoc: true\ncomments: true\ncategories: javascript\ndate: 2018-12-21 10:31:20\ntags:\n    - react\n    - react-dnd\n    - ant-design\n    - table\n    - 拖拽\n---\n\n [ant-design官网表格排序例子(https://ant.design/components/table-cn/#components-table-demo-drag-sorting)\n\n# 重写Table组件里的component\n\n代码如下：\n```\nclass DragSortingTable extends React.Component {\n  state = {\n    data: [...],\n  }\n\n  components = {\n    body: {\n      row: DragableBodyRow,\n    },\n  }\n\n  moveRow = (dragIndex, hoverIndex) => {\n    ...\n  }\n\n  render() {\n    return (\n      <Table\n        columns={columns}\n        dataSource={this.state.data}\n        components={this.components}\n        onRow={(record, index) => ({\n          index,\n          moveRow: this.moveRow,\n        })}\n      />\n    );\n  }\n}\n```\n\n其中主要代码是`components={this.components}`用来覆盖默认的 table 元素，拖动行则需要对row重写：\n ```components = {\n        body: {\n        row: DragableBodyRow,\n        },\n    }\n  ```\nDragableBodyRow为： \n```\nconst DragableBodyRow = DropTarget('row', rowTarget, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n}))(\n  DragSource('row', rowSource, (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    dragRow: monitor.getItem(),\n  }))(BodyRow)\n);\n```\nDropTarget和DragSource 是高阶组件.\n```\n  class BodyRow extends React.Component {\n    render() {\n      const {\n        connectDragSource,\n        connectDropTarget,\n        ...restProps\n      } = this.props;\n\n      ...\n\n      return connectDragSource(\n        connectDropTarget(\n          <tr\n            {...restProps}\n          />\n        )\n      );\n    }\n  }\n  ```","slug":"antd-table中集成react-dnd","published":1,"updated":"2019-12-24T03:04:37.361Z","layout":"post","photos":[],"link":"","_id":"ckaxser6v000jcstorzudowa3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p> [ant-design官网表格排序例子(<a href=\"https://ant.design/components/table-cn/#components-table-demo-drag-sorting\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://ant.design/components/table-cn/#components-table-demo-drag-sorting</a>)</p>\n<h1 id=\"重写Table组件里的component\"><a href=\"#重写Table组件里的component\" class=\"headerlink\" title=\"重写Table组件里的component\"></a>重写Table组件里的component</h1><p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DragSortingTable extends React.Component &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    data: [...],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  components = &#123;</span><br><span class=\"line\">    body: &#123;</span><br><span class=\"line\">      row: DragableBodyRow,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  moveRow = (dragIndex, hoverIndex) =&gt; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Table</span><br><span class=\"line\">        columns=&#123;columns&#125;</span><br><span class=\"line\">        dataSource=&#123;this.state.data&#125;</span><br><span class=\"line\">        components=&#123;this.components&#125;</span><br><span class=\"line\">        onRow=&#123;(record, index) =&gt; (&#123;</span><br><span class=\"line\">          index,</span><br><span class=\"line\">          moveRow: this.moveRow,</span><br><span class=\"line\">        &#125;)&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中主要代码是<code>components={this.components}</code>用来覆盖默认的 table 元素，拖动行则需要对row重写：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    body: &#123;</span><br><span class=\"line\">    row: DragableBodyRow,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>DragableBodyRow为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const DragableBodyRow = DropTarget(&apos;row&apos;, rowTarget, (connect, monitor) =&gt; (&#123;</span><br><span class=\"line\">  connectDropTarget: connect.dropTarget(),</span><br><span class=\"line\">&#125;))(</span><br><span class=\"line\">  DragSource(&apos;row&apos;, rowSource, (connect, monitor) =&gt; (&#123;</span><br><span class=\"line\">    connectDragSource: connect.dragSource(),</span><br><span class=\"line\">    dragRow: monitor.getItem(),</span><br><span class=\"line\">  &#125;))(BodyRow)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>DropTarget和DragSource 是高阶组件.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BodyRow extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;</span><br><span class=\"line\">      connectDragSource,</span><br><span class=\"line\">      connectDropTarget,</span><br><span class=\"line\">      ...restProps</span><br><span class=\"line\">    &#125; = this.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    return connectDragSource(</span><br><span class=\"line\">      connectDropTarget(</span><br><span class=\"line\">        &lt;tr</span><br><span class=\"line\">          &#123;...restProps&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p> [ant-design官网表格排序例子(<a href=\"https://ant.design/components/table-cn/#components-table-demo-drag-sorting\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://ant.design/components/table-cn/#components-table-demo-drag-sorting</a>)</p>\n<h1 id=\"重写Table组件里的component\"><a href=\"#重写Table组件里的component\" class=\"headerlink\" title=\"重写Table组件里的component\"></a>重写Table组件里的component</h1><p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DragSortingTable extends React.Component &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    data: [...],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  components = &#123;</span><br><span class=\"line\">    body: &#123;</span><br><span class=\"line\">      row: DragableBodyRow,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  moveRow = (dragIndex, hoverIndex) =&gt; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Table</span><br><span class=\"line\">        columns=&#123;columns&#125;</span><br><span class=\"line\">        dataSource=&#123;this.state.data&#125;</span><br><span class=\"line\">        components=&#123;this.components&#125;</span><br><span class=\"line\">        onRow=&#123;(record, index) =&gt; (&#123;</span><br><span class=\"line\">          index,</span><br><span class=\"line\">          moveRow: this.moveRow,</span><br><span class=\"line\">        &#125;)&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中主要代码是<code>components={this.components}</code>用来覆盖默认的 table 元素，拖动行则需要对row重写：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    body: &#123;</span><br><span class=\"line\">    row: DragableBodyRow,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>DragableBodyRow为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const DragableBodyRow = DropTarget(&apos;row&apos;, rowTarget, (connect, monitor) =&gt; (&#123;</span><br><span class=\"line\">  connectDropTarget: connect.dropTarget(),</span><br><span class=\"line\">&#125;))(</span><br><span class=\"line\">  DragSource(&apos;row&apos;, rowSource, (connect, monitor) =&gt; (&#123;</span><br><span class=\"line\">    connectDragSource: connect.dragSource(),</span><br><span class=\"line\">    dragRow: monitor.getItem(),</span><br><span class=\"line\">  &#125;))(BodyRow)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>DropTarget和DragSource 是高阶组件.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BodyRow extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;</span><br><span class=\"line\">      connectDragSource,</span><br><span class=\"line\">      connectDropTarget,</span><br><span class=\"line\">      ...restProps</span><br><span class=\"line\">    &#125; = this.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    return connectDragSource(</span><br><span class=\"line\">      connectDropTarget(</span><br><span class=\"line\">        &lt;tr</span><br><span class=\"line\">          &#123;...restProps&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"js生成UUID","toc":true,"comments":0,"date":"2018-09-14T06:32:32.000Z","_content":"\n# 什么是UUID\n>UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写，是一种软件建构的标准，亦为开放软件基金会组织在分布式计算环境领域的一部分。其目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下，就不需考虑数据库创建时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3文件系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs包中的UUID库找到实现。\n\n\n# JS生成\n\n    // 生成uuid\n    function generateUUID() {\n        var d = new Date().getTime();\n        if (window.performance && typeof window.performance.now === \"function\") {\n            d += performance.now(); //use high-precision timer if available\n        }\n        var uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (d + Math.random() * 16) % 16 | 0;\n            d = Math.floor(d / 16);\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    }","source":"_posts/js生成UUID.md","raw":"---\ntitle: js生成UUID\ntoc: true\ncomments: false\ncategories: javascript\ndate: 2018-09-14 14:32:32\ntags:\n    - UUID\n---\n\n# 什么是UUID\n>UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写，是一种软件建构的标准，亦为开放软件基金会组织在分布式计算环境领域的一部分。其目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下，就不需考虑数据库创建时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3文件系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs包中的UUID库找到实现。\n\n\n# JS生成\n\n    // 生成uuid\n    function generateUUID() {\n        var d = new Date().getTime();\n        if (window.performance && typeof window.performance.now === \"function\") {\n            d += performance.now(); //use high-precision timer if available\n        }\n        var uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (d + Math.random() * 16) % 16 | 0;\n            d = Math.floor(d / 16);\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    }","slug":"js生成UUID","published":1,"updated":"2019-12-24T03:04:37.363Z","layout":"post","photos":[],"link":"","_id":"ckaxser6y000lcstopd9zepul","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"什么是UUID\"><a href=\"#什么是UUID\" class=\"headerlink\" title=\"什么是UUID\"></a>什么是UUID</h1><blockquote>\n<p>UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写，是一种软件建构的标准，亦为开放软件基金会组织在分布式计算环境领域的一部分。其目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下，就不需考虑数据库创建时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3文件系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs包中的UUID库找到实现。</p>\n</blockquote>\n<h1 id=\"JS生成\"><a href=\"#JS生成\" class=\"headerlink\" title=\"JS生成\"></a>JS生成</h1><pre><code>// 生成uuid\nfunction generateUUID() {\n    var d = new Date().getTime();\n    if (window.performance &amp;&amp; typeof window.performance.now === &quot;function&quot;) {\n        d += performance.now(); //use high-precision timer if available\n    }\n    var uuid = &apos;xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx&apos;.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == &apos;x&apos; ? r : (r &amp; 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是UUID\"><a href=\"#什么是UUID\" class=\"headerlink\" title=\"什么是UUID\"></a>什么是UUID</h1><blockquote>\n<p>UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写，是一种软件建构的标准，亦为开放软件基金会组织在分布式计算环境领域的一部分。其目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下，就不需考虑数据库创建时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3文件系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs包中的UUID库找到实现。</p>\n</blockquote>\n<h1 id=\"JS生成\"><a href=\"#JS生成\" class=\"headerlink\" title=\"JS生成\"></a>JS生成</h1><pre><code>// 生成uuid\nfunction generateUUID() {\n    var d = new Date().getTime();\n    if (window.performance &amp;&amp; typeof window.performance.now === &quot;function&quot;) {\n        d += performance.now(); //use high-precision timer if available\n    }\n    var uuid = &apos;xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx&apos;.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == &apos;x&apos; ? r : (r &amp; 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n}\n</code></pre>"},{"title":"apidoc自动生成api接口文档","toc":true,"comments":0,"date":"2019-04-24T05:18:07.000Z","keywords":["RESTful","ApiDoc"],"description":"自动生成接口文档","_content":"[【ApiDoc】官方文档(翻译)](https://www.jianshu.com/p/9353d5cc1ef8)\n\n\n# 安装\n    npm install apidoc -g\n# 运行\n    pidoc -i myapp/ -o apidoc/ -t mytemplate/\n\n# 配置\n## 添加apidoc.json\n        {\n        \"name\": \"example\",\n        \"version\": \"0.1.0\",\n        \"description\": \"apiDoc basic example\",\n        \"title\": \"Custom apiDoc browser title\",\n        \"url\" : \"https://api.github.com/v1\"\n        }\n## 直接在package.json中配置\n    {\n        \"name\": \"example\",\n        \"version\": \"0.1.0\",\n        \"description\": \"apiDoc basic example\",\n        \"apidoc\": {\n            \"title\": \"Custom apiDoc browser title\",\n            \"url\" : \"https://api.github.com/v1\"\n        }\n    }\n\n# 在项目代码中添加注释\n\n**demo**\n\n    /** \n    * @api {get} /user/:id Request User information \n    * @apiName GetUser \n    * @apiGroup User \n    * \n    * @apiParam {Number} id Users unique ID. \n    * \n    * @apiSuccess {String} firstname Firstname of the User. \n    * @apiSuccess {String} lastname Lastname of the User. \n    */\n\n具体其他的apidoc注释参数参考官网或者文章顶部的中文翻译链接   \n\n","source":"_posts/apidoc自动生成api接口文档.md","raw":"---\ntitle: apidoc自动生成api接口文档\ntoc: true\ncomments: false\ncategories: RESTful\ndate: 2019-04-24 13:18:07\ntags:\nkeywords: \n    - RESTful\n    - ApiDoc\ndescription: 自动生成接口文档\n---\n[【ApiDoc】官方文档(翻译)](https://www.jianshu.com/p/9353d5cc1ef8)\n\n\n# 安装\n    npm install apidoc -g\n# 运行\n    pidoc -i myapp/ -o apidoc/ -t mytemplate/\n\n# 配置\n## 添加apidoc.json\n        {\n        \"name\": \"example\",\n        \"version\": \"0.1.0\",\n        \"description\": \"apiDoc basic example\",\n        \"title\": \"Custom apiDoc browser title\",\n        \"url\" : \"https://api.github.com/v1\"\n        }\n## 直接在package.json中配置\n    {\n        \"name\": \"example\",\n        \"version\": \"0.1.0\",\n        \"description\": \"apiDoc basic example\",\n        \"apidoc\": {\n            \"title\": \"Custom apiDoc browser title\",\n            \"url\" : \"https://api.github.com/v1\"\n        }\n    }\n\n# 在项目代码中添加注释\n\n**demo**\n\n    /** \n    * @api {get} /user/:id Request User information \n    * @apiName GetUser \n    * @apiGroup User \n    * \n    * @apiParam {Number} id Users unique ID. \n    * \n    * @apiSuccess {String} firstname Firstname of the User. \n    * @apiSuccess {String} lastname Lastname of the User. \n    */\n\n具体其他的apidoc注释参数参考官网或者文章顶部的中文翻译链接   \n\n","slug":"apidoc自动生成api接口文档","published":1,"updated":"2019-12-24T03:04:37.362Z","layout":"post","photos":[],"link":"","_id":"ckaxser70000ocstoh22v3zcm","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><a href=\"https://www.jianshu.com/p/9353d5cc1ef8\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">【ApiDoc】官方文档(翻译)</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>npm install apidoc -g\n</code></pre><h1 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h1><pre><code>pidoc -i myapp/ -o apidoc/ -t mytemplate/\n</code></pre><h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"添加apidoc-json\"><a href=\"#添加apidoc-json\" class=\"headerlink\" title=\"添加apidoc.json\"></a>添加apidoc.json</h2><pre><code>{\n&quot;name&quot;: &quot;example&quot;,\n&quot;version&quot;: &quot;0.1.0&quot;,\n&quot;description&quot;: &quot;apiDoc basic example&quot;,\n&quot;title&quot;: &quot;Custom apiDoc browser title&quot;,\n&quot;url&quot; : &quot;https://api.github.com/v1&quot;\n}\n</code></pre><h2 id=\"直接在package-json中配置\"><a href=\"#直接在package-json中配置\" class=\"headerlink\" title=\"直接在package.json中配置\"></a>直接在package.json中配置</h2><pre><code>{\n    &quot;name&quot;: &quot;example&quot;,\n    &quot;version&quot;: &quot;0.1.0&quot;,\n    &quot;description&quot;: &quot;apiDoc basic example&quot;,\n    &quot;apidoc&quot;: {\n        &quot;title&quot;: &quot;Custom apiDoc browser title&quot;,\n        &quot;url&quot; : &quot;https://api.github.com/v1&quot;\n    }\n}\n</code></pre><h1 id=\"在项目代码中添加注释\"><a href=\"#在项目代码中添加注释\" class=\"headerlink\" title=\"在项目代码中添加注释\"></a>在项目代码中添加注释</h1><p><strong>demo</strong></p>\n<pre><code>/** \n* @api {get} /user/:id Request User information \n* @apiName GetUser \n* @apiGroup User \n* \n* @apiParam {Number} id Users unique ID. \n* \n* @apiSuccess {String} firstname Firstname of the User. \n* @apiSuccess {String} lastname Lastname of the User. \n*/\n</code></pre><p>具体其他的apidoc注释参数参考官网或者文章顶部的中文翻译链接   </p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.jianshu.com/p/9353d5cc1ef8\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">【ApiDoc】官方文档(翻译)</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>npm install apidoc -g\n</code></pre><h1 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h1><pre><code>pidoc -i myapp/ -o apidoc/ -t mytemplate/\n</code></pre><h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"添加apidoc-json\"><a href=\"#添加apidoc-json\" class=\"headerlink\" title=\"添加apidoc.json\"></a>添加apidoc.json</h2><pre><code>{\n&quot;name&quot;: &quot;example&quot;,\n&quot;version&quot;: &quot;0.1.0&quot;,\n&quot;description&quot;: &quot;apiDoc basic example&quot;,\n&quot;title&quot;: &quot;Custom apiDoc browser title&quot;,\n&quot;url&quot; : &quot;https://api.github.com/v1&quot;\n}\n</code></pre><h2 id=\"直接在package-json中配置\"><a href=\"#直接在package-json中配置\" class=\"headerlink\" title=\"直接在package.json中配置\"></a>直接在package.json中配置</h2><pre><code>{\n    &quot;name&quot;: &quot;example&quot;,\n    &quot;version&quot;: &quot;0.1.0&quot;,\n    &quot;description&quot;: &quot;apiDoc basic example&quot;,\n    &quot;apidoc&quot;: {\n        &quot;title&quot;: &quot;Custom apiDoc browser title&quot;,\n        &quot;url&quot; : &quot;https://api.github.com/v1&quot;\n    }\n}\n</code></pre><h1 id=\"在项目代码中添加注释\"><a href=\"#在项目代码中添加注释\" class=\"headerlink\" title=\"在项目代码中添加注释\"></a>在项目代码中添加注释</h1><p><strong>demo</strong></p>\n<pre><code>/** \n* @api {get} /user/:id Request User information \n* @apiName GetUser \n* @apiGroup User \n* \n* @apiParam {Number} id Users unique ID. \n* \n* @apiSuccess {String} firstname Firstname of the User. \n* @apiSuccess {String} lastname Lastname of the User. \n*/\n</code></pre><p>具体其他的apidoc注释参数参考官网或者文章顶部的中文翻译链接   </p>\n"},{"title":"谷歌浏览器实现直接打印效果","toc":true,"comments":0,"date":"2019-02-28T08:55:39.000Z","_content":"\n1. 创建快捷方式;\n2. 右击->属性->目标 的尾部添加  --kiosk-printing 注意前面有空格 \n![img](/uploads/add--kiosk-printing.png)\n3. 调用 `window.print()` 就可以实现直接打印了","source":"_posts/谷歌浏览器实现直接打印效果.md","raw":"---\ntitle: 谷歌浏览器实现直接打印效果\ntoc: true\ncomments: false\ncategories: javascript\ndate: 2019-02-28 16:55:39\ntags: \n    - 直接打印\n    - 谷歌\n    - --kiosk-printing\n---\n\n1. 创建快捷方式;\n2. 右击->属性->目标 的尾部添加  --kiosk-printing 注意前面有空格 \n![img](/uploads/add--kiosk-printing.png)\n3. 调用 `window.print()` 就可以实现直接打印了","slug":"谷歌浏览器实现直接打印效果","published":1,"updated":"2019-12-24T03:04:37.365Z","layout":"post","photos":[],"link":"","_id":"ckaxser71000rcstof0dl2j7r","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><ol>\n<li>创建快捷方式;</li>\n<li>右击-&gt;属性-&gt;目标 的尾部添加  –kiosk-printing 注意前面有空格<br><img src=\"/uploads/add--kiosk-printing.png\" alt=\"img\"></li>\n<li>调用 <code>window.print()</code> 就可以实现直接打印了</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>创建快捷方式;</li>\n<li>右击-&gt;属性-&gt;目标 的尾部添加  –kiosk-printing 注意前面有空格<br><img src=\"/uploads/add--kiosk-printing.png\" alt=\"img\"></li>\n<li>调用 <code>window.print()</code> 就可以实现直接打印了</li>\n</ol>\n"},{"title":"文本溢出显示的几中写法","toc":true,"comments":1,"date":"2018-12-27T05:09:20.000Z","keywords":["多行溢出","单行溢出"],"description":"多行文本溢出，显示省略号","_content":"\n# 单行文本溢出（整行）\n\n效果：\n![单行文本溢出](/AnastasiaJ/uploads/单行溢出.jpg)\n\nhtml\n\n```\n<div class=\"test\">This is some long text that will not fit in the box</div>\n```\n\ncss\n\n```\ndiv.test{\n\twhite-space:nowrap;\n\twidth:12em;\n\toverflow:hidden;\n\tborder:1px solid #000000;\n    text-overflow:ellipsis;\n}\n```\n\n# 非整行文本溢出\n\n效果：\n![单行文本溢出](/AnastasiaJ/uploads/非整行溢出.jpg)\n\nhtml\n\n```\n<div class='table'>\n\t<div class=\"test label\">姓名：</div>\n\t<div class=\"test value\">Anastasia</div>\n</div>\n<div class='table'>\n\t<div class=\"test label\">地址：</div>\n\t<div class=\"test value\">This is some long textThis is some long textThis is some long text</div>\n</div>\n```\n\ncss\n\n```\ndiv.table{\n\tdisplay:table;\n\ttable-layout:fixed;\n\tborder:solid 1px red;\n\twidth:15em;\n\t}\ndiv.test\n{\n\tdisplay:table-cell;\n}\ndiv.label{\n\twidth:4em\n}\ndiv.value{\n\twhite-space:nowrap;\n\ttext-overflow:ellipsis;\n\toverflow:hidden;\n}\n```\n\n这里的几种设置和第一种是一样的，同样需要设置 white-space、width、overflow，但由于用到了 table 的布局方式，**table td 的流动性，表格的宽度是跟随单元格内容多少自动计算尺寸**，所以这里需要给 table 添加**table-layout:fixed**。\n\n# 多行溢出（谷歌浏览器）\n\n效果\n![多行溢出](/AnastasiaJ/uploads/多行溢出.jpg)\n\nhtml\n\n```\n<div class=\"test\" style=\"-webkit-box-orient:vertical;\">This is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long text</div>\n\n```\n\ncss（**注意 css 书写的顺序**）\n\n```\ndiv{\n  text-overflow: ellipsis;\n  margin: auto;\n  width: 20em; //指定宽度\n  display: -webkit-box;\n\t-webkit-box-orient: vertical;\n\t-webkit-line-clamp: 3;\n\toverflow: hidden;\n}\n```\n","source":"_posts/文本溢出的几中写法.md","raw":"---\ntitle: 文本溢出显示的几中写法\ntoc: true\ncomments: true\ncategories: css\ndate: 2018-12-27 13:09:20\ntags:\n  - css\n\t- 多行溢出\n\t- 单行溢出\nkeywords: [多行溢出,单行溢出]\ndescription: 多行文本溢出，显示省略号\n---\n\n# 单行文本溢出（整行）\n\n效果：\n![单行文本溢出](/AnastasiaJ/uploads/单行溢出.jpg)\n\nhtml\n\n```\n<div class=\"test\">This is some long text that will not fit in the box</div>\n```\n\ncss\n\n```\ndiv.test{\n\twhite-space:nowrap;\n\twidth:12em;\n\toverflow:hidden;\n\tborder:1px solid #000000;\n    text-overflow:ellipsis;\n}\n```\n\n# 非整行文本溢出\n\n效果：\n![单行文本溢出](/AnastasiaJ/uploads/非整行溢出.jpg)\n\nhtml\n\n```\n<div class='table'>\n\t<div class=\"test label\">姓名：</div>\n\t<div class=\"test value\">Anastasia</div>\n</div>\n<div class='table'>\n\t<div class=\"test label\">地址：</div>\n\t<div class=\"test value\">This is some long textThis is some long textThis is some long text</div>\n</div>\n```\n\ncss\n\n```\ndiv.table{\n\tdisplay:table;\n\ttable-layout:fixed;\n\tborder:solid 1px red;\n\twidth:15em;\n\t}\ndiv.test\n{\n\tdisplay:table-cell;\n}\ndiv.label{\n\twidth:4em\n}\ndiv.value{\n\twhite-space:nowrap;\n\ttext-overflow:ellipsis;\n\toverflow:hidden;\n}\n```\n\n这里的几种设置和第一种是一样的，同样需要设置 white-space、width、overflow，但由于用到了 table 的布局方式，**table td 的流动性，表格的宽度是跟随单元格内容多少自动计算尺寸**，所以这里需要给 table 添加**table-layout:fixed**。\n\n# 多行溢出（谷歌浏览器）\n\n效果\n![多行溢出](/AnastasiaJ/uploads/多行溢出.jpg)\n\nhtml\n\n```\n<div class=\"test\" style=\"-webkit-box-orient:vertical;\">This is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long text</div>\n\n```\n\ncss（**注意 css 书写的顺序**）\n\n```\ndiv{\n  text-overflow: ellipsis;\n  margin: auto;\n  width: 20em; //指定宽度\n  display: -webkit-box;\n\t-webkit-box-orient: vertical;\n\t-webkit-line-clamp: 3;\n\toverflow: hidden;\n}\n```\n","slug":"文本溢出的几中写法","published":1,"updated":"2019-12-24T03:04:37.365Z","layout":"post","photos":[],"link":"","_id":"ckaxser73000wcsto6olnsmgd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"单行文本溢出（整行）\"><a href=\"#单行文本溢出（整行）\" class=\"headerlink\" title=\"单行文本溢出（整行）\"></a>单行文本溢出（整行）</h1><p>效果：<br><img src=\"/AnastasiaJ/uploads/单行溢出.jpg\" alt=\"单行文本溢出\"></p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;test&quot;&gt;This is some long text that will not fit in the box&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>css</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.test&#123;</span><br><span class=\"line\">\twhite-space:nowrap;</span><br><span class=\"line\">\twidth:12em;</span><br><span class=\"line\">\toverflow:hidden;</span><br><span class=\"line\">\tborder:1px solid #000000;</span><br><span class=\"line\">    text-overflow:ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"非整行文本溢出\"><a href=\"#非整行文本溢出\" class=\"headerlink\" title=\"非整行文本溢出\"></a>非整行文本溢出</h1><p>效果：<br><img src=\"/AnastasiaJ/uploads/非整行溢出.jpg\" alt=\"单行文本溢出\"></p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;table&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;test label&quot;&gt;姓名：&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;test value&quot;&gt;Anastasia&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&apos;table&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;test label&quot;&gt;地址：&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;test value&quot;&gt;This is some long textThis is some long textThis is some long text&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>css</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.table&#123;</span><br><span class=\"line\">\tdisplay:table;</span><br><span class=\"line\">\ttable-layout:fixed;</span><br><span class=\"line\">\tborder:solid 1px red;</span><br><span class=\"line\">\twidth:15em;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">div.test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdisplay:table-cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div.label&#123;</span><br><span class=\"line\">\twidth:4em</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div.value&#123;</span><br><span class=\"line\">\twhite-space:nowrap;</span><br><span class=\"line\">\ttext-overflow:ellipsis;</span><br><span class=\"line\">\toverflow:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的几种设置和第一种是一样的，同样需要设置 white-space、width、overflow，但由于用到了 table 的布局方式，<strong>table td 的流动性，表格的宽度是跟随单元格内容多少自动计算尺寸</strong>，所以这里需要给 table 添加<strong>table-layout:fixed</strong>。</p>\n<h1 id=\"多行溢出（谷歌浏览器）\"><a href=\"#多行溢出（谷歌浏览器）\" class=\"headerlink\" title=\"多行溢出（谷歌浏览器）\"></a>多行溢出（谷歌浏览器）</h1><p>效果<br><img src=\"/AnastasiaJ/uploads/多行溢出.jpg\" alt=\"多行溢出\"></p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;test&quot; style=&quot;-webkit-box-orient:vertical;&quot;&gt;This is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long text&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>css（<strong>注意 css 书写的顺序</strong>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">  text-overflow: ellipsis;</span><br><span class=\"line\">  margin: auto;</span><br><span class=\"line\">  width: 20em; //指定宽度</span><br><span class=\"line\">  display: -webkit-box;</span><br><span class=\"line\">\t-webkit-box-orient: vertical;</span><br><span class=\"line\">\t-webkit-line-clamp: 3;</span><br><span class=\"line\">\toverflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"单行文本溢出（整行）\"><a href=\"#单行文本溢出（整行）\" class=\"headerlink\" title=\"单行文本溢出（整行）\"></a>单行文本溢出（整行）</h1><p>效果：<br><img src=\"/AnastasiaJ/uploads/单行溢出.jpg\" alt=\"单行文本溢出\"></p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;test&quot;&gt;This is some long text that will not fit in the box&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>css</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.test&#123;</span><br><span class=\"line\">\twhite-space:nowrap;</span><br><span class=\"line\">\twidth:12em;</span><br><span class=\"line\">\toverflow:hidden;</span><br><span class=\"line\">\tborder:1px solid #000000;</span><br><span class=\"line\">    text-overflow:ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"非整行文本溢出\"><a href=\"#非整行文本溢出\" class=\"headerlink\" title=\"非整行文本溢出\"></a>非整行文本溢出</h1><p>效果：<br><img src=\"/AnastasiaJ/uploads/非整行溢出.jpg\" alt=\"单行文本溢出\"></p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;table&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;test label&quot;&gt;姓名：&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;test value&quot;&gt;Anastasia&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&apos;table&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;test label&quot;&gt;地址：&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;test value&quot;&gt;This is some long textThis is some long textThis is some long text&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>css</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.table&#123;</span><br><span class=\"line\">\tdisplay:table;</span><br><span class=\"line\">\ttable-layout:fixed;</span><br><span class=\"line\">\tborder:solid 1px red;</span><br><span class=\"line\">\twidth:15em;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">div.test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdisplay:table-cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div.label&#123;</span><br><span class=\"line\">\twidth:4em</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div.value&#123;</span><br><span class=\"line\">\twhite-space:nowrap;</span><br><span class=\"line\">\ttext-overflow:ellipsis;</span><br><span class=\"line\">\toverflow:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的几种设置和第一种是一样的，同样需要设置 white-space、width、overflow，但由于用到了 table 的布局方式，<strong>table td 的流动性，表格的宽度是跟随单元格内容多少自动计算尺寸</strong>，所以这里需要给 table 添加<strong>table-layout:fixed</strong>。</p>\n<h1 id=\"多行溢出（谷歌浏览器）\"><a href=\"#多行溢出（谷歌浏览器）\" class=\"headerlink\" title=\"多行溢出（谷歌浏览器）\"></a>多行溢出（谷歌浏览器）</h1><p>效果<br><img src=\"/AnastasiaJ/uploads/多行溢出.jpg\" alt=\"多行溢出\"></p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;test&quot; style=&quot;-webkit-box-orient:vertical;&quot;&gt;This is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long textThis is some long text&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>css（<strong>注意 css 书写的顺序</strong>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">  text-overflow: ellipsis;</span><br><span class=\"line\">  margin: auto;</span><br><span class=\"line\">  width: 20em; //指定宽度</span><br><span class=\"line\">  display: -webkit-box;</span><br><span class=\"line\">\t-webkit-box-orient: vertical;</span><br><span class=\"line\">\t-webkit-line-clamp: 3;</span><br><span class=\"line\">\toverflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"signalr实时推送--javascript客户端","toc":true,"comments":0,"date":"2019-05-04T07:28:52.000Z","keywords":"signalR","description":"signalR","_content":"## 引入 \n    <script src=\"/static/js/jquery.signalR-2.2.2.min.js\"></script>\n## 连接服务端 \n    <script src=\"http://192.168.1.77:9999/signalr/hubs\"></script>\n## 创建createHubProxy\n\n```\nlet let obj={commonHub:null};\nconst connection= $.hubConnection('http://192.168.1.77:9999');\nobj.commonHub =  connectionTL.createHubProxy('commonHub');\n\nexport function register(userId,callback){\n    connection.start().done(function (res) {\n        obj.commonHub.invoke(\"register\",userId, res.id).done(function () {\n            console.log(\"registerTL\",userId,res.id);\n            callback(res.id)\n        });\n    });\n    connection.disconnected(function () {\n        console.log(\"断开连接TL\");  // 断开连接的处理方法\n    });\n}\n\nexport function connectionStop(){\n    connection.stop();\n};\nexport const commonHub = obj.commonHub; // 指向hub\n\n```\n## 进入页面时启动监听并调用register方法，register在监听后调用。\n    commonHub.on('方法名',()=>{})\n## 离开页面时断开连接，调用connectionStop()","source":"_posts/signalr实时推送-javascript客户端.md","raw":"---\ntitle: signalr实时推送--javascript客户端\ntoc: true\ncomments: false\ncategories: \n- javascript\n- signalR\ndate: 2019-05-04 15:28:52\ntags: signalR\nkeywords: signalR\ndescription: signalR\n---\n## 引入 \n    <script src=\"/static/js/jquery.signalR-2.2.2.min.js\"></script>\n## 连接服务端 \n    <script src=\"http://192.168.1.77:9999/signalr/hubs\"></script>\n## 创建createHubProxy\n\n```\nlet let obj={commonHub:null};\nconst connection= $.hubConnection('http://192.168.1.77:9999');\nobj.commonHub =  connectionTL.createHubProxy('commonHub');\n\nexport function register(userId,callback){\n    connection.start().done(function (res) {\n        obj.commonHub.invoke(\"register\",userId, res.id).done(function () {\n            console.log(\"registerTL\",userId,res.id);\n            callback(res.id)\n        });\n    });\n    connection.disconnected(function () {\n        console.log(\"断开连接TL\");  // 断开连接的处理方法\n    });\n}\n\nexport function connectionStop(){\n    connection.stop();\n};\nexport const commonHub = obj.commonHub; // 指向hub\n\n```\n## 进入页面时启动监听并调用register方法，register在监听后调用。\n    commonHub.on('方法名',()=>{})\n## 离开页面时断开连接，调用connectionStop()","slug":"signalr实时推送-javascript客户端","published":1,"updated":"2019-12-24T03:04:37.363Z","layout":"post","photos":[],"link":"","_id":"ckaxser75000zcsto31bnl11x","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><pre><code>&lt;script src=&quot;/static/js/jquery.signalR-2.2.2.min.js&quot;&gt;&lt;/script&gt;\n</code></pre><h2 id=\"连接服务端\"><a href=\"#连接服务端\" class=\"headerlink\" title=\"连接服务端\"></a>连接服务端</h2><pre><code>&lt;script src=&quot;http://192.168.1.77:9999/signalr/hubs&quot;&gt;&lt;/script&gt;\n</code></pre><h2 id=\"创建createHubProxy\"><a href=\"#创建createHubProxy\" class=\"headerlink\" title=\"创建createHubProxy\"></a>创建createHubProxy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let let obj=&#123;commonHub:null&#125;;</span><br><span class=\"line\">const connection= $.hubConnection(&apos;http://192.168.1.77:9999&apos;);</span><br><span class=\"line\">obj.commonHub =  connectionTL.createHubProxy(&apos;commonHub&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">export function register(userId,callback)&#123;</span><br><span class=\"line\">    connection.start().done(function (res) &#123;</span><br><span class=\"line\">        obj.commonHub.invoke(&quot;register&quot;,userId, res.id).done(function () &#123;</span><br><span class=\"line\">            console.log(&quot;registerTL&quot;,userId,res.id);</span><br><span class=\"line\">            callback(res.id)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    connection.disconnected(function () &#123;</span><br><span class=\"line\">        console.log(&quot;断开连接TL&quot;);  // 断开连接的处理方法</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function connectionStop()&#123;</span><br><span class=\"line\">    connection.stop();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export const commonHub = obj.commonHub; // 指向hub</span><br></pre></td></tr></table></figure>\n<h2 id=\"进入页面时启动监听并调用register方法，register在监听后调用。\"><a href=\"#进入页面时启动监听并调用register方法，register在监听后调用。\" class=\"headerlink\" title=\"进入页面时启动监听并调用register方法，register在监听后调用。\"></a>进入页面时启动监听并调用register方法，register在监听后调用。</h2><pre><code>commonHub.on(&apos;方法名&apos;,()=&gt;{})\n</code></pre><h2 id=\"离开页面时断开连接，调用connectionStop\"><a href=\"#离开页面时断开连接，调用connectionStop\" class=\"headerlink\" title=\"离开页面时断开连接，调用connectionStop()\"></a>离开页面时断开连接，调用connectionStop()</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><pre><code>&lt;script src=&quot;/static/js/jquery.signalR-2.2.2.min.js&quot;&gt;&lt;/script&gt;\n</code></pre><h2 id=\"连接服务端\"><a href=\"#连接服务端\" class=\"headerlink\" title=\"连接服务端\"></a>连接服务端</h2><pre><code>&lt;script src=&quot;http://192.168.1.77:9999/signalr/hubs&quot;&gt;&lt;/script&gt;\n</code></pre><h2 id=\"创建createHubProxy\"><a href=\"#创建createHubProxy\" class=\"headerlink\" title=\"创建createHubProxy\"></a>创建createHubProxy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let let obj=&#123;commonHub:null&#125;;</span><br><span class=\"line\">const connection= $.hubConnection(&apos;http://192.168.1.77:9999&apos;);</span><br><span class=\"line\">obj.commonHub =  connectionTL.createHubProxy(&apos;commonHub&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">export function register(userId,callback)&#123;</span><br><span class=\"line\">    connection.start().done(function (res) &#123;</span><br><span class=\"line\">        obj.commonHub.invoke(&quot;register&quot;,userId, res.id).done(function () &#123;</span><br><span class=\"line\">            console.log(&quot;registerTL&quot;,userId,res.id);</span><br><span class=\"line\">            callback(res.id)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    connection.disconnected(function () &#123;</span><br><span class=\"line\">        console.log(&quot;断开连接TL&quot;);  // 断开连接的处理方法</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function connectionStop()&#123;</span><br><span class=\"line\">    connection.stop();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export const commonHub = obj.commonHub; // 指向hub</span><br></pre></td></tr></table></figure>\n<h2 id=\"进入页面时启动监听并调用register方法，register在监听后调用。\"><a href=\"#进入页面时启动监听并调用register方法，register在监听后调用。\" class=\"headerlink\" title=\"进入页面时启动监听并调用register方法，register在监听后调用。\"></a>进入页面时启动监听并调用register方法，register在监听后调用。</h2><pre><code>commonHub.on(&apos;方法名&apos;,()=&gt;{})\n</code></pre><h2 id=\"离开页面时断开连接，调用connectionStop\"><a href=\"#离开页面时断开连接，调用connectionStop\" class=\"headerlink\" title=\"离开页面时断开连接，调用connectionStop()\"></a>离开页面时断开连接，调用connectionStop()</h2>"},{"title":"面向对象的程序设计","toc":true,"comments":0,"date":"2018-09-29T05:16:15.000Z","_content":"**所有对象均继承自 Object**\n\n# 创建对象的几种方法\n\n## 1. new Object()\n\n        var person = new Object();\n        person.name = \"Nicholas\";\n        person.age = 29;\n        person.job = \"Software Engineer\";\n        person.sayName = function(){\n        alert(this.name);\n        }; \n\n## 2. 对象字面量\n\n        var person = {\n        name: \"Nicholas\",\n        age: 29,\n        job: \"Software Engineer\",\n        sayName: function(){\n        alert(this.name);\n        }\n        }; \n\n## 3. 工厂模式\n\n        function createPerson(name, age, job){\n        var o = new Object();\n        o.name = name;\n        o.age = age;\n        o.job = job;\n        o.sayName = function(){\n        alert(this.name);\n        };\n        return o;\n        }\n        var person1 = createPerson(\"Nicholas\", 29, \"Software Engineer\");\n        var person2 = createPerson(\"Greg\", 27, \"Doctor\");\n\n## 4. 构造函数模式\n\n        function Person(name, age, job){\n        this.name = name;\n        this.age = age;\n        this.job = job;\n        this.sayName = function(){\n        alert(this.name);\n        };\n        }\n        var person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\n        var person2 = new Person(\"Greg\", 27, \"Doctor\"); \n\n## 5. 原型模式\n>我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。\n\n        function Person(){\n        }\n        Person.prototype.name = \"Nicholas\";\n        Person.prototype.age = 29;\n        Person.prototype.job = \"Software Engineer\";\n        Person.prototype.sayName = function(){\n        alert(this.name);\n        };\n        var person1 = new Person();\n        person1.sayName(); //\"Nicholas\"\n        var person2 = new Person(); \n        person2.sayName(); //\"Nicholas\"\n        alert(person1.sayName == person2.sayName); //true \n\n### 理解原型对象(hasOwnProperty)\n无论什么时候，只要创建了一个新函数，就会为该函数创建一个 prototype 属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 constructor（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。\n\n每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先\n从对象实例本身开始。如果**在实例中**找到了具有给定名字的属性，则返回该属性的值；如果没有找到，\n则继续搜索指针指向的**原型对象**，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这\n个属性，则返回该属性的值。**（实例中没有才会搜索原型对象）**\n\n使用 `hasOwnProperty()`方法可以检测一个属性是存在于实例中，还是存在于原型中(只在给定属性存在于对象实例中时，才会返回 true)。\n\n###  原型与 in 操作符(in)\n有两种方式使用 `in` 操作符：单独使用和在 for-in 循环中使用。在单独使用时，in 操作符会在通\n过对象能够访问给定属性时返回 true，**无论该属性存在于实例中还是原型中**。\n\n###  更简单的原型语法\n\n        function Person(){\n        }\n        Person.prototype = {\n        name : \"Nicholas\",\n        age : 29,\n        job: \"Software Engineer\",\n        sayName : function () {\n        alert(this.name);\n        }\n        }; \n\n这里使用的语法，本质上完全**重写**了默认的 prototype 对象，因此 constructor 属性也就变成了新\n对象的 constructor 属性（指向 Object 构造函数），不再指向 Person 函数。此时，尽管 instanceof\n操作符还能返回正确的结果，但通过 constructor 已经无法确定对象的类型了。\n\n### 原型的动态性\n\n在prototype 内添加属性、方法，不管是在实例化之前还是之后，实例化的对象都能够访问到。\n\n但是整个原型对象重写除外。实例被创建时有一个指向原型的指针，一旦原型被重写，实例没办法指向新的原型。\n\n        function Person(){\n        }\n        var friend = new Person();\n\n        Person.prototype = {//整个原型被重写\n        constructor: Person,\n        name : \"Nicholas\",\n        age : 29,\n        job : \"Software Engineer\",\n        sayName : function () {\n        alert(this.name);\n        }\n        };\n        friend.sayName(); //error\n\n### 原生对象的原型\n>原型模式的重要性不仅体现在创建自定义类型方面，就连所有原生的引用类型，都是采用这种模式\n创建的。所有原生引用类型（Object、Array、String，等等）都在其构造函数的原型上定义了方法。\n\n### 原型对象的问题\n\n1. 它省略了为构造函数**传递初始化参数**这一环节，结果所有实例在\n默认情况下都将取得相同的属性值.\n2. 原型中所有属性是被很多实例**共享**的，这种共享对于函数非常合适。对于那些包含基本值的属性倒\n也说得过去，然而，对于包含引用类型值的属性来说，问题就比较突出了.\n        \n        function Person(){\n        }\n        Person.prototype = {\n        constructor: Person,\n        name : \"Nicholas\",\n        age : 29,\n        job : \"Software Engineer\",\n        friends : [\"Shelby\", \"Court\"],\n        sayName : function () {\n        alert(this.name);\n        }\n        };\n        var person1 = new Person();\n        var person2 = new Person();\n        person1.friends.push(\"Van\");\n        alert(person1.friends); //\"Shelby,Court,Van\"\n        alert(person2.friends); //\"Shelby,Court,Van\"\n        alert(person1.friends === person2.friends); //true \n\n## 6. 组合使用构造函数模式和原型模式\n*比较*\n\n1、2两种方法，对于创建很多相同结构对象的时候，不会产生冗余代码；\n构造函数相对于工厂模式的优势在于能够使用 constructor 属性 及 instanceof 操作符去识别对象。`instanceof比constructor更准确，在prototype被重写的情况下，constructor不能确定对象的类型。`\n\n        alert(person1.constructor == Person); //true \n        alert(person1 instanceof Object); //true \n        alert(person1 instanceof Person); //true \n\n\n\n\n未完，待续...内容太多了 ","source":"_posts/面向对象的程序设计.md","raw":"---\ntitle: 面向对象的程序设计\ntoc: true\ncomments: false\ncategories: javascript\ndate: 2018-09-29 13:16:15\ntags:\n        - 面向对象\n---\n**所有对象均继承自 Object**\n\n# 创建对象的几种方法\n\n## 1. new Object()\n\n        var person = new Object();\n        person.name = \"Nicholas\";\n        person.age = 29;\n        person.job = \"Software Engineer\";\n        person.sayName = function(){\n        alert(this.name);\n        }; \n\n## 2. 对象字面量\n\n        var person = {\n        name: \"Nicholas\",\n        age: 29,\n        job: \"Software Engineer\",\n        sayName: function(){\n        alert(this.name);\n        }\n        }; \n\n## 3. 工厂模式\n\n        function createPerson(name, age, job){\n        var o = new Object();\n        o.name = name;\n        o.age = age;\n        o.job = job;\n        o.sayName = function(){\n        alert(this.name);\n        };\n        return o;\n        }\n        var person1 = createPerson(\"Nicholas\", 29, \"Software Engineer\");\n        var person2 = createPerson(\"Greg\", 27, \"Doctor\");\n\n## 4. 构造函数模式\n\n        function Person(name, age, job){\n        this.name = name;\n        this.age = age;\n        this.job = job;\n        this.sayName = function(){\n        alert(this.name);\n        };\n        }\n        var person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\n        var person2 = new Person(\"Greg\", 27, \"Doctor\"); \n\n## 5. 原型模式\n>我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。\n\n        function Person(){\n        }\n        Person.prototype.name = \"Nicholas\";\n        Person.prototype.age = 29;\n        Person.prototype.job = \"Software Engineer\";\n        Person.prototype.sayName = function(){\n        alert(this.name);\n        };\n        var person1 = new Person();\n        person1.sayName(); //\"Nicholas\"\n        var person2 = new Person(); \n        person2.sayName(); //\"Nicholas\"\n        alert(person1.sayName == person2.sayName); //true \n\n### 理解原型对象(hasOwnProperty)\n无论什么时候，只要创建了一个新函数，就会为该函数创建一个 prototype 属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 constructor（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。\n\n每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先\n从对象实例本身开始。如果**在实例中**找到了具有给定名字的属性，则返回该属性的值；如果没有找到，\n则继续搜索指针指向的**原型对象**，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这\n个属性，则返回该属性的值。**（实例中没有才会搜索原型对象）**\n\n使用 `hasOwnProperty()`方法可以检测一个属性是存在于实例中，还是存在于原型中(只在给定属性存在于对象实例中时，才会返回 true)。\n\n###  原型与 in 操作符(in)\n有两种方式使用 `in` 操作符：单独使用和在 for-in 循环中使用。在单独使用时，in 操作符会在通\n过对象能够访问给定属性时返回 true，**无论该属性存在于实例中还是原型中**。\n\n###  更简单的原型语法\n\n        function Person(){\n        }\n        Person.prototype = {\n        name : \"Nicholas\",\n        age : 29,\n        job: \"Software Engineer\",\n        sayName : function () {\n        alert(this.name);\n        }\n        }; \n\n这里使用的语法，本质上完全**重写**了默认的 prototype 对象，因此 constructor 属性也就变成了新\n对象的 constructor 属性（指向 Object 构造函数），不再指向 Person 函数。此时，尽管 instanceof\n操作符还能返回正确的结果，但通过 constructor 已经无法确定对象的类型了。\n\n### 原型的动态性\n\n在prototype 内添加属性、方法，不管是在实例化之前还是之后，实例化的对象都能够访问到。\n\n但是整个原型对象重写除外。实例被创建时有一个指向原型的指针，一旦原型被重写，实例没办法指向新的原型。\n\n        function Person(){\n        }\n        var friend = new Person();\n\n        Person.prototype = {//整个原型被重写\n        constructor: Person,\n        name : \"Nicholas\",\n        age : 29,\n        job : \"Software Engineer\",\n        sayName : function () {\n        alert(this.name);\n        }\n        };\n        friend.sayName(); //error\n\n### 原生对象的原型\n>原型模式的重要性不仅体现在创建自定义类型方面，就连所有原生的引用类型，都是采用这种模式\n创建的。所有原生引用类型（Object、Array、String，等等）都在其构造函数的原型上定义了方法。\n\n### 原型对象的问题\n\n1. 它省略了为构造函数**传递初始化参数**这一环节，结果所有实例在\n默认情况下都将取得相同的属性值.\n2. 原型中所有属性是被很多实例**共享**的，这种共享对于函数非常合适。对于那些包含基本值的属性倒\n也说得过去，然而，对于包含引用类型值的属性来说，问题就比较突出了.\n        \n        function Person(){\n        }\n        Person.prototype = {\n        constructor: Person,\n        name : \"Nicholas\",\n        age : 29,\n        job : \"Software Engineer\",\n        friends : [\"Shelby\", \"Court\"],\n        sayName : function () {\n        alert(this.name);\n        }\n        };\n        var person1 = new Person();\n        var person2 = new Person();\n        person1.friends.push(\"Van\");\n        alert(person1.friends); //\"Shelby,Court,Van\"\n        alert(person2.friends); //\"Shelby,Court,Van\"\n        alert(person1.friends === person2.friends); //true \n\n## 6. 组合使用构造函数模式和原型模式\n*比较*\n\n1、2两种方法，对于创建很多相同结构对象的时候，不会产生冗余代码；\n构造函数相对于工厂模式的优势在于能够使用 constructor 属性 及 instanceof 操作符去识别对象。`instanceof比constructor更准确，在prototype被重写的情况下，constructor不能确定对象的类型。`\n\n        alert(person1.constructor == Person); //true \n        alert(person1 instanceof Object); //true \n        alert(person1 instanceof Person); //true \n\n\n\n\n未完，待续...内容太多了 ","slug":"面向对象的程序设计","published":1,"updated":"2019-12-24T03:04:37.366Z","layout":"post","photos":[],"link":"","_id":"ckaxser770011csto0md69pj5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><strong>所有对象均继承自 Object</strong></p>\n<h1 id=\"创建对象的几种方法\"><a href=\"#创建对象的几种方法\" class=\"headerlink\" title=\"创建对象的几种方法\"></a>创建对象的几种方法</h1><h2 id=\"1-new-Object\"><a href=\"#1-new-Object\" class=\"headerlink\" title=\"1. new Object()\"></a>1. new Object()</h2><pre><code>var person = new Object();\nperson.name = &quot;Nicholas&quot;;\nperson.age = 29;\nperson.job = &quot;Software Engineer&quot;;\nperson.sayName = function(){\nalert(this.name);\n}; \n</code></pre><h2 id=\"2-对象字面量\"><a href=\"#2-对象字面量\" class=\"headerlink\" title=\"2. 对象字面量\"></a>2. 对象字面量</h2><pre><code>var person = {\nname: &quot;Nicholas&quot;,\nage: 29,\njob: &quot;Software Engineer&quot;,\nsayName: function(){\nalert(this.name);\n}\n}; \n</code></pre><h2 id=\"3-工厂模式\"><a href=\"#3-工厂模式\" class=\"headerlink\" title=\"3. 工厂模式\"></a>3. 工厂模式</h2><pre><code>function createPerson(name, age, job){\nvar o = new Object();\no.name = name;\no.age = age;\no.job = job;\no.sayName = function(){\nalert(this.name);\n};\nreturn o;\n}\nvar person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);\nvar person2 = createPerson(&quot;Greg&quot;, 27, &quot;Doctor&quot;);\n</code></pre><h2 id=\"4-构造函数模式\"><a href=\"#4-构造函数模式\" class=\"headerlink\" title=\"4. 构造函数模式\"></a>4. 构造函数模式</h2><pre><code>function Person(name, age, job){\nthis.name = name;\nthis.age = age;\nthis.job = job;\nthis.sayName = function(){\nalert(this.name);\n};\n}\nvar person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);\nvar person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;); \n</code></pre><h2 id=\"5-原型模式\"><a href=\"#5-原型模式\" class=\"headerlink\" title=\"5. 原型模式\"></a>5. 原型模式</h2><blockquote>\n<p>我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。</p>\n</blockquote>\n<pre><code>function Person(){\n}\nPerson.prototype.name = &quot;Nicholas&quot;;\nPerson.prototype.age = 29;\nPerson.prototype.job = &quot;Software Engineer&quot;;\nPerson.prototype.sayName = function(){\nalert(this.name);\n};\nvar person1 = new Person();\nperson1.sayName(); //&quot;Nicholas&quot;\nvar person2 = new Person(); \nperson2.sayName(); //&quot;Nicholas&quot;\nalert(person1.sayName == person2.sayName); //true \n</code></pre><h3 id=\"理解原型对象-hasOwnProperty\"><a href=\"#理解原型对象-hasOwnProperty\" class=\"headerlink\" title=\"理解原型对象(hasOwnProperty)\"></a>理解原型对象(hasOwnProperty)</h3><p>无论什么时候，只要创建了一个新函数，就会为该函数创建一个 prototype 属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 constructor（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。</p>\n<p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先<br>从对象实例本身开始。如果<strong>在实例中</strong>找到了具有给定名字的属性，则返回该属性的值；如果没有找到，<br>则继续搜索指针指向的<strong>原型对象</strong>，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这<br>个属性，则返回该属性的值。<strong>（实例中没有才会搜索原型对象）</strong></p>\n<p>使用 <code>hasOwnProperty()</code>方法可以检测一个属性是存在于实例中，还是存在于原型中(只在给定属性存在于对象实例中时，才会返回 true)。</p>\n<h3 id=\"原型与-in-操作符-in\"><a href=\"#原型与-in-操作符-in\" class=\"headerlink\" title=\"原型与 in 操作符(in)\"></a>原型与 in 操作符(in)</h3><p>有两种方式使用 <code>in</code> 操作符：单独使用和在 for-in 循环中使用。在单独使用时，in 操作符会在通<br>过对象能够访问给定属性时返回 true，<strong>无论该属性存在于实例中还是原型中</strong>。</p>\n<h3 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h3><pre><code>function Person(){\n}\nPerson.prototype = {\nname : &quot;Nicholas&quot;,\nage : 29,\njob: &quot;Software Engineer&quot;,\nsayName : function () {\nalert(this.name);\n}\n}; \n</code></pre><p>这里使用的语法，本质上完全<strong>重写</strong>了默认的 prototype 对象，因此 constructor 属性也就变成了新<br>对象的 constructor 属性（指向 Object 构造函数），不再指向 Person 函数。此时，尽管 instanceof<br>操作符还能返回正确的结果，但通过 constructor 已经无法确定对象的类型了。</p>\n<h3 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h3><p>在prototype 内添加属性、方法，不管是在实例化之前还是之后，实例化的对象都能够访问到。</p>\n<p>但是整个原型对象重写除外。实例被创建时有一个指向原型的指针，一旦原型被重写，实例没办法指向新的原型。</p>\n<pre><code>function Person(){\n}\nvar friend = new Person();\n\nPerson.prototype = {//整个原型被重写\nconstructor: Person,\nname : &quot;Nicholas&quot;,\nage : 29,\njob : &quot;Software Engineer&quot;,\nsayName : function () {\nalert(this.name);\n}\n};\nfriend.sayName(); //error\n</code></pre><h3 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h3><blockquote>\n<p>原型模式的重要性不仅体现在创建自定义类型方面，就连所有原生的引用类型，都是采用这种模式<br>创建的。所有原生引用类型（Object、Array、String，等等）都在其构造函数的原型上定义了方法。</p>\n</blockquote>\n<h3 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h3><ol>\n<li>它省略了为构造函数<strong>传递初始化参数</strong>这一环节，结果所有实例在<br>默认情况下都将取得相同的属性值.</li>\n<li><p>原型中所有属性是被很多实例<strong>共享</strong>的，这种共享对于函数非常合适。对于那些包含基本值的属性倒<br>也说得过去，然而，对于包含引用类型值的属性来说，问题就比较突出了.</p>\n<pre><code>function Person(){\n}\nPerson.prototype = {\nconstructor: Person,\nname : &quot;Nicholas&quot;,\nage : 29,\njob : &quot;Software Engineer&quot;,\nfriends : [&quot;Shelby&quot;, &quot;Court&quot;],\nsayName : function () {\nalert(this.name);\n}\n};\nvar person1 = new Person();\nvar person2 = new Person();\nperson1.friends.push(&quot;Van&quot;);\nalert(person1.friends); //&quot;Shelby,Court,Van&quot;\nalert(person2.friends); //&quot;Shelby,Court,Van&quot;\nalert(person1.friends === person2.friends); //true \n</code></pre></li>\n</ol>\n<h2 id=\"6-组合使用构造函数模式和原型模式\"><a href=\"#6-组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"6. 组合使用构造函数模式和原型模式\"></a>6. 组合使用构造函数模式和原型模式</h2><p><em>比较</em></p>\n<p>1、2两种方法，对于创建很多相同结构对象的时候，不会产生冗余代码；<br>构造函数相对于工厂模式的优势在于能够使用 constructor 属性 及 instanceof 操作符去识别对象。<code>instanceof比constructor更准确，在prototype被重写的情况下，constructor不能确定对象的类型。</code></p>\n<pre><code>alert(person1.constructor == Person); //true \nalert(person1 instanceof Object); //true \nalert(person1 instanceof Person); //true \n</code></pre><p>未完，待续…内容太多了 </p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>所有对象均继承自 Object</strong></p>\n<h1 id=\"创建对象的几种方法\"><a href=\"#创建对象的几种方法\" class=\"headerlink\" title=\"创建对象的几种方法\"></a>创建对象的几种方法</h1><h2 id=\"1-new-Object\"><a href=\"#1-new-Object\" class=\"headerlink\" title=\"1. new Object()\"></a>1. new Object()</h2><pre><code>var person = new Object();\nperson.name = &quot;Nicholas&quot;;\nperson.age = 29;\nperson.job = &quot;Software Engineer&quot;;\nperson.sayName = function(){\nalert(this.name);\n}; \n</code></pre><h2 id=\"2-对象字面量\"><a href=\"#2-对象字面量\" class=\"headerlink\" title=\"2. 对象字面量\"></a>2. 对象字面量</h2><pre><code>var person = {\nname: &quot;Nicholas&quot;,\nage: 29,\njob: &quot;Software Engineer&quot;,\nsayName: function(){\nalert(this.name);\n}\n}; \n</code></pre><h2 id=\"3-工厂模式\"><a href=\"#3-工厂模式\" class=\"headerlink\" title=\"3. 工厂模式\"></a>3. 工厂模式</h2><pre><code>function createPerson(name, age, job){\nvar o = new Object();\no.name = name;\no.age = age;\no.job = job;\no.sayName = function(){\nalert(this.name);\n};\nreturn o;\n}\nvar person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);\nvar person2 = createPerson(&quot;Greg&quot;, 27, &quot;Doctor&quot;);\n</code></pre><h2 id=\"4-构造函数模式\"><a href=\"#4-构造函数模式\" class=\"headerlink\" title=\"4. 构造函数模式\"></a>4. 构造函数模式</h2><pre><code>function Person(name, age, job){\nthis.name = name;\nthis.age = age;\nthis.job = job;\nthis.sayName = function(){\nalert(this.name);\n};\n}\nvar person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);\nvar person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;); \n</code></pre><h2 id=\"5-原型模式\"><a href=\"#5-原型模式\" class=\"headerlink\" title=\"5. 原型模式\"></a>5. 原型模式</h2><blockquote>\n<p>我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。</p>\n</blockquote>\n<pre><code>function Person(){\n}\nPerson.prototype.name = &quot;Nicholas&quot;;\nPerson.prototype.age = 29;\nPerson.prototype.job = &quot;Software Engineer&quot;;\nPerson.prototype.sayName = function(){\nalert(this.name);\n};\nvar person1 = new Person();\nperson1.sayName(); //&quot;Nicholas&quot;\nvar person2 = new Person(); \nperson2.sayName(); //&quot;Nicholas&quot;\nalert(person1.sayName == person2.sayName); //true \n</code></pre><h3 id=\"理解原型对象-hasOwnProperty\"><a href=\"#理解原型对象-hasOwnProperty\" class=\"headerlink\" title=\"理解原型对象(hasOwnProperty)\"></a>理解原型对象(hasOwnProperty)</h3><p>无论什么时候，只要创建了一个新函数，就会为该函数创建一个 prototype 属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 constructor（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。</p>\n<p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先<br>从对象实例本身开始。如果<strong>在实例中</strong>找到了具有给定名字的属性，则返回该属性的值；如果没有找到，<br>则继续搜索指针指向的<strong>原型对象</strong>，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这<br>个属性，则返回该属性的值。<strong>（实例中没有才会搜索原型对象）</strong></p>\n<p>使用 <code>hasOwnProperty()</code>方法可以检测一个属性是存在于实例中，还是存在于原型中(只在给定属性存在于对象实例中时，才会返回 true)。</p>\n<h3 id=\"原型与-in-操作符-in\"><a href=\"#原型与-in-操作符-in\" class=\"headerlink\" title=\"原型与 in 操作符(in)\"></a>原型与 in 操作符(in)</h3><p>有两种方式使用 <code>in</code> 操作符：单独使用和在 for-in 循环中使用。在单独使用时，in 操作符会在通<br>过对象能够访问给定属性时返回 true，<strong>无论该属性存在于实例中还是原型中</strong>。</p>\n<h3 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h3><pre><code>function Person(){\n}\nPerson.prototype = {\nname : &quot;Nicholas&quot;,\nage : 29,\njob: &quot;Software Engineer&quot;,\nsayName : function () {\nalert(this.name);\n}\n}; \n</code></pre><p>这里使用的语法，本质上完全<strong>重写</strong>了默认的 prototype 对象，因此 constructor 属性也就变成了新<br>对象的 constructor 属性（指向 Object 构造函数），不再指向 Person 函数。此时，尽管 instanceof<br>操作符还能返回正确的结果，但通过 constructor 已经无法确定对象的类型了。</p>\n<h3 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h3><p>在prototype 内添加属性、方法，不管是在实例化之前还是之后，实例化的对象都能够访问到。</p>\n<p>但是整个原型对象重写除外。实例被创建时有一个指向原型的指针，一旦原型被重写，实例没办法指向新的原型。</p>\n<pre><code>function Person(){\n}\nvar friend = new Person();\n\nPerson.prototype = {//整个原型被重写\nconstructor: Person,\nname : &quot;Nicholas&quot;,\nage : 29,\njob : &quot;Software Engineer&quot;,\nsayName : function () {\nalert(this.name);\n}\n};\nfriend.sayName(); //error\n</code></pre><h3 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h3><blockquote>\n<p>原型模式的重要性不仅体现在创建自定义类型方面，就连所有原生的引用类型，都是采用这种模式<br>创建的。所有原生引用类型（Object、Array、String，等等）都在其构造函数的原型上定义了方法。</p>\n</blockquote>\n<h3 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h3><ol>\n<li>它省略了为构造函数<strong>传递初始化参数</strong>这一环节，结果所有实例在<br>默认情况下都将取得相同的属性值.</li>\n<li><p>原型中所有属性是被很多实例<strong>共享</strong>的，这种共享对于函数非常合适。对于那些包含基本值的属性倒<br>也说得过去，然而，对于包含引用类型值的属性来说，问题就比较突出了.</p>\n<pre><code>function Person(){\n}\nPerson.prototype = {\nconstructor: Person,\nname : &quot;Nicholas&quot;,\nage : 29,\njob : &quot;Software Engineer&quot;,\nfriends : [&quot;Shelby&quot;, &quot;Court&quot;],\nsayName : function () {\nalert(this.name);\n}\n};\nvar person1 = new Person();\nvar person2 = new Person();\nperson1.friends.push(&quot;Van&quot;);\nalert(person1.friends); //&quot;Shelby,Court,Van&quot;\nalert(person2.friends); //&quot;Shelby,Court,Van&quot;\nalert(person1.friends === person2.friends); //true \n</code></pre></li>\n</ol>\n<h2 id=\"6-组合使用构造函数模式和原型模式\"><a href=\"#6-组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"6. 组合使用构造函数模式和原型模式\"></a>6. 组合使用构造函数模式和原型模式</h2><p><em>比较</em></p>\n<p>1、2两种方法，对于创建很多相同结构对象的时候，不会产生冗余代码；<br>构造函数相对于工厂模式的优势在于能够使用 constructor 属性 及 instanceof 操作符去识别对象。<code>instanceof比constructor更准确，在prototype被重写的情况下，constructor不能确定对象的类型。</code></p>\n<pre><code>alert(person1.constructor == Person); //true \nalert(person1 instanceof Object); //true \nalert(person1 instanceof Person); //true \n</code></pre><p>未完，待续…内容太多了 </p>\n"},{"title":"面试整理——一","toc":true,"comments":1,"date":"2018-11-22T03:16:37.000Z","_content":" # 左右布局（左定宽，右边自适应宽度）\n\n 写法一(利用calc)：\n  ```\n  //html\n    <div class=\"container\">\n        <div class=\"left\"></div>\n        <div class=\"content\"></div>\n    </div>\n//css\n    .container{\n            width:100%;\n            height:100%;\n            font-size:0;\n        }\n    .left{\n        background: orange;\n        width:220px;\n        height: 100%;\n        display: inline-block;\n    }\n    .content{\n        background: lightblue;\n        height: 100%;\n        width: calc(100% - 220px);\n        display: inline-block;\n    }\n  ```\n 利用css3 函数——calc， **注意：calc中的运算符前后要留白，否则不起作用**  。\n这里同样可以使用 float:left。\n\n 注意这里使用的 inline-block\n  > 使用inline-block会存在间隙问题，因为我们写标签时通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个。\n  >1. 取消换行可以解决间隙的问题（不推荐）；\n  >2. 设置 font-size:0;那么空白符也会变成0px；\n\n  写法二（浮动）：\n   ```\n     //html\n        <div class=\"container\">\n            <div class=\"left\"></div>\n            <div class=\"content\"></div>\n        </div>\n    //css\n        .container{\n            width:100%;\n            height:100%;\n        }\n        .left{\n            background: orange;\n            width:220px;\n            height:100%;\n            float: left;\n        }\n        .content{\n            background: lightblue;\n            margin-left: 220px;\n            height:100%;\n        }\n   \n   ```\n  写法三（浮动和负边距）：\n   ```\n     //html\n        <div class=\"container\">\n            <div class=\"left\"></div>\n            <div class=\"content\">\n                <div class=\"content-inner\"></div>\n            </div>\n        </div>\n    //css\n        .container{\n            width:100%;\n            height:100%;\n        }\n        .left{\n            background: orange;\n            width:220px;\n            height:100%;\n            float: left;\n            margin-right: -100%;\n        }\n        .content{\n            width: 100%;\n            float: left;\n            height: 100%;\n\n        }\n        .content-inner{\n            background: lightblue;\n            margin-left: 220px;\n            height:100%;\n        }\n   \n   ```\n\n# 盒子模型\n\n从外到内依次：margin>border>padding>content.\n\nbox-sizing:\ncontent-box（默认）:width=padding+content;\nborder-box:width=border+padding+content;\n>box-sizing: content-box 是W3C盒子模型;\n\n>box-sizing: border-box 是IE盒子模型\n\n# css画三角形\n\n            width:0;\n            height:0;\n            border:solid 20px transparent;\n            border-top-color: #000;\n\n**只要保证内容是空的，三角形的高就是边宽，只显示一边的颜色。**\n\n# 事件流\n ![事件流](/AnastasiaJ/uploads/事件流.jpg)\n “DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。\n\n“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：**addEventListener()和 removeEventListener()**。所有 DOM 节点中都包含这两个方法，并且它们都接受 3 个参数：要处\n理的事件名、作为事件处理程序的函数和**一个布尔值**。最后这个布尔值参数如果是 true，表示在捕获阶段调用事件处理程序；如果是 false，表示在冒泡阶段调用事件处理程序（**默认是冒泡**）。\n>IE对应的方法attachEvent()和 detachEvent()。，attachEvent()的第一个参数是\"onclick\"，而非 DOM 的 addEventListener()方法中的\"click\"。\n\n## 阻止冒泡的方法\n\n ```\n <div id=\"divOne\" onclick=\"alert('我是最外层');\">\n　　　　　　<div id=\"divTwo\" onclick=\"alert('我是中间层！')\">\n　　　　　　　　<a id=\"hr_three\" href=\"http://www.baidu.com\" onclick=\"alert('我是最里层！')\">点击我</a>\n　　　　　　</div>\n　　　　</div>\n \n ```\n 1. event.stopPropagation();\n\n```\n  <script type=\"text/javascript\">\n        $(function() {\n            $(\"#hr_three\").click(function(event) {\n                event.stopPropagation();\n            });\n        });\n    <script>\n```\n再点击“点击我”，会弹出：我是最里层，然后链接到百度\n\n 2. return false;\n\n ```\n 如果头部加入的是以下代码\n<script type=\"text/javascript\">\n$(function() {\n　　$(\"#hr_three\").click(function(event) {\n　　　　return false;\n　　});\n});\n<script> \n\n再点击“点击我”，会弹出：我是最里层，但不会执行链接到百度页面\n ```\n 3. event.preventDefault(); \n 事件处理过程中，不阻击事件冒泡，但阻击默认行为（它只执行所有弹框，却没有执行超链接跳转）\n \n\n# 事件委托\n>对“事件处理程序过多”问题的解决方案就是事件委托。事件委托利用了**事件冒泡**，只指定一个事\n件处理程序，就可以管理某一类型的所有事件。\n\n使用事件委托，只需在DOM 树中尽量最高的层次上添加一个事件处理程序，如下面的例子所示。\n```\n    var list = document.getElementById(\"myLinks\");\n    EventUtil.addHandler(list, \"click\", function(event){\n    event = EventUtil.getEvent(event);\n    var target = EventUtil.getTarget(event);\n    switch(target.id){\n    case \"doSomething\":\n        document.title = \"I changed the document's title\";\n        break;\n    case \"goSomewhere\":\n        location.href = \"http://www.wrox.com\";\n        break;\n    case \"sayHi\":\n        alert(\"hi\");\n        break;\n    }\n    }); \n```\n ----------\n那什么样的事件可以用事件委托，什么样的事件不可以用呢？\n\n适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。\n\n值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。\n\n不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。\n\n *开始被问到这个词的时候，脑子里的第一反应居然是事件绑定。。。画个小圈圈让自己牢牢记住！*\n\n # call,apply,bind\n\n 改变函数运行时this的指向。\n 具体区别和应用参考文章 \n  [call，apply，bind的用法与区别](https://www.cnblogs.com/Jade-Liu18831/p/9580410.html)\n\n# use strict\n## 为什么用严格模式\n 1. 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n 2. 消除代码运行的一些不安全之处，保证代码运行的安全；\n 3. 提高编译器效率，增加运行速度；\n 4. 为未来新版本的Javascript做好铺垫。\n\n## 如何调用\n### 针对单个脚本\n```\n    <script>\n　　　　\"use strict\";\n　　　　console.log(\"这是严格模式。\");\n　　</script>\n```\n### 针对单个函数\n \n ```\n <script>\n　　　　\"use strict\";\n　　　　console.log(\"这是严格模式。\");\n　　</script>\n ```\n ## 严格模式下与普通模式下有什么区别\n  ### 全局变量显式声明\n  在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。\n  ### 禁止this关键字指向全局对象\n  ```\n  function f(){\n　　　　return !this;\n　　} \n　　// 返回false，因为\"this\"指向全局对象，\"!this\"就是false\n　　function f(){ \n　　　　\"use strict\";\n　　　　return !this;\n　　} \n　　// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。\n```\n因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。\n```\nfunction f(){\n　　　　\"use strict\";\n　　　　this.a = 1;\n　　};\n　　f();// 报错，this未定义\n```\n### 禁止删除变量\n严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。\n```\n\"use strict\";\n　　var x;\n　　delete x; // 语法错误\n　　var o = Object.create(null, {'x': {\n　　　　　　value: 1,\n　　　　　　configurable: true\n　　}});\n　　delete o.x; // 删除成功\n```\n### 对象不能有重名的属性\n正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。\n\n```\n\"use strict\";\n　　var o = {\n　　　　p: 1,\n　　　　p: 2\n　　}; // 语法错误\n\n```\n### 函数不能有重名的参数\n正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。\n```\n\"use strict\";\n　　function f(a, a, b) { // 语法错误\n　　　　return ;\n　　}\n```\n\n# setTimeout(0)\n# if 里为否的情况\n# 对一个数组进行排序，奇数在前，偶数在后\n\n## 1.只用一个变量的方法\n\n```\nfunction sort(param){\n    let temp,arr=[...param];\n    for(let i=0,len=arr.length;i<len;i++){\n        if(arr[i]%2<1){\n            temp=arr[i];\n            for(let j=i;j<len;j++){\n                if(arr[j]%2>0){\n                    arr[i]=arr[j];\n                    arr[j]=temp;\n                    break;\n                }\n            }\n        }\n    }\n    return arr\n}\nconst arr=[0,2,4,5,6,7,9]\nconsole.log(sort(arr))\n```\n## 2.将奇、偶两种数分成两个数组，最后连接\n## 3.只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除\n\n# 对 ES6 有使用过哪些\n# 双等（==）和三等（===）的区别","source":"_posts/面试整理——一.md","raw":"---\ntitle: 面试整理——一\ntoc: true\ncomments: true\ncategories: css\ndate: 2018-11-22 11:16:37\ntags:\n    - 左右布局\n    - 盒子模型\n    - css画三角形\n\n---\n # 左右布局（左定宽，右边自适应宽度）\n\n 写法一(利用calc)：\n  ```\n  //html\n    <div class=\"container\">\n        <div class=\"left\"></div>\n        <div class=\"content\"></div>\n    </div>\n//css\n    .container{\n            width:100%;\n            height:100%;\n            font-size:0;\n        }\n    .left{\n        background: orange;\n        width:220px;\n        height: 100%;\n        display: inline-block;\n    }\n    .content{\n        background: lightblue;\n        height: 100%;\n        width: calc(100% - 220px);\n        display: inline-block;\n    }\n  ```\n 利用css3 函数——calc， **注意：calc中的运算符前后要留白，否则不起作用**  。\n这里同样可以使用 float:left。\n\n 注意这里使用的 inline-block\n  > 使用inline-block会存在间隙问题，因为我们写标签时通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个。\n  >1. 取消换行可以解决间隙的问题（不推荐）；\n  >2. 设置 font-size:0;那么空白符也会变成0px；\n\n  写法二（浮动）：\n   ```\n     //html\n        <div class=\"container\">\n            <div class=\"left\"></div>\n            <div class=\"content\"></div>\n        </div>\n    //css\n        .container{\n            width:100%;\n            height:100%;\n        }\n        .left{\n            background: orange;\n            width:220px;\n            height:100%;\n            float: left;\n        }\n        .content{\n            background: lightblue;\n            margin-left: 220px;\n            height:100%;\n        }\n   \n   ```\n  写法三（浮动和负边距）：\n   ```\n     //html\n        <div class=\"container\">\n            <div class=\"left\"></div>\n            <div class=\"content\">\n                <div class=\"content-inner\"></div>\n            </div>\n        </div>\n    //css\n        .container{\n            width:100%;\n            height:100%;\n        }\n        .left{\n            background: orange;\n            width:220px;\n            height:100%;\n            float: left;\n            margin-right: -100%;\n        }\n        .content{\n            width: 100%;\n            float: left;\n            height: 100%;\n\n        }\n        .content-inner{\n            background: lightblue;\n            margin-left: 220px;\n            height:100%;\n        }\n   \n   ```\n\n# 盒子模型\n\n从外到内依次：margin>border>padding>content.\n\nbox-sizing:\ncontent-box（默认）:width=padding+content;\nborder-box:width=border+padding+content;\n>box-sizing: content-box 是W3C盒子模型;\n\n>box-sizing: border-box 是IE盒子模型\n\n# css画三角形\n\n            width:0;\n            height:0;\n            border:solid 20px transparent;\n            border-top-color: #000;\n\n**只要保证内容是空的，三角形的高就是边宽，只显示一边的颜色。**\n\n# 事件流\n ![事件流](/AnastasiaJ/uploads/事件流.jpg)\n “DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。\n\n“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：**addEventListener()和 removeEventListener()**。所有 DOM 节点中都包含这两个方法，并且它们都接受 3 个参数：要处\n理的事件名、作为事件处理程序的函数和**一个布尔值**。最后这个布尔值参数如果是 true，表示在捕获阶段调用事件处理程序；如果是 false，表示在冒泡阶段调用事件处理程序（**默认是冒泡**）。\n>IE对应的方法attachEvent()和 detachEvent()。，attachEvent()的第一个参数是\"onclick\"，而非 DOM 的 addEventListener()方法中的\"click\"。\n\n## 阻止冒泡的方法\n\n ```\n <div id=\"divOne\" onclick=\"alert('我是最外层');\">\n　　　　　　<div id=\"divTwo\" onclick=\"alert('我是中间层！')\">\n　　　　　　　　<a id=\"hr_three\" href=\"http://www.baidu.com\" onclick=\"alert('我是最里层！')\">点击我</a>\n　　　　　　</div>\n　　　　</div>\n \n ```\n 1. event.stopPropagation();\n\n```\n  <script type=\"text/javascript\">\n        $(function() {\n            $(\"#hr_three\").click(function(event) {\n                event.stopPropagation();\n            });\n        });\n    <script>\n```\n再点击“点击我”，会弹出：我是最里层，然后链接到百度\n\n 2. return false;\n\n ```\n 如果头部加入的是以下代码\n<script type=\"text/javascript\">\n$(function() {\n　　$(\"#hr_three\").click(function(event) {\n　　　　return false;\n　　});\n});\n<script> \n\n再点击“点击我”，会弹出：我是最里层，但不会执行链接到百度页面\n ```\n 3. event.preventDefault(); \n 事件处理过程中，不阻击事件冒泡，但阻击默认行为（它只执行所有弹框，却没有执行超链接跳转）\n \n\n# 事件委托\n>对“事件处理程序过多”问题的解决方案就是事件委托。事件委托利用了**事件冒泡**，只指定一个事\n件处理程序，就可以管理某一类型的所有事件。\n\n使用事件委托，只需在DOM 树中尽量最高的层次上添加一个事件处理程序，如下面的例子所示。\n```\n    var list = document.getElementById(\"myLinks\");\n    EventUtil.addHandler(list, \"click\", function(event){\n    event = EventUtil.getEvent(event);\n    var target = EventUtil.getTarget(event);\n    switch(target.id){\n    case \"doSomething\":\n        document.title = \"I changed the document's title\";\n        break;\n    case \"goSomewhere\":\n        location.href = \"http://www.wrox.com\";\n        break;\n    case \"sayHi\":\n        alert(\"hi\");\n        break;\n    }\n    }); \n```\n ----------\n那什么样的事件可以用事件委托，什么样的事件不可以用呢？\n\n适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。\n\n值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。\n\n不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。\n\n *开始被问到这个词的时候，脑子里的第一反应居然是事件绑定。。。画个小圈圈让自己牢牢记住！*\n\n # call,apply,bind\n\n 改变函数运行时this的指向。\n 具体区别和应用参考文章 \n  [call，apply，bind的用法与区别](https://www.cnblogs.com/Jade-Liu18831/p/9580410.html)\n\n# use strict\n## 为什么用严格模式\n 1. 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n 2. 消除代码运行的一些不安全之处，保证代码运行的安全；\n 3. 提高编译器效率，增加运行速度；\n 4. 为未来新版本的Javascript做好铺垫。\n\n## 如何调用\n### 针对单个脚本\n```\n    <script>\n　　　　\"use strict\";\n　　　　console.log(\"这是严格模式。\");\n　　</script>\n```\n### 针对单个函数\n \n ```\n <script>\n　　　　\"use strict\";\n　　　　console.log(\"这是严格模式。\");\n　　</script>\n ```\n ## 严格模式下与普通模式下有什么区别\n  ### 全局变量显式声明\n  在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。\n  ### 禁止this关键字指向全局对象\n  ```\n  function f(){\n　　　　return !this;\n　　} \n　　// 返回false，因为\"this\"指向全局对象，\"!this\"就是false\n　　function f(){ \n　　　　\"use strict\";\n　　　　return !this;\n　　} \n　　// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。\n```\n因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。\n```\nfunction f(){\n　　　　\"use strict\";\n　　　　this.a = 1;\n　　};\n　　f();// 报错，this未定义\n```\n### 禁止删除变量\n严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。\n```\n\"use strict\";\n　　var x;\n　　delete x; // 语法错误\n　　var o = Object.create(null, {'x': {\n　　　　　　value: 1,\n　　　　　　configurable: true\n　　}});\n　　delete o.x; // 删除成功\n```\n### 对象不能有重名的属性\n正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。\n\n```\n\"use strict\";\n　　var o = {\n　　　　p: 1,\n　　　　p: 2\n　　}; // 语法错误\n\n```\n### 函数不能有重名的参数\n正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。\n```\n\"use strict\";\n　　function f(a, a, b) { // 语法错误\n　　　　return ;\n　　}\n```\n\n# setTimeout(0)\n# if 里为否的情况\n# 对一个数组进行排序，奇数在前，偶数在后\n\n## 1.只用一个变量的方法\n\n```\nfunction sort(param){\n    let temp,arr=[...param];\n    for(let i=0,len=arr.length;i<len;i++){\n        if(arr[i]%2<1){\n            temp=arr[i];\n            for(let j=i;j<len;j++){\n                if(arr[j]%2>0){\n                    arr[i]=arr[j];\n                    arr[j]=temp;\n                    break;\n                }\n            }\n        }\n    }\n    return arr\n}\nconst arr=[0,2,4,5,6,7,9]\nconsole.log(sort(arr))\n```\n## 2.将奇、偶两种数分成两个数组，最后连接\n## 3.只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除\n\n# 对 ES6 有使用过哪些\n# 双等（==）和三等（===）的区别","slug":"面试整理——一","published":1,"updated":"2019-12-24T03:04:37.367Z","layout":"post","photos":[],"link":"","_id":"ckaxser7f0016cstongxgwwy0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"左右布局（左定宽，右边自适应宽度）\"><a href=\"#左右布局（左定宽，右边自适应宽度）\" class=\"headerlink\" title=\"左右布局（左定宽，右边自适应宽度）\"></a>左右布局（左定宽，右边自适应宽度）</h1><p> 写法一(利用calc)：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //html</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">//css</span><br><span class=\"line\">    .container&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:100%;</span><br><span class=\"line\">            font-size:0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    .left&#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">        width:220px;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content&#123;</span><br><span class=\"line\">        background: lightblue;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        width: calc(100% - 220px);</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p> 利用css3 函数——calc， <strong>注意：calc中的运算符前后要留白，否则不起作用</strong>  。<br>这里同样可以使用 float:left。</p>\n<p> 注意这里使用的 inline-block</p>\n<blockquote>\n<p>使用inline-block会存在间隙问题，因为我们写标签时通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个。</p>\n<ol>\n<li>取消换行可以解决间隙的问题（不推荐）；</li>\n<li>设置 font-size:0;那么空白符也会变成0px；</li>\n</ol>\n</blockquote>\n<p>  写法二（浮动）：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //html</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">//css</span><br><span class=\"line\">    .container&#123;</span><br><span class=\"line\">        width:100%;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left&#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">        width:220px;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content&#123;</span><br><span class=\"line\">        background: lightblue;</span><br><span class=\"line\">        margin-left: 220px;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>  写法三（浮动和负边距）：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //html</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;content-inner&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">//css</span><br><span class=\"line\">    .container&#123;</span><br><span class=\"line\">        width:100%;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left&#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">        width:220px;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        margin-right: -100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content&#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content-inner&#123;</span><br><span class=\"line\">        background: lightblue;</span><br><span class=\"line\">        margin-left: 220px;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h1><p>从外到内依次：margin&gt;border&gt;padding&gt;content.</p>\n<p>box-sizing:<br>content-box（默认）:width=padding+content;<br>border-box:width=border+padding+content;</p>\n<blockquote>\n<p>box-sizing: content-box 是W3C盒子模型;</p>\n</blockquote>\n<blockquote>\n<p>box-sizing: border-box 是IE盒子模型</p>\n</blockquote>\n<h1 id=\"css画三角形\"><a href=\"#css画三角形\" class=\"headerlink\" title=\"css画三角形\"></a>css画三角形</h1><pre><code>width:0;\nheight:0;\nborder:solid 20px transparent;\nborder-top-color: #000;\n</code></pre><p><strong>只要保证内容是空的，三角形的高就是边宽，只显示一边的颜色。</strong></p>\n<h1 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h1><p> <img src=\"/AnastasiaJ/uploads/事件流.jpg\" alt=\"事件流\"><br> “DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。</p>\n<p>“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：<strong>addEventListener()和 removeEventListener()</strong>。所有 DOM 节点中都包含这两个方法，并且它们都接受 3 个参数：要处<br>理的事件名、作为事件处理程序的函数和<strong>一个布尔值</strong>。最后这个布尔值参数如果是 true，表示在捕获阶段调用事件处理程序；如果是 false，表示在冒泡阶段调用事件处理程序（<strong>默认是冒泡</strong>）。</p>\n<blockquote>\n<p>IE对应的方法attachEvent()和 detachEvent()。，attachEvent()的第一个参数是”onclick”，而非 DOM 的 addEventListener()方法中的”click”。</p>\n</blockquote>\n<h2 id=\"阻止冒泡的方法\"><a href=\"#阻止冒泡的方法\" class=\"headerlink\" title=\"阻止冒泡的方法\"></a>阻止冒泡的方法</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;divOne&quot; onclick=&quot;alert(&apos;我是最外层&apos;);&quot;&gt;</span><br><span class=\"line\">　　　　　　&lt;div id=&quot;divTwo&quot; onclick=&quot;alert(&apos;我是中间层！&apos;)&quot;&gt;</span><br><span class=\"line\">　　　　　　　　&lt;a id=&quot;hr_three&quot; href=&quot;http://www.baidu.com&quot; onclick=&quot;alert(&apos;我是最里层！&apos;)&quot;&gt;点击我&lt;/a&gt;</span><br><span class=\"line\">　　　　　　&lt;/div&gt;</span><br><span class=\"line\">　　　　&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>event.stopPropagation();</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">      $(function() &#123;</span><br><span class=\"line\">          $(&quot;#hr_three&quot;).click(function(event) &#123;</span><br><span class=\"line\">              event.stopPropagation();</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &lt;script&gt;</span><br></pre></td></tr></table></figure>\n<p>再点击“点击我”，会弹出：我是最里层，然后链接到百度</p>\n<ol start=\"2\">\n<li><p>return false;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 如果头部加入的是以下代码</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">$(function() &#123;</span><br><span class=\"line\">　　$(&quot;#hr_three&quot;).click(function(event) &#123;</span><br><span class=\"line\">　　　　return false;</span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">再点击“点击我”，会弹出：我是最里层，但不会执行链接到百度页面</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>event.preventDefault();<br>事件处理过程中，不阻击事件冒泡，但阻击默认行为（它只执行所有弹框，却没有执行超链接跳转）</p>\n</li>\n</ol>\n<h1 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h1><blockquote>\n<p>对“事件处理程序过多”问题的解决方案就是事件委托。事件委托利用了<strong>事件冒泡</strong>，只指定一个事<br>件处理程序，就可以管理某一类型的所有事件。</p>\n</blockquote>\n<p>使用事件委托，只需在DOM 树中尽量最高的层次上添加一个事件处理程序，如下面的例子所示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var list = document.getElementById(&quot;myLinks&quot;);</span><br><span class=\"line\">EventUtil.addHandler(list, &quot;click&quot;, function(event)&#123;</span><br><span class=\"line\">event = EventUtil.getEvent(event);</span><br><span class=\"line\">var target = EventUtil.getTarget(event);</span><br><span class=\"line\">switch(target.id)&#123;</span><br><span class=\"line\">case &quot;doSomething&quot;:</span><br><span class=\"line\">    document.title = &quot;I changed the document&apos;s title&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case &quot;goSomewhere&quot;:</span><br><span class=\"line\">    location.href = &quot;http://www.wrox.com&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case &quot;sayHi&quot;:</span><br><span class=\"line\">    alert(&quot;hi&quot;);</span><br><span class=\"line\">    break;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>那什么样的事件可以用事件委托，什么样的事件不可以用呢？</p>\n<p>适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。</p>\n<p>值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。</p>\n<p>不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。</p>\n<p> <em>开始被问到这个词的时候，脑子里的第一反应居然是事件绑定。。。画个小圈圈让自己牢牢记住！</em></p>\n<h1 id=\"call-apply-bind\"><a href=\"#call-apply-bind\" class=\"headerlink\" title=\"call,apply,bind\"></a>call,apply,bind</h1><p> 改变函数运行时this的指向。<br> 具体区别和应用参考文章<br>  <a href=\"https://www.cnblogs.com/Jade-Liu18831/p/9580410.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">call，apply，bind的用法与区别</a></p>\n<h1 id=\"use-strict\"><a href=\"#use-strict\" class=\"headerlink\" title=\"use strict\"></a>use strict</h1><h2 id=\"为什么用严格模式\"><a href=\"#为什么用严格模式\" class=\"headerlink\" title=\"为什么用严格模式\"></a>为什么用严格模式</h2><ol>\n<li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的Javascript做好铺垫。</li>\n</ol>\n<h2 id=\"如何调用\"><a href=\"#如何调用\" class=\"headerlink\" title=\"如何调用\"></a>如何调用</h2><h3 id=\"针对单个脚本\"><a href=\"#针对单个脚本\" class=\"headerlink\" title=\"针对单个脚本\"></a>针对单个脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">　　　　&quot;use strict&quot;;</span><br><span class=\"line\">　　　　console.log(&quot;这是严格模式。&quot;);</span><br><span class=\"line\">　　&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"针对单个函数\"><a href=\"#针对单个函数\" class=\"headerlink\" title=\"针对单个函数\"></a>针对单个函数</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">　　　　&quot;use strict&quot;;</span><br><span class=\"line\">　　　　console.log(&quot;这是严格模式。&quot;);</span><br><span class=\"line\">　　&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"严格模式下与普通模式下有什么区别\"><a href=\"#严格模式下与普通模式下有什么区别\" class=\"headerlink\" title=\"严格模式下与普通模式下有什么区别\"></a>严格模式下与普通模式下有什么区别</h2><h3 id=\"全局变量显式声明\"><a href=\"#全局变量显式声明\" class=\"headerlink\" title=\"全局变量显式声明\"></a>全局变量显式声明</h3><p>  在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p>\n<h3 id=\"禁止this关键字指向全局对象\"><a href=\"#禁止this关键字指向全局对象\" class=\"headerlink\" title=\"禁止this关键字指向全局对象\"></a>禁止this关键字指向全局对象</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">　　　　return !this;</span><br><span class=\"line\">　　&#125; </span><br><span class=\"line\">　　// 返回false，因为&quot;this&quot;指向全局对象，&quot;!this&quot;就是false</span><br><span class=\"line\">　　function f()&#123; </span><br><span class=\"line\">　　　　&quot;use strict&quot;;</span><br><span class=\"line\">　　　　return !this;</span><br><span class=\"line\">　　&#125; </span><br><span class=\"line\">　　// 返回true，因为严格模式下，this的值为undefined，所以&quot;!this&quot;为true。</span><br></pre></td></tr></table></figure>\n<p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">　　　　&quot;use strict&quot;;</span><br><span class=\"line\">　　　　this.a = 1;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　f();// 报错，this未定义</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"禁止删除变量\"><a href=\"#禁止删除变量\" class=\"headerlink\" title=\"禁止删除变量\"></a>禁止删除变量</h3><p>严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">　　var x;</span><br><span class=\"line\">　　delete x; // 语法错误</span><br><span class=\"line\">　　var o = Object.create(null, &#123;&apos;x&apos;: &#123;</span><br><span class=\"line\">　　　　　　value: 1,</span><br><span class=\"line\">　　　　　　configurable: true</span><br><span class=\"line\">　　&#125;&#125;);</span><br><span class=\"line\">　　delete o.x; // 删除成功</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"对象不能有重名的属性\"><a href=\"#对象不能有重名的属性\" class=\"headerlink\" title=\"对象不能有重名的属性\"></a>对象不能有重名的属性</h3><p>正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">　　var o = &#123;</span><br><span class=\"line\">　　　　p: 1,</span><br><span class=\"line\">　　　　p: 2</span><br><span class=\"line\">　　&#125;; // 语法错误</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数不能有重名的参数\"><a href=\"#函数不能有重名的参数\" class=\"headerlink\" title=\"函数不能有重名的参数\"></a>函数不能有重名的参数</h3><p>正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">　　function f(a, a, b) &#123; // 语法错误</span><br><span class=\"line\">　　　　return ;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"setTimeout-0\"><a href=\"#setTimeout-0\" class=\"headerlink\" title=\"setTimeout(0)\"></a>setTimeout(0)</h1><h1 id=\"if-里为否的情况\"><a href=\"#if-里为否的情况\" class=\"headerlink\" title=\"if 里为否的情况\"></a>if 里为否的情况</h1><h1 id=\"对一个数组进行排序，奇数在前，偶数在后\"><a href=\"#对一个数组进行排序，奇数在前，偶数在后\" class=\"headerlink\" title=\"对一个数组进行排序，奇数在前，偶数在后\"></a>对一个数组进行排序，奇数在前，偶数在后</h1><h2 id=\"1-只用一个变量的方法\"><a href=\"#1-只用一个变量的方法\" class=\"headerlink\" title=\"1.只用一个变量的方法\"></a>1.只用一个变量的方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sort(param)&#123;</span><br><span class=\"line\">    let temp,arr=[...param];</span><br><span class=\"line\">    for(let i=0,len=arr.length;i&lt;len;i++)&#123;</span><br><span class=\"line\">        if(arr[i]%2&lt;1)&#123;</span><br><span class=\"line\">            temp=arr[i];</span><br><span class=\"line\">            for(let j=i;j&lt;len;j++)&#123;</span><br><span class=\"line\">                if(arr[j]%2&gt;0)&#123;</span><br><span class=\"line\">                    arr[i]=arr[j];</span><br><span class=\"line\">                    arr[j]=temp;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const arr=[0,2,4,5,6,7,9]</span><br><span class=\"line\">console.log(sort(arr))</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-将奇、偶两种数分成两个数组，最后连接\"><a href=\"#2-将奇、偶两种数分成两个数组，最后连接\" class=\"headerlink\" title=\"2.将奇、偶两种数分成两个数组，最后连接\"></a>2.将奇、偶两种数分成两个数组，最后连接</h2><h2 id=\"3-只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除\"><a href=\"#3-只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除\" class=\"headerlink\" title=\"3.只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除\"></a>3.只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除</h2><h1 id=\"对-ES6-有使用过哪些\"><a href=\"#对-ES6-有使用过哪些\" class=\"headerlink\" title=\"对 ES6 有使用过哪些\"></a>对 ES6 有使用过哪些</h1><h1 id=\"双等（-）和三等（-）的区别\"><a href=\"#双等（-）和三等（-）的区别\" class=\"headerlink\" title=\"双等（==）和三等（===）的区别\"></a>双等（==）和三等（===）的区别</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"左右布局（左定宽，右边自适应宽度）\"><a href=\"#左右布局（左定宽，右边自适应宽度）\" class=\"headerlink\" title=\"左右布局（左定宽，右边自适应宽度）\"></a>左右布局（左定宽，右边自适应宽度）</h1><p> 写法一(利用calc)：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //html</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">//css</span><br><span class=\"line\">    .container&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:100%;</span><br><span class=\"line\">            font-size:0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    .left&#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">        width:220px;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content&#123;</span><br><span class=\"line\">        background: lightblue;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        width: calc(100% - 220px);</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p> 利用css3 函数——calc， <strong>注意：calc中的运算符前后要留白，否则不起作用</strong>  。<br>这里同样可以使用 float:left。</p>\n<p> 注意这里使用的 inline-block</p>\n<blockquote>\n<p>使用inline-block会存在间隙问题，因为我们写标签时通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个。</p>\n<ol>\n<li>取消换行可以解决间隙的问题（不推荐）；</li>\n<li>设置 font-size:0;那么空白符也会变成0px；</li>\n</ol>\n</blockquote>\n<p>  写法二（浮动）：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //html</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">//css</span><br><span class=\"line\">    .container&#123;</span><br><span class=\"line\">        width:100%;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left&#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">        width:220px;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content&#123;</span><br><span class=\"line\">        background: lightblue;</span><br><span class=\"line\">        margin-left: 220px;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>  写法三（浮动和负边距）：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //html</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;content-inner&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">//css</span><br><span class=\"line\">    .container&#123;</span><br><span class=\"line\">        width:100%;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .left&#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">        width:220px;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        margin-right: -100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content&#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .content-inner&#123;</span><br><span class=\"line\">        background: lightblue;</span><br><span class=\"line\">        margin-left: 220px;</span><br><span class=\"line\">        height:100%;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h1><p>从外到内依次：margin&gt;border&gt;padding&gt;content.</p>\n<p>box-sizing:<br>content-box（默认）:width=padding+content;<br>border-box:width=border+padding+content;</p>\n<blockquote>\n<p>box-sizing: content-box 是W3C盒子模型;</p>\n</blockquote>\n<blockquote>\n<p>box-sizing: border-box 是IE盒子模型</p>\n</blockquote>\n<h1 id=\"css画三角形\"><a href=\"#css画三角形\" class=\"headerlink\" title=\"css画三角形\"></a>css画三角形</h1><pre><code>width:0;\nheight:0;\nborder:solid 20px transparent;\nborder-top-color: #000;\n</code></pre><p><strong>只要保证内容是空的，三角形的高就是边宽，只显示一边的颜色。</strong></p>\n<h1 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h1><p> <img src=\"/AnastasiaJ/uploads/事件流.jpg\" alt=\"事件流\"><br> “DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。</p>\n<p>“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：<strong>addEventListener()和 removeEventListener()</strong>。所有 DOM 节点中都包含这两个方法，并且它们都接受 3 个参数：要处<br>理的事件名、作为事件处理程序的函数和<strong>一个布尔值</strong>。最后这个布尔值参数如果是 true，表示在捕获阶段调用事件处理程序；如果是 false，表示在冒泡阶段调用事件处理程序（<strong>默认是冒泡</strong>）。</p>\n<blockquote>\n<p>IE对应的方法attachEvent()和 detachEvent()。，attachEvent()的第一个参数是”onclick”，而非 DOM 的 addEventListener()方法中的”click”。</p>\n</blockquote>\n<h2 id=\"阻止冒泡的方法\"><a href=\"#阻止冒泡的方法\" class=\"headerlink\" title=\"阻止冒泡的方法\"></a>阻止冒泡的方法</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;divOne&quot; onclick=&quot;alert(&apos;我是最外层&apos;);&quot;&gt;</span><br><span class=\"line\">　　　　　　&lt;div id=&quot;divTwo&quot; onclick=&quot;alert(&apos;我是中间层！&apos;)&quot;&gt;</span><br><span class=\"line\">　　　　　　　　&lt;a id=&quot;hr_three&quot; href=&quot;http://www.baidu.com&quot; onclick=&quot;alert(&apos;我是最里层！&apos;)&quot;&gt;点击我&lt;/a&gt;</span><br><span class=\"line\">　　　　　　&lt;/div&gt;</span><br><span class=\"line\">　　　　&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>event.stopPropagation();</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">      $(function() &#123;</span><br><span class=\"line\">          $(&quot;#hr_three&quot;).click(function(event) &#123;</span><br><span class=\"line\">              event.stopPropagation();</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &lt;script&gt;</span><br></pre></td></tr></table></figure>\n<p>再点击“点击我”，会弹出：我是最里层，然后链接到百度</p>\n<ol start=\"2\">\n<li><p>return false;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 如果头部加入的是以下代码</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">$(function() &#123;</span><br><span class=\"line\">　　$(&quot;#hr_three&quot;).click(function(event) &#123;</span><br><span class=\"line\">　　　　return false;</span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">再点击“点击我”，会弹出：我是最里层，但不会执行链接到百度页面</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>event.preventDefault();<br>事件处理过程中，不阻击事件冒泡，但阻击默认行为（它只执行所有弹框，却没有执行超链接跳转）</p>\n</li>\n</ol>\n<h1 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h1><blockquote>\n<p>对“事件处理程序过多”问题的解决方案就是事件委托。事件委托利用了<strong>事件冒泡</strong>，只指定一个事<br>件处理程序，就可以管理某一类型的所有事件。</p>\n</blockquote>\n<p>使用事件委托，只需在DOM 树中尽量最高的层次上添加一个事件处理程序，如下面的例子所示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var list = document.getElementById(&quot;myLinks&quot;);</span><br><span class=\"line\">EventUtil.addHandler(list, &quot;click&quot;, function(event)&#123;</span><br><span class=\"line\">event = EventUtil.getEvent(event);</span><br><span class=\"line\">var target = EventUtil.getTarget(event);</span><br><span class=\"line\">switch(target.id)&#123;</span><br><span class=\"line\">case &quot;doSomething&quot;:</span><br><span class=\"line\">    document.title = &quot;I changed the document&apos;s title&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case &quot;goSomewhere&quot;:</span><br><span class=\"line\">    location.href = &quot;http://www.wrox.com&quot;;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case &quot;sayHi&quot;:</span><br><span class=\"line\">    alert(&quot;hi&quot;);</span><br><span class=\"line\">    break;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>那什么样的事件可以用事件委托，什么样的事件不可以用呢？</p>\n<p>适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。</p>\n<p>值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。</p>\n<p>不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。</p>\n<p> <em>开始被问到这个词的时候，脑子里的第一反应居然是事件绑定。。。画个小圈圈让自己牢牢记住！</em></p>\n<h1 id=\"call-apply-bind\"><a href=\"#call-apply-bind\" class=\"headerlink\" title=\"call,apply,bind\"></a>call,apply,bind</h1><p> 改变函数运行时this的指向。<br> 具体区别和应用参考文章<br>  <a href=\"https://www.cnblogs.com/Jade-Liu18831/p/9580410.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">call，apply，bind的用法与区别</a></p>\n<h1 id=\"use-strict\"><a href=\"#use-strict\" class=\"headerlink\" title=\"use strict\"></a>use strict</h1><h2 id=\"为什么用严格模式\"><a href=\"#为什么用严格模式\" class=\"headerlink\" title=\"为什么用严格模式\"></a>为什么用严格模式</h2><ol>\n<li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的Javascript做好铺垫。</li>\n</ol>\n<h2 id=\"如何调用\"><a href=\"#如何调用\" class=\"headerlink\" title=\"如何调用\"></a>如何调用</h2><h3 id=\"针对单个脚本\"><a href=\"#针对单个脚本\" class=\"headerlink\" title=\"针对单个脚本\"></a>针对单个脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">　　　　&quot;use strict&quot;;</span><br><span class=\"line\">　　　　console.log(&quot;这是严格模式。&quot;);</span><br><span class=\"line\">　　&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"针对单个函数\"><a href=\"#针对单个函数\" class=\"headerlink\" title=\"针对单个函数\"></a>针对单个函数</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">　　　　&quot;use strict&quot;;</span><br><span class=\"line\">　　　　console.log(&quot;这是严格模式。&quot;);</span><br><span class=\"line\">　　&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"严格模式下与普通模式下有什么区别\"><a href=\"#严格模式下与普通模式下有什么区别\" class=\"headerlink\" title=\"严格模式下与普通模式下有什么区别\"></a>严格模式下与普通模式下有什么区别</h2><h3 id=\"全局变量显式声明\"><a href=\"#全局变量显式声明\" class=\"headerlink\" title=\"全局变量显式声明\"></a>全局变量显式声明</h3><p>  在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p>\n<h3 id=\"禁止this关键字指向全局对象\"><a href=\"#禁止this关键字指向全局对象\" class=\"headerlink\" title=\"禁止this关键字指向全局对象\"></a>禁止this关键字指向全局对象</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">　　　　return !this;</span><br><span class=\"line\">　　&#125; </span><br><span class=\"line\">　　// 返回false，因为&quot;this&quot;指向全局对象，&quot;!this&quot;就是false</span><br><span class=\"line\">　　function f()&#123; </span><br><span class=\"line\">　　　　&quot;use strict&quot;;</span><br><span class=\"line\">　　　　return !this;</span><br><span class=\"line\">　　&#125; </span><br><span class=\"line\">　　// 返回true，因为严格模式下，this的值为undefined，所以&quot;!this&quot;为true。</span><br></pre></td></tr></table></figure>\n<p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">　　　　&quot;use strict&quot;;</span><br><span class=\"line\">　　　　this.a = 1;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">　　f();// 报错，this未定义</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"禁止删除变量\"><a href=\"#禁止删除变量\" class=\"headerlink\" title=\"禁止删除变量\"></a>禁止删除变量</h3><p>严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">　　var x;</span><br><span class=\"line\">　　delete x; // 语法错误</span><br><span class=\"line\">　　var o = Object.create(null, &#123;&apos;x&apos;: &#123;</span><br><span class=\"line\">　　　　　　value: 1,</span><br><span class=\"line\">　　　　　　configurable: true</span><br><span class=\"line\">　　&#125;&#125;);</span><br><span class=\"line\">　　delete o.x; // 删除成功</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"对象不能有重名的属性\"><a href=\"#对象不能有重名的属性\" class=\"headerlink\" title=\"对象不能有重名的属性\"></a>对象不能有重名的属性</h3><p>正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">　　var o = &#123;</span><br><span class=\"line\">　　　　p: 1,</span><br><span class=\"line\">　　　　p: 2</span><br><span class=\"line\">　　&#125;; // 语法错误</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数不能有重名的参数\"><a href=\"#函数不能有重名的参数\" class=\"headerlink\" title=\"函数不能有重名的参数\"></a>函数不能有重名的参数</h3><p>正常模式下，如果函数有多个重名的参数，可以用arguments[i]读取。严格模式下，这属于语法错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">　　function f(a, a, b) &#123; // 语法错误</span><br><span class=\"line\">　　　　return ;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"setTimeout-0\"><a href=\"#setTimeout-0\" class=\"headerlink\" title=\"setTimeout(0)\"></a>setTimeout(0)</h1><h1 id=\"if-里为否的情况\"><a href=\"#if-里为否的情况\" class=\"headerlink\" title=\"if 里为否的情况\"></a>if 里为否的情况</h1><h1 id=\"对一个数组进行排序，奇数在前，偶数在后\"><a href=\"#对一个数组进行排序，奇数在前，偶数在后\" class=\"headerlink\" title=\"对一个数组进行排序，奇数在前，偶数在后\"></a>对一个数组进行排序，奇数在前，偶数在后</h1><h2 id=\"1-只用一个变量的方法\"><a href=\"#1-只用一个变量的方法\" class=\"headerlink\" title=\"1.只用一个变量的方法\"></a>1.只用一个变量的方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sort(param)&#123;</span><br><span class=\"line\">    let temp,arr=[...param];</span><br><span class=\"line\">    for(let i=0,len=arr.length;i&lt;len;i++)&#123;</span><br><span class=\"line\">        if(arr[i]%2&lt;1)&#123;</span><br><span class=\"line\">            temp=arr[i];</span><br><span class=\"line\">            for(let j=i;j&lt;len;j++)&#123;</span><br><span class=\"line\">                if(arr[j]%2&gt;0)&#123;</span><br><span class=\"line\">                    arr[i]=arr[j];</span><br><span class=\"line\">                    arr[j]=temp;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const arr=[0,2,4,5,6,7,9]</span><br><span class=\"line\">console.log(sort(arr))</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-将奇、偶两种数分成两个数组，最后连接\"><a href=\"#2-将奇、偶两种数分成两个数组，最后连接\" class=\"headerlink\" title=\"2.将奇、偶两种数分成两个数组，最后连接\"></a>2.将奇、偶两种数分成两个数组，最后连接</h2><h2 id=\"3-只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除\"><a href=\"#3-只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除\" class=\"headerlink\" title=\"3.只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除\"></a>3.只遍历一次，将偶数push到数组最后，原来的位置用特殊标记占位，最后filter将特殊符号去除</h2><h1 id=\"对-ES6-有使用过哪些\"><a href=\"#对-ES6-有使用过哪些\" class=\"headerlink\" title=\"对 ES6 有使用过哪些\"></a>对 ES6 有使用过哪些</h1><h1 id=\"双等（-）和三等（-）的区别\"><a href=\"#双等（-）和三等（-）的区别\" class=\"headerlink\" title=\"双等（==）和三等（===）的区别\"></a>双等（==）和三等（===）的区别</h1>"},{"title":"拖拽组件：react-dnd","toc":true,"comments":0,"date":"2018-12-19T08:25:47.000Z","_content":" > 从昨天下午在弄一个关于拖拽的问题，实在有点心烦，先暂停下来，认真梳理一下关于这个组件的知识。\n\n---------------\n全文参考了silkshdow的文章， [原文地址](https://phoebecodespace.github.io/2018/05/03/react-dnd-guide/)\n\n# 核心API\n - DragSource 用于包装你需要拖动的组件，使组件能够被拖拽（make it draggable）\n - DropTarget 用于包装接收拖拽元素的组件，使组件能够放置（dropped on it）\n - DragDropContex 用于包装拖拽根组件，DragSource 和 DropTarget 都需要包裹在DragDropContex内\n - DragDropContextProvider 与 DragDropContex 类似，用 DragDropContextProvider 元素包裹拖拽根组件。\n\n# API参数介绍\n## DragSource(type, spec, collect)\n## DropTarget(type, spec, collect)\n\n  1. type: 拖拽类型，必填\n  2. spec: 拖拽事件的方法对象，必填。\n  3. collect: 把拖拽过程中需要信息注入组件的 props，接收两个参数 connect and monitor，必填。\n  \n### type\n 当 source组件的type 和 target组件的type 一致时，target组件可以接受source组件。\n\ntype的类型可以是 string，symbol，也可以是用一个函数来返回该组件的其他 props\n\n### spec\nspec定义特定方法的对象，如 source组件的spec 可以定义 `拖动` 相关的事件，target组件的spec 可以定义 `放置` 相关的事件，具体列表：\n\n#### 1. DragSource specObj\n - beginDrag(props, monitor, component): 拖动开始时触发的事件，必须。返回跟props相关的对象。\n - endDrag(props, monitor, component): 拖动结束时触发的事件，可选。\n - canDrag(props, monitor): 当前是否可以拖拽的事件，可选。\n - isDragging(props, monitor): 拖拽时触发的事件，可选。\n        ```\n        // Box.jsx\n        const sourceSpec = {\n            beginDrag(props, monitor, component){\n            // 返回需要注入的属性\n            return {\n                id: props.id\n            }\n            },\n            endDrag(props, monitor, component){\n            // ..\n            },\n            canDrag(props, monitor){\n            // ..\n            },\n            isDragging(props, monitor){\n            // ..\n            }\n        }\n        @DragSource(ItemTypes.BOX, sourceSpec, collect)\n        \n```\n\n#### 2. DropTarget specObj\n - drop(props, monitor, component) 组件放下时触发的事件，可选。\n - hover(props, monitor, component) 组件在DropTarget上方时响应的事件，可选。\n - canDrop(props, monitor) 组件可以被放置时触发的事件，可选。\n\n    ```\n        // Dustbin.jsx\n        const targetSpec = {\n        drop(props, monitor, component){\n            // ..\n        },\n        hover(props, monitor, component){\n            // ..\n        },\n        canDrop(props, monitor){\n            // ..\n        }\n        }\n        @DropTarget(ItemTypes.BOX, targetSpec, collect)\n    ```\n\n#### 3.  specObj 对象方法相关参数\n- props： 组件当前的props\n- monitor：查询当前的拖拽状态，比如当前拖拽的item和它的type，当前拖拽的offsets，当前是否dropped。具体获取方法，参看collect 参数 monitor 部分\n    - source组件 的 monitor 参数是 DragSourceMonitor 的实例\n    - target组件 的 monitor 参数是 DropTargetMonitor 的实例\n- component：当前组件实例\n#### 4. collect\ncollect 是一个函数，默认有两个参数：connect 和 monitor。collect函数将`返回一个对象`，这个对象会注入到组件的 `props` 中，也就是说，我们可以通过 this.props 获取collect返回的所有属性。 \n *传递参数时需要，项目中很多地方会需要知道当前拖拽的相关数据，很有用*\n#### 5. 参数 connect\n - source组件 collect 中 connect是 DragSourceConnector的实例，它内置了两个方法：`dragSource()` 和 `dragPreview()`。dragSource()返回一个方法，将source组件传入这个方法，可以将 source DOM 和 React DnD backend 连接起来；dragPreview() 返回一个方法，你可以传入节点，作为拖拽预览时的角色。\n - target组件 collect 中 connect是 DropTargetConnector的实例，内置的方法` dropTarget()` 对应 dragSource()，返回可以将 drop target 和 React DnD backend 连接起来的方法。\n\n  ```\n  // Box.jsx\n    @DragSource(ItemTypes.BOX, sourceSpec,(connect)=>({\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    }))\n    export default class Box {\n    render() {\n        const { connectDragSource } = this.props\n        return connectDragSource(\n        <div>\n        {\n            /* ... */\n            }\n        </div>,\n        )\n    }\n    }\n\n    // Dustbin.jsx\n    @DropTarget(ItemTypes.BOX, targetSpec, (connect)=>{\n    connectDropTarget: connect.dropTarget(),\n    })\n    export default class Dustbin {\n    render() {\n        const { connectDropTarget } = this.props\n        return connectDropTarget(\n        <div>\n        {\n            /* ... */\n            }\n        </div>,\n        )\n    }\n    }\n\n  ```\n#### 6. 参数 monitor\nmonitor 用于查询当前的拖拽状态，其对应实例内置了很多方法。\n内置方法列表：\n\n ```\n // DragSourceMonitor\nmonitor.canDrag()        // 是否能被拖拽\nmonitor.isDragging()      // 是否正在拖拽\nmonitor.getItemType()     // 拖拽组件type\nmonitor.getItem()         // 当前拖拽的item\nmonitor.getDropResult()   // 查询drop结果\nmonitor.didDrop()         // source是否已经drop在target\nmonitor.getInitialClientOffset()   // 拖拽组件初始拖拽时offset\nmonitor.getInitialSourceClientOffset()\nmonitor.getClientOffset() // 拖拽组件当前offset\nmonitor.getDifferenceFromInitialOffset() // 当前拖拽offset和初始拖拽offset的差别\nmonitor.getSourceClientOffset()\n\n// DropTargetMonitor\nmonitor.canDrop()         // 是否可被放置\nmonitor.isOver(options)   // source是否在target上方\nmonitor.getItemType()     // 拖拽组件type\nmonitor.getItem()         // 当前拖拽的item\nmonitor.getDropResult()   // 查询drop结果\nmonitor.didDrop()         // source是否已经drop在target\nmonitor.getInitialClientOffset()   // 拖拽组件初始拖拽时offset\nmonitor.getInitialSourceClientOffset()\nmonitor.getClientOffset() // 拖拽组件当前offset\nmonitor.getDifferenceFromInitialOffset() // 当前拖拽offset和初始拖拽offset的差别\nmonitor.getSourceClientOffset()\n ```\n\n# 最后\n以上是一个网友的总结，我实际上是需要在antd的table组件中使用的，react-dnd与antd-table组合又有些不同，将在下一篇文章中记录。\n## 拖拽时候的样式重写\n [react-dnd-text-dragpreview](https://www.npmjs.com/package/react-dnd-text-dragpreview)\n## [官网例子](http://react-dnd.github.io/react-dnd/examples-chessboard-tutorial-app.html)\n## [官方源码](https://github.com/react-dnd/react-dnd)\n\n\n","source":"_posts/拖拽组件：react-dnd.md","raw":"---\ntitle: 拖拽组件：react-dnd\ntoc: true\ncomments: false\ncategories: javascript\ndate: 2018-12-19 16:25:47\ntags:\n    - react\n    - react-dnd\n    - 拖拽\n---\n > 从昨天下午在弄一个关于拖拽的问题，实在有点心烦，先暂停下来，认真梳理一下关于这个组件的知识。\n\n---------------\n全文参考了silkshdow的文章， [原文地址](https://phoebecodespace.github.io/2018/05/03/react-dnd-guide/)\n\n# 核心API\n - DragSource 用于包装你需要拖动的组件，使组件能够被拖拽（make it draggable）\n - DropTarget 用于包装接收拖拽元素的组件，使组件能够放置（dropped on it）\n - DragDropContex 用于包装拖拽根组件，DragSource 和 DropTarget 都需要包裹在DragDropContex内\n - DragDropContextProvider 与 DragDropContex 类似，用 DragDropContextProvider 元素包裹拖拽根组件。\n\n# API参数介绍\n## DragSource(type, spec, collect)\n## DropTarget(type, spec, collect)\n\n  1. type: 拖拽类型，必填\n  2. spec: 拖拽事件的方法对象，必填。\n  3. collect: 把拖拽过程中需要信息注入组件的 props，接收两个参数 connect and monitor，必填。\n  \n### type\n 当 source组件的type 和 target组件的type 一致时，target组件可以接受source组件。\n\ntype的类型可以是 string，symbol，也可以是用一个函数来返回该组件的其他 props\n\n### spec\nspec定义特定方法的对象，如 source组件的spec 可以定义 `拖动` 相关的事件，target组件的spec 可以定义 `放置` 相关的事件，具体列表：\n\n#### 1. DragSource specObj\n - beginDrag(props, monitor, component): 拖动开始时触发的事件，必须。返回跟props相关的对象。\n - endDrag(props, monitor, component): 拖动结束时触发的事件，可选。\n - canDrag(props, monitor): 当前是否可以拖拽的事件，可选。\n - isDragging(props, monitor): 拖拽时触发的事件，可选。\n        ```\n        // Box.jsx\n        const sourceSpec = {\n            beginDrag(props, monitor, component){\n            // 返回需要注入的属性\n            return {\n                id: props.id\n            }\n            },\n            endDrag(props, monitor, component){\n            // ..\n            },\n            canDrag(props, monitor){\n            // ..\n            },\n            isDragging(props, monitor){\n            // ..\n            }\n        }\n        @DragSource(ItemTypes.BOX, sourceSpec, collect)\n        \n```\n\n#### 2. DropTarget specObj\n - drop(props, monitor, component) 组件放下时触发的事件，可选。\n - hover(props, monitor, component) 组件在DropTarget上方时响应的事件，可选。\n - canDrop(props, monitor) 组件可以被放置时触发的事件，可选。\n\n    ```\n        // Dustbin.jsx\n        const targetSpec = {\n        drop(props, monitor, component){\n            // ..\n        },\n        hover(props, monitor, component){\n            // ..\n        },\n        canDrop(props, monitor){\n            // ..\n        }\n        }\n        @DropTarget(ItemTypes.BOX, targetSpec, collect)\n    ```\n\n#### 3.  specObj 对象方法相关参数\n- props： 组件当前的props\n- monitor：查询当前的拖拽状态，比如当前拖拽的item和它的type，当前拖拽的offsets，当前是否dropped。具体获取方法，参看collect 参数 monitor 部分\n    - source组件 的 monitor 参数是 DragSourceMonitor 的实例\n    - target组件 的 monitor 参数是 DropTargetMonitor 的实例\n- component：当前组件实例\n#### 4. collect\ncollect 是一个函数，默认有两个参数：connect 和 monitor。collect函数将`返回一个对象`，这个对象会注入到组件的 `props` 中，也就是说，我们可以通过 this.props 获取collect返回的所有属性。 \n *传递参数时需要，项目中很多地方会需要知道当前拖拽的相关数据，很有用*\n#### 5. 参数 connect\n - source组件 collect 中 connect是 DragSourceConnector的实例，它内置了两个方法：`dragSource()` 和 `dragPreview()`。dragSource()返回一个方法，将source组件传入这个方法，可以将 source DOM 和 React DnD backend 连接起来；dragPreview() 返回一个方法，你可以传入节点，作为拖拽预览时的角色。\n - target组件 collect 中 connect是 DropTargetConnector的实例，内置的方法` dropTarget()` 对应 dragSource()，返回可以将 drop target 和 React DnD backend 连接起来的方法。\n\n  ```\n  // Box.jsx\n    @DragSource(ItemTypes.BOX, sourceSpec,(connect)=>({\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    }))\n    export default class Box {\n    render() {\n        const { connectDragSource } = this.props\n        return connectDragSource(\n        <div>\n        {\n            /* ... */\n            }\n        </div>,\n        )\n    }\n    }\n\n    // Dustbin.jsx\n    @DropTarget(ItemTypes.BOX, targetSpec, (connect)=>{\n    connectDropTarget: connect.dropTarget(),\n    })\n    export default class Dustbin {\n    render() {\n        const { connectDropTarget } = this.props\n        return connectDropTarget(\n        <div>\n        {\n            /* ... */\n            }\n        </div>,\n        )\n    }\n    }\n\n  ```\n#### 6. 参数 monitor\nmonitor 用于查询当前的拖拽状态，其对应实例内置了很多方法。\n内置方法列表：\n\n ```\n // DragSourceMonitor\nmonitor.canDrag()        // 是否能被拖拽\nmonitor.isDragging()      // 是否正在拖拽\nmonitor.getItemType()     // 拖拽组件type\nmonitor.getItem()         // 当前拖拽的item\nmonitor.getDropResult()   // 查询drop结果\nmonitor.didDrop()         // source是否已经drop在target\nmonitor.getInitialClientOffset()   // 拖拽组件初始拖拽时offset\nmonitor.getInitialSourceClientOffset()\nmonitor.getClientOffset() // 拖拽组件当前offset\nmonitor.getDifferenceFromInitialOffset() // 当前拖拽offset和初始拖拽offset的差别\nmonitor.getSourceClientOffset()\n\n// DropTargetMonitor\nmonitor.canDrop()         // 是否可被放置\nmonitor.isOver(options)   // source是否在target上方\nmonitor.getItemType()     // 拖拽组件type\nmonitor.getItem()         // 当前拖拽的item\nmonitor.getDropResult()   // 查询drop结果\nmonitor.didDrop()         // source是否已经drop在target\nmonitor.getInitialClientOffset()   // 拖拽组件初始拖拽时offset\nmonitor.getInitialSourceClientOffset()\nmonitor.getClientOffset() // 拖拽组件当前offset\nmonitor.getDifferenceFromInitialOffset() // 当前拖拽offset和初始拖拽offset的差别\nmonitor.getSourceClientOffset()\n ```\n\n# 最后\n以上是一个网友的总结，我实际上是需要在antd的table组件中使用的，react-dnd与antd-table组合又有些不同，将在下一篇文章中记录。\n## 拖拽时候的样式重写\n [react-dnd-text-dragpreview](https://www.npmjs.com/package/react-dnd-text-dragpreview)\n## [官网例子](http://react-dnd.github.io/react-dnd/examples-chessboard-tutorial-app.html)\n## [官方源码](https://github.com/react-dnd/react-dnd)\n\n\n","slug":"拖拽组件：react-dnd","published":1,"updated":"2019-12-24T03:04:37.365Z","layout":"post","photos":[],"link":"","_id":"ckaxser7h0019csto67v7yvkd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<p>从昨天下午在弄一个关于拖拽的问题，实在有点心烦，先暂停下来，认真梳理一下关于这个组件的知识。</p>\n</blockquote>\n<hr>\n<p>全文参考了silkshdow的文章， <a href=\"https://phoebecodespace.github.io/2018/05/03/react-dnd-guide/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">原文地址</a></p>\n<h1 id=\"核心API\"><a href=\"#核心API\" class=\"headerlink\" title=\"核心API\"></a>核心API</h1><ul>\n<li>DragSource 用于包装你需要拖动的组件，使组件能够被拖拽（make it draggable）</li>\n<li>DropTarget 用于包装接收拖拽元素的组件，使组件能够放置（dropped on it）</li>\n<li>DragDropContex 用于包装拖拽根组件，DragSource 和 DropTarget 都需要包裹在DragDropContex内</li>\n<li>DragDropContextProvider 与 DragDropContex 类似，用 DragDropContextProvider 元素包裹拖拽根组件。</li>\n</ul>\n<h1 id=\"API参数介绍\"><a href=\"#API参数介绍\" class=\"headerlink\" title=\"API参数介绍\"></a>API参数介绍</h1><h2 id=\"DragSource-type-spec-collect\"><a href=\"#DragSource-type-spec-collect\" class=\"headerlink\" title=\"DragSource(type, spec, collect)\"></a>DragSource(type, spec, collect)</h2><h2 id=\"DropTarget-type-spec-collect\"><a href=\"#DropTarget-type-spec-collect\" class=\"headerlink\" title=\"DropTarget(type, spec, collect)\"></a>DropTarget(type, spec, collect)</h2><ol>\n<li>type: 拖拽类型，必填</li>\n<li>spec: 拖拽事件的方法对象，必填。</li>\n<li>collect: 把拖拽过程中需要信息注入组件的 props，接收两个参数 connect and monitor，必填。</li>\n</ol>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p> 当 source组件的type 和 target组件的type 一致时，target组件可以接受source组件。</p>\n<p>type的类型可以是 string，symbol，也可以是用一个函数来返回该组件的其他 props</p>\n<h3 id=\"spec\"><a href=\"#spec\" class=\"headerlink\" title=\"spec\"></a>spec</h3><p>spec定义特定方法的对象，如 source组件的spec 可以定义 <code>拖动</code> 相关的事件，target组件的spec 可以定义 <code>放置</code> 相关的事件，具体列表：</p>\n<h4 id=\"1-DragSource-specObj\"><a href=\"#1-DragSource-specObj\" class=\"headerlink\" title=\"1. DragSource specObj\"></a>1. DragSource specObj</h4><ul>\n<li>beginDrag(props, monitor, component): 拖动开始时触发的事件，必须。返回跟props相关的对象。</li>\n<li>endDrag(props, monitor, component): 拖动结束时触发的事件，可选。</li>\n<li>canDrag(props, monitor): 当前是否可以拖拽的事件，可选。</li>\n<li>isDragging(props, monitor): 拖拽时触发的事件，可选。<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Box.jsx</span><br><span class=\"line\">const sourceSpec = &#123;</span><br><span class=\"line\">    beginDrag(props, monitor, component)&#123;</span><br><span class=\"line\">    // 返回需要注入的属性</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        id: props.id</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    endDrag(props, monitor, component)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    canDrag(props, monitor)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isDragging(props, monitor)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@DragSource(ItemTypes.BOX, sourceSpec, collect)</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<h4 id=\"2-DropTarget-specObj\"><a href=\"#2-DropTarget-specObj\" class=\"headerlink\" title=\"2. DropTarget specObj\"></a>2. DropTarget specObj</h4><ul>\n<li>drop(props, monitor, component) 组件放下时触发的事件，可选。</li>\n<li>hover(props, monitor, component) 组件在DropTarget上方时响应的事件，可选。</li>\n<li><p>canDrop(props, monitor) 组件可以被放置时触发的事件，可选。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Dustbin.jsx</span><br><span class=\"line\">const targetSpec = &#123;</span><br><span class=\"line\">drop(props, monitor, component)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">hover(props, monitor, component)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">canDrop(props, monitor)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@DropTarget(ItemTypes.BOX, targetSpec, collect)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3-specObj-对象方法相关参数\"><a href=\"#3-specObj-对象方法相关参数\" class=\"headerlink\" title=\"3.  specObj 对象方法相关参数\"></a>3.  specObj 对象方法相关参数</h4><ul>\n<li>props： 组件当前的props</li>\n<li>monitor：查询当前的拖拽状态，比如当前拖拽的item和它的type，当前拖拽的offsets，当前是否dropped。具体获取方法，参看collect 参数 monitor 部分<ul>\n<li>source组件 的 monitor 参数是 DragSourceMonitor 的实例</li>\n<li>target组件 的 monitor 参数是 DropTargetMonitor 的实例</li>\n</ul>\n</li>\n<li><p>component：当前组件实例</p>\n<h4 id=\"4-collect\"><a href=\"#4-collect\" class=\"headerlink\" title=\"4. collect\"></a>4. collect</h4><p>collect 是一个函数，默认有两个参数：connect 和 monitor。collect函数将<code>返回一个对象</code>，这个对象会注入到组件的 <code>props</code> 中，也就是说，我们可以通过 this.props 获取collect返回的所有属性。<br><em>传递参数时需要，项目中很多地方会需要知道当前拖拽的相关数据，很有用</em></p>\n<h4 id=\"5-参数-connect\"><a href=\"#5-参数-connect\" class=\"headerlink\" title=\"5. 参数 connect\"></a>5. 参数 connect</h4><ul>\n<li>source组件 collect 中 connect是 DragSourceConnector的实例，它内置了两个方法：<code>dragSource()</code> 和 <code>dragPreview()</code>。dragSource()返回一个方法，将source组件传入这个方法，可以将 source DOM 和 React DnD backend 连接起来；dragPreview() 返回一个方法，你可以传入节点，作为拖拽预览时的角色。</li>\n<li>target组件 collect 中 connect是 DropTargetConnector的实例，内置的方法<code>dropTarget()</code> 对应 dragSource()，返回可以将 drop target 和 React DnD backend 连接起来的方法。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Box.jsx</span><br><span class=\"line\">  @DragSource(ItemTypes.BOX, sourceSpec,(connect)=&gt;(&#123;</span><br><span class=\"line\">  connectDragSource: connect.dragSource(),</span><br><span class=\"line\">  connectDragPreview: connect.dragPreview(),</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  export default class Box &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">      const &#123; connectDragSource &#125; = this.props</span><br><span class=\"line\">      return connectDragSource(</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          /* ... */</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &lt;/div&gt;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Dustbin.jsx</span><br><span class=\"line\">  @DropTarget(ItemTypes.BOX, targetSpec, (connect)=&gt;&#123;</span><br><span class=\"line\">  connectDropTarget: connect.dropTarget(),</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  export default class Dustbin &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">      const &#123; connectDropTarget &#125; = this.props</span><br><span class=\"line\">      return connectDropTarget(</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          /* ... */</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &lt;/div&gt;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6-参数-monitor\"><a href=\"#6-参数-monitor\" class=\"headerlink\" title=\"6. 参数 monitor\"></a>6. 参数 monitor</h4><p>monitor 用于查询当前的拖拽状态，其对应实例内置了很多方法。<br>内置方法列表：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // DragSourceMonitor</span><br><span class=\"line\">monitor.canDrag()        // 是否能被拖拽</span><br><span class=\"line\">monitor.isDragging()      // 是否正在拖拽</span><br><span class=\"line\">monitor.getItemType()     // 拖拽组件type</span><br><span class=\"line\">monitor.getItem()         // 当前拖拽的item</span><br><span class=\"line\">monitor.getDropResult()   // 查询drop结果</span><br><span class=\"line\">monitor.didDrop()         // source是否已经drop在target</span><br><span class=\"line\">monitor.getInitialClientOffset()   // 拖拽组件初始拖拽时offset</span><br><span class=\"line\">monitor.getInitialSourceClientOffset()</span><br><span class=\"line\">monitor.getClientOffset() // 拖拽组件当前offset</span><br><span class=\"line\">monitor.getDifferenceFromInitialOffset() // 当前拖拽offset和初始拖拽offset的差别</span><br><span class=\"line\">monitor.getSourceClientOffset()</span><br><span class=\"line\"></span><br><span class=\"line\">// DropTargetMonitor</span><br><span class=\"line\">monitor.canDrop()         // 是否可被放置</span><br><span class=\"line\">monitor.isOver(options)   // source是否在target上方</span><br><span class=\"line\">monitor.getItemType()     // 拖拽组件type</span><br><span class=\"line\">monitor.getItem()         // 当前拖拽的item</span><br><span class=\"line\">monitor.getDropResult()   // 查询drop结果</span><br><span class=\"line\">monitor.didDrop()         // source是否已经drop在target</span><br><span class=\"line\">monitor.getInitialClientOffset()   // 拖拽组件初始拖拽时offset</span><br><span class=\"line\">monitor.getInitialSourceClientOffset()</span><br><span class=\"line\">monitor.getClientOffset() // 拖拽组件当前offset</span><br><span class=\"line\">monitor.getDifferenceFromInitialOffset() // 当前拖拽offset和初始拖拽offset的差别</span><br><span class=\"line\">monitor.getSourceClientOffset()</span><br></pre></td></tr></table></figure>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>以上是一个网友的总结，我实际上是需要在antd的table组件中使用的，react-dnd与antd-table组合又有些不同，将在下一篇文章中记录。</p>\n<h2 id=\"拖拽时候的样式重写\"><a href=\"#拖拽时候的样式重写\" class=\"headerlink\" title=\"拖拽时候的样式重写\"></a>拖拽时候的样式重写</h2><p> <a href=\"https://www.npmjs.com/package/react-dnd-text-dragpreview\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">react-dnd-text-dragpreview</a></p>\n<h2 id=\"官网例子\"><a href=\"#官网例子\" class=\"headerlink\" title=\"官网例子\"></a><a href=\"http://react-dnd.github.io/react-dnd/examples-chessboard-tutorial-app.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官网例子</a></h2><h2 id=\"官方源码\"><a href=\"#官方源码\" class=\"headerlink\" title=\"官方源码\"></a><a href=\"https://github.com/react-dnd/react-dnd\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方源码</a></h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>从昨天下午在弄一个关于拖拽的问题，实在有点心烦，先暂停下来，认真梳理一下关于这个组件的知识。</p>\n</blockquote>\n<hr>\n<p>全文参考了silkshdow的文章， <a href=\"https://phoebecodespace.github.io/2018/05/03/react-dnd-guide/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">原文地址</a></p>\n<h1 id=\"核心API\"><a href=\"#核心API\" class=\"headerlink\" title=\"核心API\"></a>核心API</h1><ul>\n<li>DragSource 用于包装你需要拖动的组件，使组件能够被拖拽（make it draggable）</li>\n<li>DropTarget 用于包装接收拖拽元素的组件，使组件能够放置（dropped on it）</li>\n<li>DragDropContex 用于包装拖拽根组件，DragSource 和 DropTarget 都需要包裹在DragDropContex内</li>\n<li>DragDropContextProvider 与 DragDropContex 类似，用 DragDropContextProvider 元素包裹拖拽根组件。</li>\n</ul>\n<h1 id=\"API参数介绍\"><a href=\"#API参数介绍\" class=\"headerlink\" title=\"API参数介绍\"></a>API参数介绍</h1><h2 id=\"DragSource-type-spec-collect\"><a href=\"#DragSource-type-spec-collect\" class=\"headerlink\" title=\"DragSource(type, spec, collect)\"></a>DragSource(type, spec, collect)</h2><h2 id=\"DropTarget-type-spec-collect\"><a href=\"#DropTarget-type-spec-collect\" class=\"headerlink\" title=\"DropTarget(type, spec, collect)\"></a>DropTarget(type, spec, collect)</h2><ol>\n<li>type: 拖拽类型，必填</li>\n<li>spec: 拖拽事件的方法对象，必填。</li>\n<li>collect: 把拖拽过程中需要信息注入组件的 props，接收两个参数 connect and monitor，必填。</li>\n</ol>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p> 当 source组件的type 和 target组件的type 一致时，target组件可以接受source组件。</p>\n<p>type的类型可以是 string，symbol，也可以是用一个函数来返回该组件的其他 props</p>\n<h3 id=\"spec\"><a href=\"#spec\" class=\"headerlink\" title=\"spec\"></a>spec</h3><p>spec定义特定方法的对象，如 source组件的spec 可以定义 <code>拖动</code> 相关的事件，target组件的spec 可以定义 <code>放置</code> 相关的事件，具体列表：</p>\n<h4 id=\"1-DragSource-specObj\"><a href=\"#1-DragSource-specObj\" class=\"headerlink\" title=\"1. DragSource specObj\"></a>1. DragSource specObj</h4><ul>\n<li>beginDrag(props, monitor, component): 拖动开始时触发的事件，必须。返回跟props相关的对象。</li>\n<li>endDrag(props, monitor, component): 拖动结束时触发的事件，可选。</li>\n<li>canDrag(props, monitor): 当前是否可以拖拽的事件，可选。</li>\n<li>isDragging(props, monitor): 拖拽时触发的事件，可选。<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Box.jsx</span><br><span class=\"line\">const sourceSpec = &#123;</span><br><span class=\"line\">    beginDrag(props, monitor, component)&#123;</span><br><span class=\"line\">    // 返回需要注入的属性</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        id: props.id</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    endDrag(props, monitor, component)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    canDrag(props, monitor)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isDragging(props, monitor)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@DragSource(ItemTypes.BOX, sourceSpec, collect)</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<h4 id=\"2-DropTarget-specObj\"><a href=\"#2-DropTarget-specObj\" class=\"headerlink\" title=\"2. DropTarget specObj\"></a>2. DropTarget specObj</h4><ul>\n<li>drop(props, monitor, component) 组件放下时触发的事件，可选。</li>\n<li>hover(props, monitor, component) 组件在DropTarget上方时响应的事件，可选。</li>\n<li><p>canDrop(props, monitor) 组件可以被放置时触发的事件，可选。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Dustbin.jsx</span><br><span class=\"line\">const targetSpec = &#123;</span><br><span class=\"line\">drop(props, monitor, component)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">hover(props, monitor, component)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">canDrop(props, monitor)&#123;</span><br><span class=\"line\">    // ..</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@DropTarget(ItemTypes.BOX, targetSpec, collect)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3-specObj-对象方法相关参数\"><a href=\"#3-specObj-对象方法相关参数\" class=\"headerlink\" title=\"3.  specObj 对象方法相关参数\"></a>3.  specObj 对象方法相关参数</h4><ul>\n<li>props： 组件当前的props</li>\n<li>monitor：查询当前的拖拽状态，比如当前拖拽的item和它的type，当前拖拽的offsets，当前是否dropped。具体获取方法，参看collect 参数 monitor 部分<ul>\n<li>source组件 的 monitor 参数是 DragSourceMonitor 的实例</li>\n<li>target组件 的 monitor 参数是 DropTargetMonitor 的实例</li>\n</ul>\n</li>\n<li><p>component：当前组件实例</p>\n<h4 id=\"4-collect\"><a href=\"#4-collect\" class=\"headerlink\" title=\"4. collect\"></a>4. collect</h4><p>collect 是一个函数，默认有两个参数：connect 和 monitor。collect函数将<code>返回一个对象</code>，这个对象会注入到组件的 <code>props</code> 中，也就是说，我们可以通过 this.props 获取collect返回的所有属性。<br><em>传递参数时需要，项目中很多地方会需要知道当前拖拽的相关数据，很有用</em></p>\n<h4 id=\"5-参数-connect\"><a href=\"#5-参数-connect\" class=\"headerlink\" title=\"5. 参数 connect\"></a>5. 参数 connect</h4><ul>\n<li>source组件 collect 中 connect是 DragSourceConnector的实例，它内置了两个方法：<code>dragSource()</code> 和 <code>dragPreview()</code>。dragSource()返回一个方法，将source组件传入这个方法，可以将 source DOM 和 React DnD backend 连接起来；dragPreview() 返回一个方法，你可以传入节点，作为拖拽预览时的角色。</li>\n<li>target组件 collect 中 connect是 DropTargetConnector的实例，内置的方法<code>dropTarget()</code> 对应 dragSource()，返回可以将 drop target 和 React DnD backend 连接起来的方法。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Box.jsx</span><br><span class=\"line\">  @DragSource(ItemTypes.BOX, sourceSpec,(connect)=&gt;(&#123;</span><br><span class=\"line\">  connectDragSource: connect.dragSource(),</span><br><span class=\"line\">  connectDragPreview: connect.dragPreview(),</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  export default class Box &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">      const &#123; connectDragSource &#125; = this.props</span><br><span class=\"line\">      return connectDragSource(</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          /* ... */</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &lt;/div&gt;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Dustbin.jsx</span><br><span class=\"line\">  @DropTarget(ItemTypes.BOX, targetSpec, (connect)=&gt;&#123;</span><br><span class=\"line\">  connectDropTarget: connect.dropTarget(),</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  export default class Dustbin &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">      const &#123; connectDropTarget &#125; = this.props</span><br><span class=\"line\">      return connectDropTarget(</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          /* ... */</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &lt;/div&gt;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6-参数-monitor\"><a href=\"#6-参数-monitor\" class=\"headerlink\" title=\"6. 参数 monitor\"></a>6. 参数 monitor</h4><p>monitor 用于查询当前的拖拽状态，其对应实例内置了很多方法。<br>内置方法列表：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // DragSourceMonitor</span><br><span class=\"line\">monitor.canDrag()        // 是否能被拖拽</span><br><span class=\"line\">monitor.isDragging()      // 是否正在拖拽</span><br><span class=\"line\">monitor.getItemType()     // 拖拽组件type</span><br><span class=\"line\">monitor.getItem()         // 当前拖拽的item</span><br><span class=\"line\">monitor.getDropResult()   // 查询drop结果</span><br><span class=\"line\">monitor.didDrop()         // source是否已经drop在target</span><br><span class=\"line\">monitor.getInitialClientOffset()   // 拖拽组件初始拖拽时offset</span><br><span class=\"line\">monitor.getInitialSourceClientOffset()</span><br><span class=\"line\">monitor.getClientOffset() // 拖拽组件当前offset</span><br><span class=\"line\">monitor.getDifferenceFromInitialOffset() // 当前拖拽offset和初始拖拽offset的差别</span><br><span class=\"line\">monitor.getSourceClientOffset()</span><br><span class=\"line\"></span><br><span class=\"line\">// DropTargetMonitor</span><br><span class=\"line\">monitor.canDrop()         // 是否可被放置</span><br><span class=\"line\">monitor.isOver(options)   // source是否在target上方</span><br><span class=\"line\">monitor.getItemType()     // 拖拽组件type</span><br><span class=\"line\">monitor.getItem()         // 当前拖拽的item</span><br><span class=\"line\">monitor.getDropResult()   // 查询drop结果</span><br><span class=\"line\">monitor.didDrop()         // source是否已经drop在target</span><br><span class=\"line\">monitor.getInitialClientOffset()   // 拖拽组件初始拖拽时offset</span><br><span class=\"line\">monitor.getInitialSourceClientOffset()</span><br><span class=\"line\">monitor.getClientOffset() // 拖拽组件当前offset</span><br><span class=\"line\">monitor.getDifferenceFromInitialOffset() // 当前拖拽offset和初始拖拽offset的差别</span><br><span class=\"line\">monitor.getSourceClientOffset()</span><br></pre></td></tr></table></figure>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>以上是一个网友的总结，我实际上是需要在antd的table组件中使用的，react-dnd与antd-table组合又有些不同，将在下一篇文章中记录。</p>\n<h2 id=\"拖拽时候的样式重写\"><a href=\"#拖拽时候的样式重写\" class=\"headerlink\" title=\"拖拽时候的样式重写\"></a>拖拽时候的样式重写</h2><p> <a href=\"https://www.npmjs.com/package/react-dnd-text-dragpreview\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">react-dnd-text-dragpreview</a></p>\n<h2 id=\"官网例子\"><a href=\"#官网例子\" class=\"headerlink\" title=\"官网例子\"></a><a href=\"http://react-dnd.github.io/react-dnd/examples-chessboard-tutorial-app.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官网例子</a></h2><h2 id=\"官方源码\"><a href=\"#官方源码\" class=\"headerlink\" title=\"官方源码\"></a><a href=\"https://github.com/react-dnd/react-dnd\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方源码</a></h2>"},{"title":"webpack demo","toc":true,"comments":1,"date":"2018-10-12T01:45:55.000Z","_content":"简单的webpack demo\n\n# 配置文件 package.json \n\n        {\n            \"name\": \"webpack-demo\",\n            \"version\": \"1.0.0\",\n            \"description\": \"\",\n            \"private\": true,\n            \"scripts\": {\n                \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n                \"start\": \"webpack-dev-server --open\",\n                \"watch\": \"webpack --watch\",\n                \"server\": \"node server.js\",\n                \"build\": \"webpack\"\n            },\n            \"keywords\": [],\n            \"author\": \"\",\n            \"license\": \"ISC\",\n            \"devDependencies\": {\n                \"clean-webpack-plugin\": \"^0.1.19\",\n                \"css-loader\": \"^1.0.0\",\n                \"express\": \"^4.16.4\",\n                \"file-loader\": \"^2.0.0\",\n                \"html-webpack-plugin\": \"^3.2.0\",\n                \"style-loader\": \"^0.23.1\",\n                \"webpack\": \"^4.20.2\",\n                \"webpack-cli\": \"^3.1.2\",\n                \"webpack-dev-middleware\": \"^3.4.0\",\n                \"webpack-dev-server\": \"^3.1.9\",\n                \"xml-loader\": \"^1.2.1\"\n            },\n            \"dependencies\": {\n                \"lodash\": \"^4.17.11\"\n            }\n        }\n\n**webpack 建议本地安装，这可以使我们在引入破坏式变更的依赖时，更容易分别升级项目。**\n\n *本地安装webpack后，能够从node_modules/.bing/webpack 访问它的bin版本*\n\n从配置的依赖项来看，除了基本的webpack 及webpack-cli，还包括express、loader、plugin、middleware等，这些下面会进行说明。\n\n# webpack.config.js \n\n        const path = require('path');\n        const HtmlWebpackPlugin = require('html-webpack-plugin');\n        const CleanWebpackPlugin = require('clean-webpack-plugin');\n        const webpack = require('webpack');\n\n        module.exports = {\n            entry: {\n                app: './src/index.js'\n            },\n            devtool: 'inline-source-map',\n            devServer: {\n                contentBase: './dist',\n                hot: true\n                },\n            module: {\n                rules: [\n                {\n                    test: /\\.css$/,\n                    use: ['style-loader', 'css-loader']\n                }\n                ]\n            },\n            plugins: [\n                new CleanWebpackPlugin(['dist']),\n                new HtmlWebpackPlugin({\n                title: 'Output Management'\n                }),\n                new webpack.NamedModulesPlugin(),\n                new webpack.HotModuleReplacementPlugin()\n            ],\n            output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist'),\n                publicPath: '/'\n            }\n        };\n\n## entry 项目入口\n\n单个 entry='./src/index.js'；\n\n多个 entry={\n    app:'./src/index.js',\n    main:'./src/main.js'\n}\n\n## output 项目出口\n\n    output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist'),\n                publicPath: '/'\n            }\n\nfilename顾名思义，输出的文件的名字，多个入口的情况下，'[name].bundle.js' 会将文件输出为'app.bundle.js'及'main.bundle.js'，根据起点名称生成bundle文件。\n\npath 输出路径；\n\npublicPath：公共路径，会在服务器脚本用到，确保文件资源能够在 http://localhost:3000 下正确访问\n\n## loader 管理资源\n\nwebpack 通过 loader 引入任何其他类型的文件。\n\n/\\.css$/: style-loader、css-loader；//css\n\n/\\.(png|svg|jpg|gif)$/: file-loader；//图片\n\n/\\.(woff|woff2|eot|ttf|otf)$/: file-loader；//字体\n\n/\\.(csv|tsv)$/: csv-loader；//csv\n\n/\\.xml$/: xml-loader；//xml数据\n\n     import Data from './data.xml';\n     function component() {\n        console.log(Data);\n        //import 这四种类型的数据(JSON, CSV, TSV, XML)中的任何一种，所导入的 Data 变量将包含可直接使用的已解析 JSON\n    }\n\n\n## 全局资源\n\n        - |- /assets\n        + |– /components\n        + |  |– /my-component\n        + |  |  |– index.jsx\n        + |  |  |– index.css\n        + |  |  |– icon.svg\n        + |  |  |– img.png\n\n类似这样，将模块和资源组合在一起，无需依赖于含有全部资源的 /assets 目录，而是将资源与代码组合在一起，这样的结构会非常有用。\n\n **会使代码更具有可移植性，因为现有的统一放置的方式会造成所有资源紧密耦合在一起。**\n\n 当无法用这种方式开发，或者有多个组件间资源共享的时候，仍然可以将这些资源存储在公共目录中，配合 **alias** 来使用他们更方便import导入。\n\n ### alias写法：\n\n    resolve:{\n        alias: {\n            ASSET: path.join(src, 'assets'),\n            xyz$: path.resolve(__dirname, 'path/to/file.js')\n        },\n    }\n    import Test1 from 'xyz'; // 精确匹配，所以 path/to/file.js 被解析和导入\n    import Test2 from 'xyz/file.js'; // 非精确匹配，触发普通解析\n\n\n**在给定对象的键后的末尾添加 $，以表示精准匹配**\n\n\n\n## plugins\n### HtmlWebpackPlugin\n\n    npm install --save-dev html-webpack-plugin\n\n该插件会根据我们的配置自动生成一个html入口文件，不用我们自己手动写。这样的好处就是，即使配置文件的入口点等名称改了，我们不用重新去修改index.html文件的内容。\n\n生成的bundle文件会自动添加到html中。\n### 清理/dist文件夹\n\n    npm install clean-webpack-plugin --save-dev\n\n每次webpack生成文件前建议清除 /dist 文件夹，避免过去生成的代码和最新的混合在一起。\n\n# 开发\n## 使用 source map (devtool)\n\n用webpack打包，开发时需要追踪到具体错误和警告产生的位置，根据想要的效果不同需要做不同的配置。\n\n开发环境适合使用：eval-source-map\n生产环境可省略\n\n具体说明还可查看 [官方配置](https://www.webpackjs.com/configuration/devtool/)\n\n\n## 自动监测代码的变化\n\n一下三种工具能在代码发生变化时自动编译代码：\n 1. webpack's Watch Mode\n 2. webpack-dev-server\n 3. webpack-dev-middleware\n \n### 观察模式\n直接在配置文件package.json 中添加脚本 ` \"watch\": \"webpack --watch\" `\n\n**缺点：需要手动刷新浏览器**\n\n### webpack-dev-server\n\n`npm install --save-dev webpack-dev-server`\n\n在webpack.config.js中配置，告诉开发服务器在哪里查找文件\n\n        devServer: {\n            contentBase: './dist'\n        }\n\n同时添加一个 script 脚本，可以直接运行开发服务器(dev server)：\n\n`\"start\": \"webpack-dev-server --open\"`\n\n### webpack-dev-middleware 配合 express server\n    `npm install --save-dev express webpack-dev-middleware`\n\nwebpack.config.js\n    \n    output: {\n        publicPath: '/'\n    }\n\nserver.js\n\n    const express = require('express');\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n\n    const app = express();\n    const config = require('./webpack.config.js');\n    const compiler = webpack(config);\n\n    // Tell express to use the webpack-dev-middleware and use the webpack.config.js\n    // configuration file as a base.\n    app.use(webpackDevMiddleware(compiler, {\n    publicPath: config.output.publicPath\n    }));\n\n    // Serve the files on port 3000.\n    app.listen(3000, function () {\n    console.log('Example app listening on port 3000!\\n');\n    });\n\npackage.json\n\n    \"scripts\": {\n        \"server\": \"node server.js\",\n    }\n\n### 热替换\n在项目已经运行的情况下，可以尝试模块热替换。","source":"_posts/webpack.md","raw":"---\ntitle: webpack demo\ntoc: true\ncomments: true\ncategories: webpack\ndate: 2018-10-12 09:45:55\ntags:\n    - webpack\n    - 模块打包\n---\n简单的webpack demo\n\n# 配置文件 package.json \n\n        {\n            \"name\": \"webpack-demo\",\n            \"version\": \"1.0.0\",\n            \"description\": \"\",\n            \"private\": true,\n            \"scripts\": {\n                \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n                \"start\": \"webpack-dev-server --open\",\n                \"watch\": \"webpack --watch\",\n                \"server\": \"node server.js\",\n                \"build\": \"webpack\"\n            },\n            \"keywords\": [],\n            \"author\": \"\",\n            \"license\": \"ISC\",\n            \"devDependencies\": {\n                \"clean-webpack-plugin\": \"^0.1.19\",\n                \"css-loader\": \"^1.0.0\",\n                \"express\": \"^4.16.4\",\n                \"file-loader\": \"^2.0.0\",\n                \"html-webpack-plugin\": \"^3.2.0\",\n                \"style-loader\": \"^0.23.1\",\n                \"webpack\": \"^4.20.2\",\n                \"webpack-cli\": \"^3.1.2\",\n                \"webpack-dev-middleware\": \"^3.4.0\",\n                \"webpack-dev-server\": \"^3.1.9\",\n                \"xml-loader\": \"^1.2.1\"\n            },\n            \"dependencies\": {\n                \"lodash\": \"^4.17.11\"\n            }\n        }\n\n**webpack 建议本地安装，这可以使我们在引入破坏式变更的依赖时，更容易分别升级项目。**\n\n *本地安装webpack后，能够从node_modules/.bing/webpack 访问它的bin版本*\n\n从配置的依赖项来看，除了基本的webpack 及webpack-cli，还包括express、loader、plugin、middleware等，这些下面会进行说明。\n\n# webpack.config.js \n\n        const path = require('path');\n        const HtmlWebpackPlugin = require('html-webpack-plugin');\n        const CleanWebpackPlugin = require('clean-webpack-plugin');\n        const webpack = require('webpack');\n\n        module.exports = {\n            entry: {\n                app: './src/index.js'\n            },\n            devtool: 'inline-source-map',\n            devServer: {\n                contentBase: './dist',\n                hot: true\n                },\n            module: {\n                rules: [\n                {\n                    test: /\\.css$/,\n                    use: ['style-loader', 'css-loader']\n                }\n                ]\n            },\n            plugins: [\n                new CleanWebpackPlugin(['dist']),\n                new HtmlWebpackPlugin({\n                title: 'Output Management'\n                }),\n                new webpack.NamedModulesPlugin(),\n                new webpack.HotModuleReplacementPlugin()\n            ],\n            output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist'),\n                publicPath: '/'\n            }\n        };\n\n## entry 项目入口\n\n单个 entry='./src/index.js'；\n\n多个 entry={\n    app:'./src/index.js',\n    main:'./src/main.js'\n}\n\n## output 项目出口\n\n    output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist'),\n                publicPath: '/'\n            }\n\nfilename顾名思义，输出的文件的名字，多个入口的情况下，'[name].bundle.js' 会将文件输出为'app.bundle.js'及'main.bundle.js'，根据起点名称生成bundle文件。\n\npath 输出路径；\n\npublicPath：公共路径，会在服务器脚本用到，确保文件资源能够在 http://localhost:3000 下正确访问\n\n## loader 管理资源\n\nwebpack 通过 loader 引入任何其他类型的文件。\n\n/\\.css$/: style-loader、css-loader；//css\n\n/\\.(png|svg|jpg|gif)$/: file-loader；//图片\n\n/\\.(woff|woff2|eot|ttf|otf)$/: file-loader；//字体\n\n/\\.(csv|tsv)$/: csv-loader；//csv\n\n/\\.xml$/: xml-loader；//xml数据\n\n     import Data from './data.xml';\n     function component() {\n        console.log(Data);\n        //import 这四种类型的数据(JSON, CSV, TSV, XML)中的任何一种，所导入的 Data 变量将包含可直接使用的已解析 JSON\n    }\n\n\n## 全局资源\n\n        - |- /assets\n        + |– /components\n        + |  |– /my-component\n        + |  |  |– index.jsx\n        + |  |  |– index.css\n        + |  |  |– icon.svg\n        + |  |  |– img.png\n\n类似这样，将模块和资源组合在一起，无需依赖于含有全部资源的 /assets 目录，而是将资源与代码组合在一起，这样的结构会非常有用。\n\n **会使代码更具有可移植性，因为现有的统一放置的方式会造成所有资源紧密耦合在一起。**\n\n 当无法用这种方式开发，或者有多个组件间资源共享的时候，仍然可以将这些资源存储在公共目录中，配合 **alias** 来使用他们更方便import导入。\n\n ### alias写法：\n\n    resolve:{\n        alias: {\n            ASSET: path.join(src, 'assets'),\n            xyz$: path.resolve(__dirname, 'path/to/file.js')\n        },\n    }\n    import Test1 from 'xyz'; // 精确匹配，所以 path/to/file.js 被解析和导入\n    import Test2 from 'xyz/file.js'; // 非精确匹配，触发普通解析\n\n\n**在给定对象的键后的末尾添加 $，以表示精准匹配**\n\n\n\n## plugins\n### HtmlWebpackPlugin\n\n    npm install --save-dev html-webpack-plugin\n\n该插件会根据我们的配置自动生成一个html入口文件，不用我们自己手动写。这样的好处就是，即使配置文件的入口点等名称改了，我们不用重新去修改index.html文件的内容。\n\n生成的bundle文件会自动添加到html中。\n### 清理/dist文件夹\n\n    npm install clean-webpack-plugin --save-dev\n\n每次webpack生成文件前建议清除 /dist 文件夹，避免过去生成的代码和最新的混合在一起。\n\n# 开发\n## 使用 source map (devtool)\n\n用webpack打包，开发时需要追踪到具体错误和警告产生的位置，根据想要的效果不同需要做不同的配置。\n\n开发环境适合使用：eval-source-map\n生产环境可省略\n\n具体说明还可查看 [官方配置](https://www.webpackjs.com/configuration/devtool/)\n\n\n## 自动监测代码的变化\n\n一下三种工具能在代码发生变化时自动编译代码：\n 1. webpack's Watch Mode\n 2. webpack-dev-server\n 3. webpack-dev-middleware\n \n### 观察模式\n直接在配置文件package.json 中添加脚本 ` \"watch\": \"webpack --watch\" `\n\n**缺点：需要手动刷新浏览器**\n\n### webpack-dev-server\n\n`npm install --save-dev webpack-dev-server`\n\n在webpack.config.js中配置，告诉开发服务器在哪里查找文件\n\n        devServer: {\n            contentBase: './dist'\n        }\n\n同时添加一个 script 脚本，可以直接运行开发服务器(dev server)：\n\n`\"start\": \"webpack-dev-server --open\"`\n\n### webpack-dev-middleware 配合 express server\n    `npm install --save-dev express webpack-dev-middleware`\n\nwebpack.config.js\n    \n    output: {\n        publicPath: '/'\n    }\n\nserver.js\n\n    const express = require('express');\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n\n    const app = express();\n    const config = require('./webpack.config.js');\n    const compiler = webpack(config);\n\n    // Tell express to use the webpack-dev-middleware and use the webpack.config.js\n    // configuration file as a base.\n    app.use(webpackDevMiddleware(compiler, {\n    publicPath: config.output.publicPath\n    }));\n\n    // Serve the files on port 3000.\n    app.listen(3000, function () {\n    console.log('Example app listening on port 3000!\\n');\n    });\n\npackage.json\n\n    \"scripts\": {\n        \"server\": \"node server.js\",\n    }\n\n### 热替换\n在项目已经运行的情况下，可以尝试模块热替换。","slug":"webpack","published":1,"updated":"2019-12-24T03:04:37.364Z","layout":"post","photos":[],"link":"","_id":"ckaxser7j001dcstou025rpx9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>简单的webpack demo</p>\n<h1 id=\"配置文件-package-json\"><a href=\"#配置文件-package-json\" class=\"headerlink\" title=\"配置文件 package.json\"></a>配置文件 package.json</h1><pre><code>{\n    &quot;name&quot;: &quot;webpack-demo&quot;,\n    &quot;version&quot;: &quot;1.0.0&quot;,\n    &quot;description&quot;: &quot;&quot;,\n    &quot;private&quot;: true,\n    &quot;scripts&quot;: {\n        &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n        &quot;start&quot;: &quot;webpack-dev-server --open&quot;,\n        &quot;watch&quot;: &quot;webpack --watch&quot;,\n        &quot;server&quot;: &quot;node server.js&quot;,\n        &quot;build&quot;: &quot;webpack&quot;\n    },\n    &quot;keywords&quot;: [],\n    &quot;author&quot;: &quot;&quot;,\n    &quot;license&quot;: &quot;ISC&quot;,\n    &quot;devDependencies&quot;: {\n        &quot;clean-webpack-plugin&quot;: &quot;^0.1.19&quot;,\n        &quot;css-loader&quot;: &quot;^1.0.0&quot;,\n        &quot;express&quot;: &quot;^4.16.4&quot;,\n        &quot;file-loader&quot;: &quot;^2.0.0&quot;,\n        &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,\n        &quot;style-loader&quot;: &quot;^0.23.1&quot;,\n        &quot;webpack&quot;: &quot;^4.20.2&quot;,\n        &quot;webpack-cli&quot;: &quot;^3.1.2&quot;,\n        &quot;webpack-dev-middleware&quot;: &quot;^3.4.0&quot;,\n        &quot;webpack-dev-server&quot;: &quot;^3.1.9&quot;,\n        &quot;xml-loader&quot;: &quot;^1.2.1&quot;\n    },\n    &quot;dependencies&quot;: {\n        &quot;lodash&quot;: &quot;^4.17.11&quot;\n    }\n}\n</code></pre><p><strong>webpack 建议本地安装，这可以使我们在引入破坏式变更的依赖时，更容易分别升级项目。</strong></p>\n<p> <em>本地安装webpack后，能够从node_modules/.bing/webpack 访问它的bin版本</em></p>\n<p>从配置的依赖项来看，除了基本的webpack 及webpack-cli，还包括express、loader、plugin、middleware等，这些下面会进行说明。</p>\n<h1 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h1><pre><code>const path = require(&apos;path&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nconst CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);\nconst webpack = require(&apos;webpack&apos;);\n\nmodule.exports = {\n    entry: {\n        app: &apos;./src/index.js&apos;\n    },\n    devtool: &apos;inline-source-map&apos;,\n    devServer: {\n        contentBase: &apos;./dist&apos;,\n        hot: true\n        },\n    module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: [&apos;style-loader&apos;, &apos;css-loader&apos;]\n        }\n        ]\n    },\n    plugins: [\n        new CleanWebpackPlugin([&apos;dist&apos;]),\n        new HtmlWebpackPlugin({\n        title: &apos;Output Management&apos;\n        }),\n        new webpack.NamedModulesPlugin(),\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    output: {\n        filename: &apos;[name].bundle.js&apos;,\n        path: path.resolve(__dirname, &apos;dist&apos;),\n        publicPath: &apos;/&apos;\n    }\n};\n</code></pre><h2 id=\"entry-项目入口\"><a href=\"#entry-项目入口\" class=\"headerlink\" title=\"entry 项目入口\"></a>entry 项目入口</h2><p>单个 entry=’./src/index.js’；</p>\n<p>多个 entry={<br>    app:’./src/index.js’,<br>    main:’./src/main.js’<br>}</p>\n<h2 id=\"output-项目出口\"><a href=\"#output-项目出口\" class=\"headerlink\" title=\"output 项目出口\"></a>output 项目出口</h2><pre><code>output: {\n            filename: &apos;[name].bundle.js&apos;,\n            path: path.resolve(__dirname, &apos;dist&apos;),\n            publicPath: &apos;/&apos;\n        }\n</code></pre><p>filename顾名思义，输出的文件的名字，多个入口的情况下，’[name].bundle.js’ 会将文件输出为’app.bundle.js’及’main.bundle.js’，根据起点名称生成bundle文件。</p>\n<p>path 输出路径；</p>\n<p>publicPath：公共路径，会在服务器脚本用到，确保文件资源能够在 <a href=\"http://localhost:3000\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://localhost:3000</a> 下正确访问</p>\n<h2 id=\"loader-管理资源\"><a href=\"#loader-管理资源\" class=\"headerlink\" title=\"loader 管理资源\"></a>loader 管理资源</h2><p>webpack 通过 loader 引入任何其他类型的文件。</p>\n<p>/.css$/: style-loader、css-loader；//css</p>\n<p>/.(png|svg|jpg|gif)$/: file-loader；//图片</p>\n<p>/.(woff|woff2|eot|ttf|otf)$/: file-loader；//字体</p>\n<p>/.(csv|tsv)$/: csv-loader；//csv</p>\n<p>/.xml$/: xml-loader；//xml数据</p>\n<pre><code> import Data from &apos;./data.xml&apos;;\n function component() {\n    console.log(Data);\n    //import 这四种类型的数据(JSON, CSV, TSV, XML)中的任何一种，所导入的 Data 变量将包含可直接使用的已解析 JSON\n}\n</code></pre><h2 id=\"全局资源\"><a href=\"#全局资源\" class=\"headerlink\" title=\"全局资源\"></a>全局资源</h2><pre><code>- |- /assets\n+ |– /components\n+ |  |– /my-component\n+ |  |  |– index.jsx\n+ |  |  |– index.css\n+ |  |  |– icon.svg\n+ |  |  |– img.png\n</code></pre><p>类似这样，将模块和资源组合在一起，无需依赖于含有全部资源的 /assets 目录，而是将资源与代码组合在一起，这样的结构会非常有用。</p>\n<p> <strong>会使代码更具有可移植性，因为现有的统一放置的方式会造成所有资源紧密耦合在一起。</strong></p>\n<p> 当无法用这种方式开发，或者有多个组件间资源共享的时候，仍然可以将这些资源存储在公共目录中，配合 <strong>alias</strong> 来使用他们更方便import导入。</p>\n<h3 id=\"alias写法：\"><a href=\"#alias写法：\" class=\"headerlink\" title=\"alias写法：\"></a>alias写法：</h3><pre><code>resolve:{\n    alias: {\n        ASSET: path.join(src, &apos;assets&apos;),\n        xyz$: path.resolve(__dirname, &apos;path/to/file.js&apos;)\n    },\n}\nimport Test1 from &apos;xyz&apos;; // 精确匹配，所以 path/to/file.js 被解析和导入\nimport Test2 from &apos;xyz/file.js&apos;; // 非精确匹配，触发普通解析\n</code></pre><p><strong>在给定对象的键后的末尾添加 $，以表示精准匹配</strong></p>\n<h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><h3 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h3><pre><code>npm install --save-dev html-webpack-plugin\n</code></pre><p>该插件会根据我们的配置自动生成一个html入口文件，不用我们自己手动写。这样的好处就是，即使配置文件的入口点等名称改了，我们不用重新去修改index.html文件的内容。</p>\n<p>生成的bundle文件会自动添加到html中。</p>\n<h3 id=\"清理-dist文件夹\"><a href=\"#清理-dist文件夹\" class=\"headerlink\" title=\"清理/dist文件夹\"></a>清理/dist文件夹</h3><pre><code>npm install clean-webpack-plugin --save-dev\n</code></pre><p>每次webpack生成文件前建议清除 /dist 文件夹，避免过去生成的代码和最新的混合在一起。</p>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"使用-source-map-devtool\"><a href=\"#使用-source-map-devtool\" class=\"headerlink\" title=\"使用 source map (devtool)\"></a>使用 source map (devtool)</h2><p>用webpack打包，开发时需要追踪到具体错误和警告产生的位置，根据想要的效果不同需要做不同的配置。</p>\n<p>开发环境适合使用：eval-source-map<br>生产环境可省略</p>\n<p>具体说明还可查看 <a href=\"https://www.webpackjs.com/configuration/devtool/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方配置</a></p>\n<h2 id=\"自动监测代码的变化\"><a href=\"#自动监测代码的变化\" class=\"headerlink\" title=\"自动监测代码的变化\"></a>自动监测代码的变化</h2><p>一下三种工具能在代码发生变化时自动编译代码：</p>\n<ol>\n<li>webpack’s Watch Mode</li>\n<li>webpack-dev-server</li>\n<li>webpack-dev-middleware</li>\n</ol>\n<h3 id=\"观察模式\"><a href=\"#观察模式\" class=\"headerlink\" title=\"观察模式\"></a>观察模式</h3><p>直接在配置文件package.json 中添加脚本 <code>&quot;watch&quot;: &quot;webpack --watch&quot;</code></p>\n<p><strong>缺点：需要手动刷新浏览器</strong></p>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><p><code>npm install --save-dev webpack-dev-server</code></p>\n<p>在webpack.config.js中配置，告诉开发服务器在哪里查找文件</p>\n<pre><code>devServer: {\n    contentBase: &apos;./dist&apos;\n}\n</code></pre><p>同时添加一个 script 脚本，可以直接运行开发服务器(dev server)：</p>\n<p><code>&quot;start&quot;: &quot;webpack-dev-server --open&quot;</code></p>\n<h3 id=\"webpack-dev-middleware-配合-express-server\"><a href=\"#webpack-dev-middleware-配合-express-server\" class=\"headerlink\" title=\"webpack-dev-middleware 配合 express server\"></a>webpack-dev-middleware 配合 express server</h3><pre><code>`npm install --save-dev express webpack-dev-middleware`\n</code></pre><p>webpack.config.js</p>\n<pre><code>output: {\n    publicPath: &apos;/&apos;\n}\n</code></pre><p>server.js</p>\n<pre><code>const express = require(&apos;express&apos;);\nconst webpack = require(&apos;webpack&apos;);\nconst webpackDevMiddleware = require(&apos;webpack-dev-middleware&apos;);\n\nconst app = express();\nconst config = require(&apos;./webpack.config.js&apos;);\nconst compiler = webpack(config);\n\n// Tell express to use the webpack-dev-middleware and use the webpack.config.js\n// configuration file as a base.\napp.use(webpackDevMiddleware(compiler, {\npublicPath: config.output.publicPath\n}));\n\n// Serve the files on port 3000.\napp.listen(3000, function () {\nconsole.log(&apos;Example app listening on port 3000!\\n&apos;);\n});\n</code></pre><p>package.json</p>\n<pre><code>&quot;scripts&quot;: {\n    &quot;server&quot;: &quot;node server.js&quot;,\n}\n</code></pre><h3 id=\"热替换\"><a href=\"#热替换\" class=\"headerlink\" title=\"热替换\"></a>热替换</h3><p>在项目已经运行的情况下，可以尝试模块热替换。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>简单的webpack demo</p>\n<h1 id=\"配置文件-package-json\"><a href=\"#配置文件-package-json\" class=\"headerlink\" title=\"配置文件 package.json\"></a>配置文件 package.json</h1><pre><code>{\n    &quot;name&quot;: &quot;webpack-demo&quot;,\n    &quot;version&quot;: &quot;1.0.0&quot;,\n    &quot;description&quot;: &quot;&quot;,\n    &quot;private&quot;: true,\n    &quot;scripts&quot;: {\n        &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n        &quot;start&quot;: &quot;webpack-dev-server --open&quot;,\n        &quot;watch&quot;: &quot;webpack --watch&quot;,\n        &quot;server&quot;: &quot;node server.js&quot;,\n        &quot;build&quot;: &quot;webpack&quot;\n    },\n    &quot;keywords&quot;: [],\n    &quot;author&quot;: &quot;&quot;,\n    &quot;license&quot;: &quot;ISC&quot;,\n    &quot;devDependencies&quot;: {\n        &quot;clean-webpack-plugin&quot;: &quot;^0.1.19&quot;,\n        &quot;css-loader&quot;: &quot;^1.0.0&quot;,\n        &quot;express&quot;: &quot;^4.16.4&quot;,\n        &quot;file-loader&quot;: &quot;^2.0.0&quot;,\n        &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,\n        &quot;style-loader&quot;: &quot;^0.23.1&quot;,\n        &quot;webpack&quot;: &quot;^4.20.2&quot;,\n        &quot;webpack-cli&quot;: &quot;^3.1.2&quot;,\n        &quot;webpack-dev-middleware&quot;: &quot;^3.4.0&quot;,\n        &quot;webpack-dev-server&quot;: &quot;^3.1.9&quot;,\n        &quot;xml-loader&quot;: &quot;^1.2.1&quot;\n    },\n    &quot;dependencies&quot;: {\n        &quot;lodash&quot;: &quot;^4.17.11&quot;\n    }\n}\n</code></pre><p><strong>webpack 建议本地安装，这可以使我们在引入破坏式变更的依赖时，更容易分别升级项目。</strong></p>\n<p> <em>本地安装webpack后，能够从node_modules/.bing/webpack 访问它的bin版本</em></p>\n<p>从配置的依赖项来看，除了基本的webpack 及webpack-cli，还包括express、loader、plugin、middleware等，这些下面会进行说明。</p>\n<h1 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h1><pre><code>const path = require(&apos;path&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nconst CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);\nconst webpack = require(&apos;webpack&apos;);\n\nmodule.exports = {\n    entry: {\n        app: &apos;./src/index.js&apos;\n    },\n    devtool: &apos;inline-source-map&apos;,\n    devServer: {\n        contentBase: &apos;./dist&apos;,\n        hot: true\n        },\n    module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: [&apos;style-loader&apos;, &apos;css-loader&apos;]\n        }\n        ]\n    },\n    plugins: [\n        new CleanWebpackPlugin([&apos;dist&apos;]),\n        new HtmlWebpackPlugin({\n        title: &apos;Output Management&apos;\n        }),\n        new webpack.NamedModulesPlugin(),\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    output: {\n        filename: &apos;[name].bundle.js&apos;,\n        path: path.resolve(__dirname, &apos;dist&apos;),\n        publicPath: &apos;/&apos;\n    }\n};\n</code></pre><h2 id=\"entry-项目入口\"><a href=\"#entry-项目入口\" class=\"headerlink\" title=\"entry 项目入口\"></a>entry 项目入口</h2><p>单个 entry=’./src/index.js’；</p>\n<p>多个 entry={<br>    app:’./src/index.js’,<br>    main:’./src/main.js’<br>}</p>\n<h2 id=\"output-项目出口\"><a href=\"#output-项目出口\" class=\"headerlink\" title=\"output 项目出口\"></a>output 项目出口</h2><pre><code>output: {\n            filename: &apos;[name].bundle.js&apos;,\n            path: path.resolve(__dirname, &apos;dist&apos;),\n            publicPath: &apos;/&apos;\n        }\n</code></pre><p>filename顾名思义，输出的文件的名字，多个入口的情况下，’[name].bundle.js’ 会将文件输出为’app.bundle.js’及’main.bundle.js’，根据起点名称生成bundle文件。</p>\n<p>path 输出路径；</p>\n<p>publicPath：公共路径，会在服务器脚本用到，确保文件资源能够在 <a href=\"http://localhost:3000\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://localhost:3000</a> 下正确访问</p>\n<h2 id=\"loader-管理资源\"><a href=\"#loader-管理资源\" class=\"headerlink\" title=\"loader 管理资源\"></a>loader 管理资源</h2><p>webpack 通过 loader 引入任何其他类型的文件。</p>\n<p>/.css$/: style-loader、css-loader；//css</p>\n<p>/.(png|svg|jpg|gif)$/: file-loader；//图片</p>\n<p>/.(woff|woff2|eot|ttf|otf)$/: file-loader；//字体</p>\n<p>/.(csv|tsv)$/: csv-loader；//csv</p>\n<p>/.xml$/: xml-loader；//xml数据</p>\n<pre><code> import Data from &apos;./data.xml&apos;;\n function component() {\n    console.log(Data);\n    //import 这四种类型的数据(JSON, CSV, TSV, XML)中的任何一种，所导入的 Data 变量将包含可直接使用的已解析 JSON\n}\n</code></pre><h2 id=\"全局资源\"><a href=\"#全局资源\" class=\"headerlink\" title=\"全局资源\"></a>全局资源</h2><pre><code>- |- /assets\n+ |– /components\n+ |  |– /my-component\n+ |  |  |– index.jsx\n+ |  |  |– index.css\n+ |  |  |– icon.svg\n+ |  |  |– img.png\n</code></pre><p>类似这样，将模块和资源组合在一起，无需依赖于含有全部资源的 /assets 目录，而是将资源与代码组合在一起，这样的结构会非常有用。</p>\n<p> <strong>会使代码更具有可移植性，因为现有的统一放置的方式会造成所有资源紧密耦合在一起。</strong></p>\n<p> 当无法用这种方式开发，或者有多个组件间资源共享的时候，仍然可以将这些资源存储在公共目录中，配合 <strong>alias</strong> 来使用他们更方便import导入。</p>\n<h3 id=\"alias写法：\"><a href=\"#alias写法：\" class=\"headerlink\" title=\"alias写法：\"></a>alias写法：</h3><pre><code>resolve:{\n    alias: {\n        ASSET: path.join(src, &apos;assets&apos;),\n        xyz$: path.resolve(__dirname, &apos;path/to/file.js&apos;)\n    },\n}\nimport Test1 from &apos;xyz&apos;; // 精确匹配，所以 path/to/file.js 被解析和导入\nimport Test2 from &apos;xyz/file.js&apos;; // 非精确匹配，触发普通解析\n</code></pre><p><strong>在给定对象的键后的末尾添加 $，以表示精准匹配</strong></p>\n<h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><h3 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h3><pre><code>npm install --save-dev html-webpack-plugin\n</code></pre><p>该插件会根据我们的配置自动生成一个html入口文件，不用我们自己手动写。这样的好处就是，即使配置文件的入口点等名称改了，我们不用重新去修改index.html文件的内容。</p>\n<p>生成的bundle文件会自动添加到html中。</p>\n<h3 id=\"清理-dist文件夹\"><a href=\"#清理-dist文件夹\" class=\"headerlink\" title=\"清理/dist文件夹\"></a>清理/dist文件夹</h3><pre><code>npm install clean-webpack-plugin --save-dev\n</code></pre><p>每次webpack生成文件前建议清除 /dist 文件夹，避免过去生成的代码和最新的混合在一起。</p>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"使用-source-map-devtool\"><a href=\"#使用-source-map-devtool\" class=\"headerlink\" title=\"使用 source map (devtool)\"></a>使用 source map (devtool)</h2><p>用webpack打包，开发时需要追踪到具体错误和警告产生的位置，根据想要的效果不同需要做不同的配置。</p>\n<p>开发环境适合使用：eval-source-map<br>生产环境可省略</p>\n<p>具体说明还可查看 <a href=\"https://www.webpackjs.com/configuration/devtool/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方配置</a></p>\n<h2 id=\"自动监测代码的变化\"><a href=\"#自动监测代码的变化\" class=\"headerlink\" title=\"自动监测代码的变化\"></a>自动监测代码的变化</h2><p>一下三种工具能在代码发生变化时自动编译代码：</p>\n<ol>\n<li>webpack’s Watch Mode</li>\n<li>webpack-dev-server</li>\n<li>webpack-dev-middleware</li>\n</ol>\n<h3 id=\"观察模式\"><a href=\"#观察模式\" class=\"headerlink\" title=\"观察模式\"></a>观察模式</h3><p>直接在配置文件package.json 中添加脚本 <code>&quot;watch&quot;: &quot;webpack --watch&quot;</code></p>\n<p><strong>缺点：需要手动刷新浏览器</strong></p>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><p><code>npm install --save-dev webpack-dev-server</code></p>\n<p>在webpack.config.js中配置，告诉开发服务器在哪里查找文件</p>\n<pre><code>devServer: {\n    contentBase: &apos;./dist&apos;\n}\n</code></pre><p>同时添加一个 script 脚本，可以直接运行开发服务器(dev server)：</p>\n<p><code>&quot;start&quot;: &quot;webpack-dev-server --open&quot;</code></p>\n<h3 id=\"webpack-dev-middleware-配合-express-server\"><a href=\"#webpack-dev-middleware-配合-express-server\" class=\"headerlink\" title=\"webpack-dev-middleware 配合 express server\"></a>webpack-dev-middleware 配合 express server</h3><pre><code>`npm install --save-dev express webpack-dev-middleware`\n</code></pre><p>webpack.config.js</p>\n<pre><code>output: {\n    publicPath: &apos;/&apos;\n}\n</code></pre><p>server.js</p>\n<pre><code>const express = require(&apos;express&apos;);\nconst webpack = require(&apos;webpack&apos;);\nconst webpackDevMiddleware = require(&apos;webpack-dev-middleware&apos;);\n\nconst app = express();\nconst config = require(&apos;./webpack.config.js&apos;);\nconst compiler = webpack(config);\n\n// Tell express to use the webpack-dev-middleware and use the webpack.config.js\n// configuration file as a base.\napp.use(webpackDevMiddleware(compiler, {\npublicPath: config.output.publicPath\n}));\n\n// Serve the files on port 3000.\napp.listen(3000, function () {\nconsole.log(&apos;Example app listening on port 3000!\\n&apos;);\n});\n</code></pre><p>package.json</p>\n<pre><code>&quot;scripts&quot;: {\n    &quot;server&quot;: &quot;node server.js&quot;,\n}\n</code></pre><h3 id=\"热替换\"><a href=\"#热替换\" class=\"headerlink\" title=\"热替换\"></a>热替换</h3><p>在项目已经运行的情况下，可以尝试模块热替换。</p>\n"},{"title":"浏览器缓存","toc":true,"comments":0,"date":"2020-05-28T09:17:08.000Z","keywords":"浏览器缓存","description":null,"_content":"缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。\n\n一个数据请求，可以分为发起网络请求、后端处理、浏览器响应三个步骤。在第一和第三步可做优化。\n\n![img](/uploads/cache.png)\n\n## 缓存位置\n+ Servic Worker\n+ Memory Cache\n+ Disk Cache\n+ Push Cache\n\n1. Servic Worker 是运行在浏览器背后的独立线程，可以理解为是介于客户端和服务端间的代理服务器。可以拦截客户端的请求、向客户端发送请求、向服务端发起请求，其中最重要的作用之一是离线资源缓存。\n    它与web worker的相同点在于：\n    * 工作在worker context中，无法访问dom节点\n    * 可以通过**post message**接口把数据传给其他JS文件\n    * 运行的代码**不会被阻塞**，也不会阻塞其他JS文件中的代码\n    不同点在于，service worker是浏览器的一个**进程**而不是浏览器内核下的**线程**，因此它被注册安装之后可以在多个页面之间使用，不会因为页面的关闭而销毁。\n另外有一点需要注意的是，出于对安全问题的考虑，Service Worker 只能被使用在 **https** 或者本地的 **localhost** 环境下。\n\n2. Memory Cache 内存中的缓存，主要包含的是当前页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的速度比硬盘中的快，但是存储持续性短。**一旦关闭了tab页面，缓存的内容也就被释放了**。\n    内存容量比硬盘容量小得多。\n    当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存。\n    内存缓存中有一块重要的缓存资源是preloader相关指令（例如<link rel=\"prefetch\">）下载的资源。总所周知preloader的相关指令已经是页面优化的常见手段之一，它可以一边解析js/css文件，一边网络请求下一个资源。\n    需要注意的事情是，**内存缓存在缓存资源时并不关心返回资源的HTTP缓存头Cache-Control是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对Content-Type，CORS等其他特征做校验。**\n\n\n3. Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。\n\n4. Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。\n\n\n## 浏览器缓存\n浏览器缓存分为强缓存和协商缓存，强缓存会直接从浏览器里面拿数据，协商缓存会先访问服务器看缓存是否过期，再决定是否从浏览器里面拿数据。\n缓存策略都是通过设置 HTTP Header 来实现的。\n\n### 强缓存\n控制强缓存的字段有：Expires 和 Cache-Control。\n\n#### Expires\n不会向服务器发送请求，直接从缓存中读取资源。\n\n缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。\n\nExpires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。Expires: Wed, 22 Oct 2018 08:41:00 GMT表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求\n\n#### Cache-Control\n在HTTP/1.1中，Cache-Control是最重要的规则，主要用于**控制网页缓存**。比如当Cache-Control:max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。\n\n#### Expires和Cache-Control两者对比\n其实这两者差别不大，区别就在于 Expires 是http1.0的产物，Cache-Control是http1.1的产物，两者同时存在的话，Cache-Control优先级高于Expires；在某些不支持HTTP1.1的环境下，Expires就会发挥用处。所以**Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。**\n强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容，那我们如何获知服务器端内容是否已经发生了更新呢？此时我们需要用到协商缓存策略。\n\n\n\n### 协商缓存\n控制协商缓存的字段是：Last-Modified / If-Modified-Since 和 Etag / If-None-Match，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。\n协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：\n1. 协商缓存生效，返回304和Not Modified\n2. 协商缓存失效，返回200和请求结果\n\n#### Last-Modified / If-Modified-Since \n服务端返回Last-Modified（最后修改时间），客户端再次请求时将该值放在在header的If-Modified-Since中，服务端比较最新修改时间和If-Modified-Since的值。\n\n##### 弊端：\n* 如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源\n* 因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源\n\n####  Etag / If-None-Match\nEtag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag就会重新生成。\n\n#### 两者比较\n1. 在精度上，Etag精度高于Last-Modified。Last-Modified的时间单位时秒，前者却是每次修改都会变化。\n2. 在性能上，Etag要逊于Last-Modified，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。\n3. 在优先级上，服务器校验优先考虑Etag。\n\n\n## 用户行为的影响\n\n所谓用户行为对浏览器缓存的影响，指的就是用户在浏览器如何操作时，会触发怎样的缓存策略。主要有 3 种：\n\n1. 打开网页，地址栏输入地址： 查找 disk cache 中是否有匹配。如有则使用；如没有则发送网络请求。\n2. 普通刷新 (F5)：因为 TAB 并没有关闭，因此 memory cache 是可用的，会被优先使用(如果匹配的话)。其次才是 disk cache。\n3. 强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 Cache-control: no-cache(为了兼容，还带了 Pragma: no-cache),服务器直接返回 200 和最新内容。\n\n\n## 实际应用场景\n\n1. 频繁变动的资源\n > Cache-Control: no-cache\n\n 对于频繁变动的资源，首先需要使用Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。\n\n2. 不常变化的资源\n\n> Cache-Control: max-age=31536000\n\n通常在处理这类资源时，给它们的 Cache-Control 配置一个很大的 max-age=31536000 (一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。而为了解决更新的问题，就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。\n在线提供的类库 (如 jquery-3.3.1.min.js, lodash.min.js 等) 均采用这个模式。\n","source":"_posts/浏览器缓存.md","raw":"---\ntitle: 浏览器缓存\ntoc: true\ncomments: false\ncategories: \n    - 浏览器 \n    - 缓存 \ndate: 2020-05-28 17:17:08\ntags:\nkeywords: 浏览器缓存\ndescription:\n---\n缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。\n\n一个数据请求，可以分为发起网络请求、后端处理、浏览器响应三个步骤。在第一和第三步可做优化。\n\n![img](/uploads/cache.png)\n\n## 缓存位置\n+ Servic Worker\n+ Memory Cache\n+ Disk Cache\n+ Push Cache\n\n1. Servic Worker 是运行在浏览器背后的独立线程，可以理解为是介于客户端和服务端间的代理服务器。可以拦截客户端的请求、向客户端发送请求、向服务端发起请求，其中最重要的作用之一是离线资源缓存。\n    它与web worker的相同点在于：\n    * 工作在worker context中，无法访问dom节点\n    * 可以通过**post message**接口把数据传给其他JS文件\n    * 运行的代码**不会被阻塞**，也不会阻塞其他JS文件中的代码\n    不同点在于，service worker是浏览器的一个**进程**而不是浏览器内核下的**线程**，因此它被注册安装之后可以在多个页面之间使用，不会因为页面的关闭而销毁。\n另外有一点需要注意的是，出于对安全问题的考虑，Service Worker 只能被使用在 **https** 或者本地的 **localhost** 环境下。\n\n2. Memory Cache 内存中的缓存，主要包含的是当前页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的速度比硬盘中的快，但是存储持续性短。**一旦关闭了tab页面，缓存的内容也就被释放了**。\n    内存容量比硬盘容量小得多。\n    当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存。\n    内存缓存中有一块重要的缓存资源是preloader相关指令（例如<link rel=\"prefetch\">）下载的资源。总所周知preloader的相关指令已经是页面优化的常见手段之一，它可以一边解析js/css文件，一边网络请求下一个资源。\n    需要注意的事情是，**内存缓存在缓存资源时并不关心返回资源的HTTP缓存头Cache-Control是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对Content-Type，CORS等其他特征做校验。**\n\n\n3. Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。\n\n4. Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。\n\n\n## 浏览器缓存\n浏览器缓存分为强缓存和协商缓存，强缓存会直接从浏览器里面拿数据，协商缓存会先访问服务器看缓存是否过期，再决定是否从浏览器里面拿数据。\n缓存策略都是通过设置 HTTP Header 来实现的。\n\n### 强缓存\n控制强缓存的字段有：Expires 和 Cache-Control。\n\n#### Expires\n不会向服务器发送请求，直接从缓存中读取资源。\n\n缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。\n\nExpires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。Expires: Wed, 22 Oct 2018 08:41:00 GMT表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求\n\n#### Cache-Control\n在HTTP/1.1中，Cache-Control是最重要的规则，主要用于**控制网页缓存**。比如当Cache-Control:max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。\n\n#### Expires和Cache-Control两者对比\n其实这两者差别不大，区别就在于 Expires 是http1.0的产物，Cache-Control是http1.1的产物，两者同时存在的话，Cache-Control优先级高于Expires；在某些不支持HTTP1.1的环境下，Expires就会发挥用处。所以**Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。**\n强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容，那我们如何获知服务器端内容是否已经发生了更新呢？此时我们需要用到协商缓存策略。\n\n\n\n### 协商缓存\n控制协商缓存的字段是：Last-Modified / If-Modified-Since 和 Etag / If-None-Match，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。\n协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：\n1. 协商缓存生效，返回304和Not Modified\n2. 协商缓存失效，返回200和请求结果\n\n#### Last-Modified / If-Modified-Since \n服务端返回Last-Modified（最后修改时间），客户端再次请求时将该值放在在header的If-Modified-Since中，服务端比较最新修改时间和If-Modified-Since的值。\n\n##### 弊端：\n* 如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源\n* 因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源\n\n####  Etag / If-None-Match\nEtag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag就会重新生成。\n\n#### 两者比较\n1. 在精度上，Etag精度高于Last-Modified。Last-Modified的时间单位时秒，前者却是每次修改都会变化。\n2. 在性能上，Etag要逊于Last-Modified，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。\n3. 在优先级上，服务器校验优先考虑Etag。\n\n\n## 用户行为的影响\n\n所谓用户行为对浏览器缓存的影响，指的就是用户在浏览器如何操作时，会触发怎样的缓存策略。主要有 3 种：\n\n1. 打开网页，地址栏输入地址： 查找 disk cache 中是否有匹配。如有则使用；如没有则发送网络请求。\n2. 普通刷新 (F5)：因为 TAB 并没有关闭，因此 memory cache 是可用的，会被优先使用(如果匹配的话)。其次才是 disk cache。\n3. 强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 Cache-control: no-cache(为了兼容，还带了 Pragma: no-cache),服务器直接返回 200 和最新内容。\n\n\n## 实际应用场景\n\n1. 频繁变动的资源\n > Cache-Control: no-cache\n\n 对于频繁变动的资源，首先需要使用Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。\n\n2. 不常变化的资源\n\n> Cache-Control: max-age=31536000\n\n通常在处理这类资源时，给它们的 Cache-Control 配置一个很大的 max-age=31536000 (一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。而为了解决更新的问题，就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。\n在线提供的类库 (如 jquery-3.3.1.min.js, lodash.min.js 等) 均采用这个模式。\n","slug":"浏览器缓存","published":1,"updated":"2020-06-02T06:28:54.171Z","layout":"post","photos":[],"link":"","_id":"ckaxser7k001fcstoidaxo368","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。</p>\n<p>一个数据请求，可以分为发起网络请求、后端处理、浏览器响应三个步骤。在第一和第三步可做优化。</p>\n<p><img src=\"/uploads/cache.png\" alt=\"img\"></p>\n<h2 id=\"缓存位置\"><a href=\"#缓存位置\" class=\"headerlink\" title=\"缓存位置\"></a>缓存位置</h2><ul>\n<li>Servic Worker</li>\n<li>Memory Cache</li>\n<li>Disk Cache</li>\n<li>Push Cache</li>\n</ul>\n<ol>\n<li><p>Servic Worker 是运行在浏览器背后的独立线程，可以理解为是介于客户端和服务端间的代理服务器。可以拦截客户端的请求、向客户端发送请求、向服务端发起请求，其中最重要的作用之一是离线资源缓存。<br> 它与web worker的相同点在于：</p>\n<ul>\n<li>工作在worker context中，无法访问dom节点</li>\n<li>可以通过<strong>post message</strong>接口把数据传给其他JS文件</li>\n<li>运行的代码<strong>不会被阻塞</strong>，也不会阻塞其他JS文件中的代码<br>不同点在于，service worker是浏览器的一个<strong>进程</strong>而不是浏览器内核下的<strong>线程</strong>，因此它被注册安装之后可以在多个页面之间使用，不会因为页面的关闭而销毁。<br>另外有一点需要注意的是，出于对安全问题的考虑，Service Worker 只能被使用在 <strong>https</strong> 或者本地的 <strong>localhost</strong> 环境下。</li>\n</ul>\n</li>\n<li><p>Memory Cache 内存中的缓存，主要包含的是当前页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的速度比硬盘中的快，但是存储持续性短。<strong>一旦关闭了tab页面，缓存的内容也就被释放了</strong>。<br> 内存容量比硬盘容量小得多。<br> 当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存。<br> 内存缓存中有一块重要的缓存资源是preloader相关指令（例如<link rel=\"prefetch\">）下载的资源。总所周知preloader的相关指令已经是页面优化的常见手段之一，它可以一边解析js/css文件，一边网络请求下一个资源。<br> 需要注意的事情是，<strong>内存缓存在缓存资源时并不关心返回资源的HTTP缓存头Cache-Control是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对Content-Type，CORS等其他特征做校验。</strong></p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</p>\n</li>\n<li><p>Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。</p>\n</li>\n</ol>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><p>浏览器缓存分为强缓存和协商缓存，强缓存会直接从浏览器里面拿数据，协商缓存会先访问服务器看缓存是否过期，再决定是否从浏览器里面拿数据。<br>缓存策略都是通过设置 HTTP Header 来实现的。</p>\n<h3 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h3><p>控制强缓存的字段有：Expires 和 Cache-Control。</p>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p>不会向服务器发送请求，直接从缓存中读取资源。</p>\n<p>缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。</p>\n<p>Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。Expires: Wed, 22 Oct 2018 08:41:00 GMT表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><p>在HTTP/1.1中，Cache-Control是最重要的规则，主要用于<strong>控制网页缓存</strong>。比如当Cache-Control:max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。</p>\n<h4 id=\"Expires和Cache-Control两者对比\"><a href=\"#Expires和Cache-Control两者对比\" class=\"headerlink\" title=\"Expires和Cache-Control两者对比\"></a>Expires和Cache-Control两者对比</h4><p>其实这两者差别不大，区别就在于 Expires 是http1.0的产物，Cache-Control是http1.1的产物，两者同时存在的话，Cache-Control优先级高于Expires；在某些不支持HTTP1.1的环境下，Expires就会发挥用处。所以<strong>Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。</strong><br>强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容，那我们如何获知服务器端内容是否已经发生了更新呢？此时我们需要用到协商缓存策略。</p>\n<h3 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h3><p>控制协商缓存的字段是：Last-Modified / If-Modified-Since 和 Etag / If-None-Match，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。<br>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：</p>\n<ol>\n<li>协商缓存生效，返回304和Not Modified</li>\n<li>协商缓存失效，返回200和请求结果</li>\n</ol>\n<h4 id=\"Last-Modified-If-Modified-Since\"><a href=\"#Last-Modified-If-Modified-Since\" class=\"headerlink\" title=\"Last-Modified / If-Modified-Since\"></a>Last-Modified / If-Modified-Since</h4><p>服务端返回Last-Modified（最后修改时间），客户端再次请求时将该值放在在header的If-Modified-Since中，服务端比较最新修改时间和If-Modified-Since的值。</p>\n<h5 id=\"弊端：\"><a href=\"#弊端：\" class=\"headerlink\" title=\"弊端：\"></a>弊端：</h5><ul>\n<li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源</li>\n<li>因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li>\n</ul>\n<h4 id=\"Etag-If-None-Match\"><a href=\"#Etag-If-None-Match\" class=\"headerlink\" title=\"Etag / If-None-Match\"></a>Etag / If-None-Match</h4><p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag就会重新生成。</p>\n<h4 id=\"两者比较\"><a href=\"#两者比较\" class=\"headerlink\" title=\"两者比较\"></a>两者比较</h4><ol>\n<li>在精度上，Etag精度高于Last-Modified。Last-Modified的时间单位时秒，前者却是每次修改都会变化。</li>\n<li>在性能上，Etag要逊于Last-Modified，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。</li>\n<li>在优先级上，服务器校验优先考虑Etag。</li>\n</ol>\n<h2 id=\"用户行为的影响\"><a href=\"#用户行为的影响\" class=\"headerlink\" title=\"用户行为的影响\"></a>用户行为的影响</h2><p>所谓用户行为对浏览器缓存的影响，指的就是用户在浏览器如何操作时，会触发怎样的缓存策略。主要有 3 种：</p>\n<ol>\n<li>打开网页，地址栏输入地址： 查找 disk cache 中是否有匹配。如有则使用；如没有则发送网络请求。</li>\n<li>普通刷新 (F5)：因为 TAB 并没有关闭，因此 memory cache 是可用的，会被优先使用(如果匹配的话)。其次才是 disk cache。</li>\n<li>强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 Cache-control: no-cache(为了兼容，还带了 Pragma: no-cache),服务器直接返回 200 和最新内容。</li>\n</ol>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><ol>\n<li><p>频繁变动的资源</p>\n<blockquote>\n<p>Cache-Control: no-cache</p>\n</blockquote>\n<p>对于频繁变动的资源，首先需要使用Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p>\n</li>\n<li><p>不常变化的资源</p>\n</li>\n</ol>\n<blockquote>\n<p>Cache-Control: max-age=31536000</p>\n</blockquote>\n<p>通常在处理这类资源时，给它们的 Cache-Control 配置一个很大的 max-age=31536000 (一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。而为了解决更新的问题，就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。<br>在线提供的类库 (如 jquery-3.3.1.min.js, lodash.min.js 等) 均采用这个模式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。</p>\n<p>一个数据请求，可以分为发起网络请求、后端处理、浏览器响应三个步骤。在第一和第三步可做优化。</p>\n<p><img src=\"/uploads/cache.png\" alt=\"img\"></p>\n<h2 id=\"缓存位置\"><a href=\"#缓存位置\" class=\"headerlink\" title=\"缓存位置\"></a>缓存位置</h2><ul>\n<li>Servic Worker</li>\n<li>Memory Cache</li>\n<li>Disk Cache</li>\n<li>Push Cache</li>\n</ul>\n<ol>\n<li><p>Servic Worker 是运行在浏览器背后的独立线程，可以理解为是介于客户端和服务端间的代理服务器。可以拦截客户端的请求、向客户端发送请求、向服务端发起请求，其中最重要的作用之一是离线资源缓存。<br> 它与web worker的相同点在于：</p>\n<ul>\n<li>工作在worker context中，无法访问dom节点</li>\n<li>可以通过<strong>post message</strong>接口把数据传给其他JS文件</li>\n<li>运行的代码<strong>不会被阻塞</strong>，也不会阻塞其他JS文件中的代码<br>不同点在于，service worker是浏览器的一个<strong>进程</strong>而不是浏览器内核下的<strong>线程</strong>，因此它被注册安装之后可以在多个页面之间使用，不会因为页面的关闭而销毁。<br>另外有一点需要注意的是，出于对安全问题的考虑，Service Worker 只能被使用在 <strong>https</strong> 或者本地的 <strong>localhost</strong> 环境下。</li>\n</ul>\n</li>\n<li><p>Memory Cache 内存中的缓存，主要包含的是当前页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的速度比硬盘中的快，但是存储持续性短。<strong>一旦关闭了tab页面，缓存的内容也就被释放了</strong>。<br> 内存容量比硬盘容量小得多。<br> 当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存。<br> 内存缓存中有一块重要的缓存资源是preloader相关指令（例如<link rel=\"prefetch\">）下载的资源。总所周知preloader的相关指令已经是页面优化的常见手段之一，它可以一边解析js/css文件，一边网络请求下一个资源。<br> 需要注意的事情是，<strong>内存缓存在缓存资源时并不关心返回资源的HTTP缓存头Cache-Control是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对Content-Type，CORS等其他特征做校验。</strong></p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</p>\n</li>\n<li><p>Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。</p>\n</li>\n</ol>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><p>浏览器缓存分为强缓存和协商缓存，强缓存会直接从浏览器里面拿数据，协商缓存会先访问服务器看缓存是否过期，再决定是否从浏览器里面拿数据。<br>缓存策略都是通过设置 HTTP Header 来实现的。</p>\n<h3 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h3><p>控制强缓存的字段有：Expires 和 Cache-Control。</p>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p>不会向服务器发送请求，直接从缓存中读取资源。</p>\n<p>缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。</p>\n<p>Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。Expires: Wed, 22 Oct 2018 08:41:00 GMT表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><p>在HTTP/1.1中，Cache-Control是最重要的规则，主要用于<strong>控制网页缓存</strong>。比如当Cache-Control:max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。</p>\n<h4 id=\"Expires和Cache-Control两者对比\"><a href=\"#Expires和Cache-Control两者对比\" class=\"headerlink\" title=\"Expires和Cache-Control两者对比\"></a>Expires和Cache-Control两者对比</h4><p>其实这两者差别不大，区别就在于 Expires 是http1.0的产物，Cache-Control是http1.1的产物，两者同时存在的话，Cache-Control优先级高于Expires；在某些不支持HTTP1.1的环境下，Expires就会发挥用处。所以<strong>Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。</strong><br>强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容，那我们如何获知服务器端内容是否已经发生了更新呢？此时我们需要用到协商缓存策略。</p>\n<h3 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h3><p>控制协商缓存的字段是：Last-Modified / If-Modified-Since 和 Etag / If-None-Match，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。<br>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：</p>\n<ol>\n<li>协商缓存生效，返回304和Not Modified</li>\n<li>协商缓存失效，返回200和请求结果</li>\n</ol>\n<h4 id=\"Last-Modified-If-Modified-Since\"><a href=\"#Last-Modified-If-Modified-Since\" class=\"headerlink\" title=\"Last-Modified / If-Modified-Since\"></a>Last-Modified / If-Modified-Since</h4><p>服务端返回Last-Modified（最后修改时间），客户端再次请求时将该值放在在header的If-Modified-Since中，服务端比较最新修改时间和If-Modified-Since的值。</p>\n<h5 id=\"弊端：\"><a href=\"#弊端：\" class=\"headerlink\" title=\"弊端：\"></a>弊端：</h5><ul>\n<li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源</li>\n<li>因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li>\n</ul>\n<h4 id=\"Etag-If-None-Match\"><a href=\"#Etag-If-None-Match\" class=\"headerlink\" title=\"Etag / If-None-Match\"></a>Etag / If-None-Match</h4><p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag就会重新生成。</p>\n<h4 id=\"两者比较\"><a href=\"#两者比较\" class=\"headerlink\" title=\"两者比较\"></a>两者比较</h4><ol>\n<li>在精度上，Etag精度高于Last-Modified。Last-Modified的时间单位时秒，前者却是每次修改都会变化。</li>\n<li>在性能上，Etag要逊于Last-Modified，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。</li>\n<li>在优先级上，服务器校验优先考虑Etag。</li>\n</ol>\n<h2 id=\"用户行为的影响\"><a href=\"#用户行为的影响\" class=\"headerlink\" title=\"用户行为的影响\"></a>用户行为的影响</h2><p>所谓用户行为对浏览器缓存的影响，指的就是用户在浏览器如何操作时，会触发怎样的缓存策略。主要有 3 种：</p>\n<ol>\n<li>打开网页，地址栏输入地址： 查找 disk cache 中是否有匹配。如有则使用；如没有则发送网络请求。</li>\n<li>普通刷新 (F5)：因为 TAB 并没有关闭，因此 memory cache 是可用的，会被优先使用(如果匹配的话)。其次才是 disk cache。</li>\n<li>强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 Cache-control: no-cache(为了兼容，还带了 Pragma: no-cache),服务器直接返回 200 和最新内容。</li>\n</ol>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><ol>\n<li><p>频繁变动的资源</p>\n<blockquote>\n<p>Cache-Control: no-cache</p>\n</blockquote>\n<p>对于频繁变动的资源，首先需要使用Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p>\n</li>\n<li><p>不常变化的资源</p>\n</li>\n</ol>\n<blockquote>\n<p>Cache-Control: max-age=31536000</p>\n</blockquote>\n<p>通常在处理这类资源时，给它们的 Cache-Control 配置一个很大的 max-age=31536000 (一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。而为了解决更新的问题，就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。<br>在线提供的类库 (如 jquery-3.3.1.min.js, lodash.min.js 等) 均采用这个模式。</p>\n"},{"title":"hexo+nexT主题+githubPages个人博客搭建","date":"2018-08-29T01:41:56.000Z","toc":true,"_content":"<!-- more -->\n## 安装\n   + node\n   + git\n   + hexo-cli\n     + npm install -g hexo-cli\n     \n## 建站\n\n``` bash\n    $ hexo init <folder>\n    $ cd <folder>\n    $ npm install\n```\n    \n### 结构说明\n   - _config.yml 为站点配置文件\n   - scaffolds 为模板文件夹\n   - source 存放用户资源\n   - themes 主题文件夹，里面也会有一个_config.yml，为主题配置文件\n   \n   #### NexT主题\n   ##### 安装\n   \n```bash\n    git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n   这样主题文件就拷贝到themes文件夹中\n   #### 设置主题\n   站点配置文件：\n   \n        theme: next\n    \n\n   \n## 站点文件配置\n\n[官方配置文档](https://hexo.io/zh-cn/docs/configuration)\n\n### deploy 部署部分的设置\n```bash\n      deploy:\n      type: git\n      branch: 分支名字\n      repo: https://github.com/github用户名/github用户名.github.io.git\n```\n### url配置\n\nIf your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n\n```bash\n    url:  https://Anastasia.github.io\n    root: /AnastasiaJ/ \n```\n ### 本地运行\n `hexo s --debug`\n\n\n```html\n    <div>Syntax Highlighting</div>\n```\n\n *浏览器打开必须是 localhost:4000/`你的root`*\n### 发布到服务器：以上配置好后分别执行\n```bash\n        hexo clean\n        hexo d -g 或者 hexo g -d\n```\n*最好建一个分支，分支作为发布的博客内容，master作为构建代码，便于多台电脑发布博客*\n\n### .md文件配置\n\n```bash    \n    title: hexo+nexT主题+githubPages个人博客搭建\n    date: 2018-08-29 09:41:56\n    categories: \"博客搭建\"  #分类\n    toc: true #是否显示文章目录\n    tags:\n        -nexT\n        -hexo\n        -githubPages\n```\n## 写作\n- 新建文章 hexo new post title (post不定，可以是scaffolds中的任意一篇草稿)\n-        \n## 插件\n- [站点访问量“不蒜子”](http://ibruce.info/2015/04/04/busuanzi/)\n- [评论系统1：Valine](https://blog.csdn.net/blue_zy/article/details/79071414)\n- [评论系统2：必来力LiveRe](https://livere.com/insight/myCode)\n- [音乐：hexo-tag-aplayer](https://aplayer.js.org/#/zh-Hans/ '使用 Hexo 插件插入音乐/视频')\n\n其他插件可参考NexT [使用文档](http://theme-next.iissnan.com/getting-started.html#install-next-theme)\n## 走过的坑\n\n### 仓库的名字\n\n仓库的名字的正确格式是github用户名.github.io\n\n### hexo s 启动命令不识别\n\n需要安装 hexo-server\n\n-------------------\n\n以上内容写的比较简单，主要是记录了一个主要的搭建过程，具体详细的部分都有官方文档可参考，这里不另外阐述。\n\n    \n   \n   \n","source":"_posts/hexo-nexT主题-githubPages个人博客搭建.md","raw":"---\ntitle: hexo+nexT主题+githubPages个人博客搭建\ndate: 2018-08-29 09:41:56\ncategories: 博客搭建  #分类\ntoc: true #是否显示文章目录\ntags:\n    - nexT\n    - hexo\n    - githubPages\n---\n<!-- more -->\n## 安装\n   + node\n   + git\n   + hexo-cli\n     + npm install -g hexo-cli\n     \n## 建站\n\n``` bash\n    $ hexo init <folder>\n    $ cd <folder>\n    $ npm install\n```\n    \n### 结构说明\n   - _config.yml 为站点配置文件\n   - scaffolds 为模板文件夹\n   - source 存放用户资源\n   - themes 主题文件夹，里面也会有一个_config.yml，为主题配置文件\n   \n   #### NexT主题\n   ##### 安装\n   \n```bash\n    git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n   这样主题文件就拷贝到themes文件夹中\n   #### 设置主题\n   站点配置文件：\n   \n        theme: next\n    \n\n   \n## 站点文件配置\n\n[官方配置文档](https://hexo.io/zh-cn/docs/configuration)\n\n### deploy 部署部分的设置\n```bash\n      deploy:\n      type: git\n      branch: 分支名字\n      repo: https://github.com/github用户名/github用户名.github.io.git\n```\n### url配置\n\nIf your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n\n```bash\n    url:  https://Anastasia.github.io\n    root: /AnastasiaJ/ \n```\n ### 本地运行\n `hexo s --debug`\n\n\n```html\n    <div>Syntax Highlighting</div>\n```\n\n *浏览器打开必须是 localhost:4000/`你的root`*\n### 发布到服务器：以上配置好后分别执行\n```bash\n        hexo clean\n        hexo d -g 或者 hexo g -d\n```\n*最好建一个分支，分支作为发布的博客内容，master作为构建代码，便于多台电脑发布博客*\n\n### .md文件配置\n\n```bash    \n    title: hexo+nexT主题+githubPages个人博客搭建\n    date: 2018-08-29 09:41:56\n    categories: \"博客搭建\"  #分类\n    toc: true #是否显示文章目录\n    tags:\n        -nexT\n        -hexo\n        -githubPages\n```\n## 写作\n- 新建文章 hexo new post title (post不定，可以是scaffolds中的任意一篇草稿)\n-        \n## 插件\n- [站点访问量“不蒜子”](http://ibruce.info/2015/04/04/busuanzi/)\n- [评论系统1：Valine](https://blog.csdn.net/blue_zy/article/details/79071414)\n- [评论系统2：必来力LiveRe](https://livere.com/insight/myCode)\n- [音乐：hexo-tag-aplayer](https://aplayer.js.org/#/zh-Hans/ '使用 Hexo 插件插入音乐/视频')\n\n其他插件可参考NexT [使用文档](http://theme-next.iissnan.com/getting-started.html#install-next-theme)\n## 走过的坑\n\n### 仓库的名字\n\n仓库的名字的正确格式是github用户名.github.io\n\n### hexo s 启动命令不识别\n\n需要安装 hexo-server\n\n-------------------\n\n以上内容写的比较简单，主要是记录了一个主要的搭建过程，具体详细的部分都有官方文档可参考，这里不另外阐述。\n\n    \n   \n   \n","slug":"hexo-nexT主题-githubPages个人博客搭建","published":1,"updated":"2019-12-24T03:04:37.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaxser7m001jcstouwdlmokq","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>node</li>\n<li>git</li>\n<li>hexo-cli<ul>\n<li>npm install -g hexo-cli</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"结构说明\"><a href=\"#结构说明\" class=\"headerlink\" title=\"结构说明\"></a>结构说明</h3><ul>\n<li>_config.yml 为站点配置文件</li>\n<li>scaffolds 为模板文件夹</li>\n<li>source 存放用户资源</li>\n<li><p>themes 主题文件夹，里面也会有一个_config.yml，为主题配置文件</p>\n<h4 id=\"NexT主题\"><a href=\"#NexT主题\" class=\"headerlink\" title=\"NexT主题\"></a>NexT主题</h4><h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h5></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>   这样主题文件就拷贝到themes文件夹中</p>\n<h4 id=\"设置主题\"><a href=\"#设置主题\" class=\"headerlink\" title=\"设置主题\"></a>设置主题</h4><p>   站点配置文件：</p>\n<pre><code>theme: next\n</code></pre><h2 id=\"站点文件配置\"><a href=\"#站点文件配置\" class=\"headerlink\" title=\"站点文件配置\"></a>站点文件配置</h2><p><a href=\"https://hexo.io/zh-cn/docs/configuration\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方配置文档</a></p>\n<h3 id=\"deploy-部署部分的设置\"><a href=\"#deploy-部署部分的设置\" class=\"headerlink\" title=\"deploy 部署部分的设置\"></a>deploy 部署部分的设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"><span class=\"built_in\">type</span>: git</span><br><span class=\"line\">branch: 分支名字</span><br><span class=\"line\">repo: https://github.com/github用户名/github用户名.github.io.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"url配置\"><a href=\"#url配置\" class=\"headerlink\" title=\"url配置\"></a>url配置</h3><p>If your site is put in a subdirectory, set url as ‘<a href=\"http://yoursite.com/child&#39;\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://yoursite.com/child&#39;</a> and root as ‘/child/‘</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url:  https://Anastasia.github.io</span><br><span class=\"line\">root: /AnastasiaJ/</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地运行\"><a href=\"#本地运行\" class=\"headerlink\" title=\"本地运行\"></a>本地运行</h3><p> <code>hexo s --debug</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Syntax Highlighting<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p> <em>浏览器打开必须是 localhost:4000/<code>你的root</code></em></p>\n<h3 id=\"发布到服务器：以上配置好后分别执行\"><a href=\"#发布到服务器：以上配置好后分别执行\" class=\"headerlink\" title=\"发布到服务器：以上配置好后分别执行\"></a>发布到服务器：以上配置好后分别执行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo d -g 或者 hexo g -d</span><br></pre></td></tr></table></figure>\n<p><em>最好建一个分支，分支作为发布的博客内容，master作为构建代码，便于多台电脑发布博客</em></p>\n<h3 id=\"md文件配置\"><a href=\"#md文件配置\" class=\"headerlink\" title=\".md文件配置\"></a>.md文件配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: hexo+nexT主题+githubPages个人博客搭建</span><br><span class=\"line\">date: 2018-08-29 09:41:56</span><br><span class=\"line\">categories: <span class=\"string\">\"博客搭建\"</span>  <span class=\"comment\">#分类</span></span><br><span class=\"line\">toc: <span class=\"literal\">true</span> <span class=\"comment\">#是否显示文章目录</span></span><br><span class=\"line\">tags:</span><br><span class=\"line\">    -nexT</span><br><span class=\"line\">    -hexo</span><br><span class=\"line\">    -githubPages</span><br></pre></td></tr></table></figure>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><ul>\n<li>新建文章 hexo new post title (post不定，可以是scaffolds中的任意一篇草稿)</li>\n<li><h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2></li>\n<li><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">站点访问量“不蒜子”</a></li>\n<li><a href=\"https://blog.csdn.net/blue_zy/article/details/79071414\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">评论系统1：Valine</a></li>\n<li><a href=\"https://livere.com/insight/myCode\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">评论系统2：必来力LiveRe</a></li>\n<li><a href=\"https://aplayer.js.org/#/zh-Hans/\" title=\"使用 Hexo 插件插入音乐/视频\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">音乐：hexo-tag-aplayer</a></li>\n</ul>\n<p>其他插件可参考NexT <a href=\"http://theme-next.iissnan.com/getting-started.html#install-next-theme\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">使用文档</a></p>\n<h2 id=\"走过的坑\"><a href=\"#走过的坑\" class=\"headerlink\" title=\"走过的坑\"></a>走过的坑</h2><h3 id=\"仓库的名字\"><a href=\"#仓库的名字\" class=\"headerlink\" title=\"仓库的名字\"></a>仓库的名字</h3><p>仓库的名字的正确格式是github用户名.github.io</p>\n<h3 id=\"hexo-s-启动命令不识别\"><a href=\"#hexo-s-启动命令不识别\" class=\"headerlink\" title=\"hexo s 启动命令不识别\"></a>hexo s 启动命令不识别</h3><p>需要安装 hexo-server</p>\n<hr>\n<p>以上内容写的比较简单，主要是记录了一个主要的搭建过程，具体详细的部分都有官方文档可参考，这里不另外阐述。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>node</li>\n<li>git</li>\n<li>hexo-cli<ul>\n<li>npm install -g hexo-cli</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"结构说明\"><a href=\"#结构说明\" class=\"headerlink\" title=\"结构说明\"></a>结构说明</h3><ul>\n<li>_config.yml 为站点配置文件</li>\n<li>scaffolds 为模板文件夹</li>\n<li>source 存放用户资源</li>\n<li><p>themes 主题文件夹，里面也会有一个_config.yml，为主题配置文件</p>\n<h4 id=\"NexT主题\"><a href=\"#NexT主题\" class=\"headerlink\" title=\"NexT主题\"></a>NexT主题</h4><h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h5></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>   这样主题文件就拷贝到themes文件夹中</p>\n<h4 id=\"设置主题\"><a href=\"#设置主题\" class=\"headerlink\" title=\"设置主题\"></a>设置主题</h4><p>   站点配置文件：</p>\n<pre><code>theme: next\n</code></pre><h2 id=\"站点文件配置\"><a href=\"#站点文件配置\" class=\"headerlink\" title=\"站点文件配置\"></a>站点文件配置</h2><p><a href=\"https://hexo.io/zh-cn/docs/configuration\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方配置文档</a></p>\n<h3 id=\"deploy-部署部分的设置\"><a href=\"#deploy-部署部分的设置\" class=\"headerlink\" title=\"deploy 部署部分的设置\"></a>deploy 部署部分的设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"><span class=\"built_in\">type</span>: git</span><br><span class=\"line\">branch: 分支名字</span><br><span class=\"line\">repo: https://github.com/github用户名/github用户名.github.io.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"url配置\"><a href=\"#url配置\" class=\"headerlink\" title=\"url配置\"></a>url配置</h3><p>If your site is put in a subdirectory, set url as ‘<a href=\"http://yoursite.com/child&#39;\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://yoursite.com/child&#39;</a> and root as ‘/child/‘</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url:  https://Anastasia.github.io</span><br><span class=\"line\">root: /AnastasiaJ/</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地运行\"><a href=\"#本地运行\" class=\"headerlink\" title=\"本地运行\"></a>本地运行</h3><p> <code>hexo s --debug</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Syntax Highlighting<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p> <em>浏览器打开必须是 localhost:4000/<code>你的root</code></em></p>\n<h3 id=\"发布到服务器：以上配置好后分别执行\"><a href=\"#发布到服务器：以上配置好后分别执行\" class=\"headerlink\" title=\"发布到服务器：以上配置好后分别执行\"></a>发布到服务器：以上配置好后分别执行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo d -g 或者 hexo g -d</span><br></pre></td></tr></table></figure>\n<p><em>最好建一个分支，分支作为发布的博客内容，master作为构建代码，便于多台电脑发布博客</em></p>\n<h3 id=\"md文件配置\"><a href=\"#md文件配置\" class=\"headerlink\" title=\".md文件配置\"></a>.md文件配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: hexo+nexT主题+githubPages个人博客搭建</span><br><span class=\"line\">date: 2018-08-29 09:41:56</span><br><span class=\"line\">categories: <span class=\"string\">\"博客搭建\"</span>  <span class=\"comment\">#分类</span></span><br><span class=\"line\">toc: <span class=\"literal\">true</span> <span class=\"comment\">#是否显示文章目录</span></span><br><span class=\"line\">tags:</span><br><span class=\"line\">    -nexT</span><br><span class=\"line\">    -hexo</span><br><span class=\"line\">    -githubPages</span><br></pre></td></tr></table></figure>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><ul>\n<li>新建文章 hexo new post title (post不定，可以是scaffolds中的任意一篇草稿)</li>\n<li><h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2></li>\n<li><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">站点访问量“不蒜子”</a></li>\n<li><a href=\"https://blog.csdn.net/blue_zy/article/details/79071414\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">评论系统1：Valine</a></li>\n<li><a href=\"https://livere.com/insight/myCode\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">评论系统2：必来力LiveRe</a></li>\n<li><a href=\"https://aplayer.js.org/#/zh-Hans/\" title=\"使用 Hexo 插件插入音乐/视频\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">音乐：hexo-tag-aplayer</a></li>\n</ul>\n<p>其他插件可参考NexT <a href=\"http://theme-next.iissnan.com/getting-started.html#install-next-theme\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">使用文档</a></p>\n<h2 id=\"走过的坑\"><a href=\"#走过的坑\" class=\"headerlink\" title=\"走过的坑\"></a>走过的坑</h2><h3 id=\"仓库的名字\"><a href=\"#仓库的名字\" class=\"headerlink\" title=\"仓库的名字\"></a>仓库的名字</h3><p>仓库的名字的正确格式是github用户名.github.io</p>\n<h3 id=\"hexo-s-启动命令不识别\"><a href=\"#hexo-s-启动命令不识别\" class=\"headerlink\" title=\"hexo s 启动命令不识别\"></a>hexo s 启动命令不识别</h3><p>需要安装 hexo-server</p>\n<hr>\n<p>以上内容写的比较简单，主要是记录了一个主要的搭建过程，具体详细的部分都有官方文档可参考，这里不另外阐述。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckaxser5s0008cstoafxsszrq","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser67000gcstowtu771mi"},{"post_id":"ckaxser520000cstoq5cwcafs","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser6x000kcsto438ip7re"},{"post_id":"ckaxser5y000acstoknzrql4a","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser6z000mcstobbjip8uy"},{"post_id":"ckaxser64000ecstoz625c0ys","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser70000pcstou9ho6f8p"},{"post_id":"ckaxser5b0002cstoxw7wvl2z","category_id":"ckaxser61000bcstol86ye1q6","_id":"ckaxser72000scstomdoatd51"},{"post_id":"ckaxser66000fcstou12mgfqe","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser74000xcstoulp75r5r"},{"post_id":"ckaxser6v000jcstorzudowa3","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser760010cstoseeeujqz"},{"post_id":"ckaxser5q0006cstolsbt895c","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser7b0013csto1nbhe95y"},{"post_id":"ckaxser6y000lcstopd9zepul","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser7g0017cstohkeytkcp"},{"post_id":"ckaxser71000rcstof0dl2j7r","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser7i001acsto390vzf57"},{"post_id":"ckaxser70000ocstoh22v3zcm","category_id":"ckaxser73000ucstowsva8lz7","_id":"ckaxser7k001ecstonikut2ds"},{"post_id":"ckaxser770011csto0md69pj5","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser7l001gcstobxxztbv6"},{"post_id":"ckaxser7f0016cstongxgwwy0","category_id":"ckaxser7a0012cstoytw7669z","_id":"ckaxser7n001kcstoev9qlf1h"},{"post_id":"ckaxser73000wcsto6olnsmgd","category_id":"ckaxser7a0012cstoytw7669z","_id":"ckaxser7o001mcstonoh7lcz6"},{"post_id":"ckaxser7h0019csto67v7yvkd","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser7u001qcstokh6ksehl"},{"post_id":"ckaxser75000zcsto31bnl11x","category_id":"ckaxser5n0004cston6cx47wd","_id":"ckaxser7v001rcstozf8ufzwd"},{"post_id":"ckaxser75000zcsto31bnl11x","category_id":"ckaxser7i001ccsto5165tiql","_id":"ckaxser7w001tcstoqx3imquf"},{"post_id":"ckaxser7m001jcstouwdlmokq","category_id":"ckaxser61000bcstol86ye1q6","_id":"ckaxser7w001vcstowlqaulmk"},{"post_id":"ckaxser7j001dcstou025rpx9","category_id":"ckaxser7m001icsto5q1qmdbw","_id":"ckaxser7x001ycstoqookm292"},{"post_id":"ckaxser7k001fcstoidaxo368","category_id":"ckaxser7t001pcstovo4x76dx","_id":"ckaxser7y0021cstoivncr2k0"},{"post_id":"ckaxser7k001fcstoidaxo368","category_id":"ckaxser7x001wcstom4guwrg6","_id":"ckaxser7y0022cstoapf0uh49"}],"PostTag":[{"post_id":"ckaxser520000cstoq5cwcafs","tag_id":"ckaxser5p0005cstocwemm0la","_id":"ckaxser71000qcstovlsvbevy"},{"post_id":"ckaxser520000cstoq5cwcafs","tag_id":"ckaxser62000ccston3xlk9ut","_id":"ckaxser72000tcsto6dye3uhv"},{"post_id":"ckaxser520000cstoq5cwcafs","tag_id":"ckaxser68000icsto2p7tpd6q","_id":"ckaxser75000ycsto947bs5lp"},{"post_id":"ckaxser5b0002cstoxw7wvl2z","tag_id":"ckaxser6z000ncstoyf9wayt2","_id":"ckaxser7e0015csto4pqifv58"},{"post_id":"ckaxser5b0002cstoxw7wvl2z","tag_id":"ckaxser73000vcstoq85jac5w","_id":"ckaxser7h0018cstovtj0pgih"},{"post_id":"ckaxser5q0006cstolsbt895c","tag_id":"ckaxser62000ccston3xlk9ut","_id":"ckaxser7n001lcstovufwgb5g"},{"post_id":"ckaxser5q0006cstolsbt895c","tag_id":"ckaxser7i001bcstor4kdorqc","_id":"ckaxser7p001ncstop41lpmsl"},{"post_id":"ckaxser5s0008cstoafxsszrq","tag_id":"ckaxser7m001hcstonv0gu79z","_id":"ckaxser7w001ucsto6omq5u6n"},{"post_id":"ckaxser5s0008cstoafxsszrq","tag_id":"ckaxser7r001ocsto0lxi71g6","_id":"ckaxser7x001xcstoo809mr68"},{"post_id":"ckaxser5y000acstoknzrql4a","tag_id":"ckaxser7w001scsto5ia6fjou","_id":"ckaxser7z0024cstocx87vsra"},{"post_id":"ckaxser5y000acstoknzrql4a","tag_id":"ckaxser7x001zcstosz88dp6u","_id":"ckaxser7z0025csto18e3narv"},{"post_id":"ckaxser5y000acstoknzrql4a","tag_id":"ckaxser7y0020csto3iw2xsoz","_id":"ckaxser7z0027cstoj1662wup"},{"post_id":"ckaxser6v000jcstorzudowa3","tag_id":"ckaxser7y0023cstow1j4g6zz","_id":"ckaxser81002ccsto119wsvcg"},{"post_id":"ckaxser6v000jcstorzudowa3","tag_id":"ckaxser7z0026csto9df9obdc","_id":"ckaxser81002dcstow0jckzbe"},{"post_id":"ckaxser6v000jcstorzudowa3","tag_id":"ckaxser800028cstoogabvk8l","_id":"ckaxser82002fcsto7h44jxjh"},{"post_id":"ckaxser6v000jcstorzudowa3","tag_id":"ckaxser800029csto1q8w114e","_id":"ckaxser82002gcstol1q8wabt"},{"post_id":"ckaxser6v000jcstorzudowa3","tag_id":"ckaxser80002acstoivnjd4yu","_id":"ckaxser82002icstopznmvxyh"},{"post_id":"ckaxser6y000lcstopd9zepul","tag_id":"ckaxser80002bcstoztrdb8j2","_id":"ckaxser82002jcstorux3xhrz"},{"post_id":"ckaxser71000rcstof0dl2j7r","tag_id":"ckaxser81002ecstoh2rgnex2","_id":"ckaxser83002mcsto67mv4xip"},{"post_id":"ckaxser71000rcstof0dl2j7r","tag_id":"ckaxser82002hcsto2q289hjl","_id":"ckaxser83002ncstouee5hmma"},{"post_id":"ckaxser71000rcstof0dl2j7r","tag_id":"ckaxser83002kcstojq350s1d","_id":"ckaxser84002pcstomcqw80yo"},{"post_id":"ckaxser73000wcsto6olnsmgd","tag_id":"ckaxser83002lcsto3319bn63","_id":"ckaxser89002scsto4uwlqutw"},{"post_id":"ckaxser73000wcsto6olnsmgd","tag_id":"ckaxser84002ocstobi0ecaud","_id":"ckaxser8a002tcsto54dqxban"},{"post_id":"ckaxser73000wcsto6olnsmgd","tag_id":"ckaxser85002qcsto9pb1xdxj","_id":"ckaxser8c002vcstoj74ocmmq"},{"post_id":"ckaxser75000zcsto31bnl11x","tag_id":"ckaxser88002rcstokz6kr2o0","_id":"ckaxser8c002wcstojciexen9"},{"post_id":"ckaxser770011csto0md69pj5","tag_id":"ckaxser8b002ucstoekj44zzz","_id":"ckaxser8d002ycstontkor7bc"},{"post_id":"ckaxser7f0016cstongxgwwy0","tag_id":"ckaxser8d002xcstoq6g1148q","_id":"ckaxser8f0032csto0fpsupe2"},{"post_id":"ckaxser7f0016cstongxgwwy0","tag_id":"ckaxser8d002zcstoerdgjw3i","_id":"ckaxser8f0033csto2v9i60qb"},{"post_id":"ckaxser7f0016cstongxgwwy0","tag_id":"ckaxser8e0030cstorgtgmzm4","_id":"ckaxser8g0035cstobxc2zv3d"},{"post_id":"ckaxser7h0019csto67v7yvkd","tag_id":"ckaxser7y0023cstow1j4g6zz","_id":"ckaxser8h0038cstopqqippfi"},{"post_id":"ckaxser7h0019csto67v7yvkd","tag_id":"ckaxser7z0026csto9df9obdc","_id":"ckaxser8h0039cstovct57lum"},{"post_id":"ckaxser7h0019csto67v7yvkd","tag_id":"ckaxser80002acstoivnjd4yu","_id":"ckaxser8i003bcsto0yn52b2i"},{"post_id":"ckaxser7j001dcstou025rpx9","tag_id":"ckaxser8g0037cstor2bm29sf","_id":"ckaxser8i003dcstogsbykw3s"},{"post_id":"ckaxser7j001dcstou025rpx9","tag_id":"ckaxser8h003acsto8yd2a5au","_id":"ckaxser8i003ecstoq3jflipx"},{"post_id":"ckaxser7m001jcstouwdlmokq","tag_id":"ckaxser73000vcstoq85jac5w","_id":"ckaxser8j003fcstoge1wv82c"},{"post_id":"ckaxser7m001jcstouwdlmokq","tag_id":"ckaxser6z000ncstoyf9wayt2","_id":"ckaxser8j003gcstoy9fedmoa"},{"post_id":"ckaxser7m001jcstouwdlmokq","tag_id":"ckaxser8i003ccsto53bjw0ln","_id":"ckaxser8j003hcstou1ngvhks"}],"Tag":[{"name":"PDF.js","_id":"ckaxser5p0005cstocwemm0la"},{"name":"JavaScript","_id":"ckaxser62000ccston3xlk9ut"},{"name":"PDF解析器","_id":"ckaxser68000icsto2p7tpd6q"},{"name":"hexo","_id":"ckaxser6z000ncstoyf9wayt2"},{"name":"nexT","_id":"ckaxser73000vcstoq85jac5w"},{"name":"操作符","_id":"ckaxser7i001bcstor4kdorqc"},{"name":"JS","_id":"ckaxser7m001hcstonv0gu79z"},{"name":"Promise","_id":"ckaxser7r001ocsto0lxi71g6"},{"name":"return","_id":"ckaxser7w001scsto5ia6fjou"},{"name":"break","_id":"ckaxser7x001zcstosz88dp6u"},{"name":"continue","_id":"ckaxser7y0020csto3iw2xsoz"},{"name":"react","_id":"ckaxser7y0023cstow1j4g6zz"},{"name":"react-dnd","_id":"ckaxser7z0026csto9df9obdc"},{"name":"ant-design","_id":"ckaxser800028cstoogabvk8l"},{"name":"table","_id":"ckaxser800029csto1q8w114e"},{"name":"拖拽","_id":"ckaxser80002acstoivnjd4yu"},{"name":"UUID","_id":"ckaxser80002bcstoztrdb8j2"},{"name":"直接打印","_id":"ckaxser81002ecstoh2rgnex2"},{"name":"谷歌","_id":"ckaxser82002hcsto2q289hjl"},{"name":"--kiosk-printing","_id":"ckaxser83002kcstojq350s1d"},{"name":"css","_id":"ckaxser83002lcsto3319bn63"},{"name":"多行溢出","_id":"ckaxser84002ocstobi0ecaud"},{"name":"单行溢出","_id":"ckaxser85002qcsto9pb1xdxj"},{"name":"signalR","_id":"ckaxser88002rcstokz6kr2o0"},{"name":"面向对象","_id":"ckaxser8b002ucstoekj44zzz"},{"name":"左右布局","_id":"ckaxser8d002xcstoq6g1148q"},{"name":"盒子模型","_id":"ckaxser8d002zcstoerdgjw3i"},{"name":"css画三角形","_id":"ckaxser8e0030cstorgtgmzm4"},{"name":"webpack","_id":"ckaxser8g0037cstor2bm29sf"},{"name":"模块打包","_id":"ckaxser8h003acsto8yd2a5au"},{"name":"githubPages","_id":"ckaxser8i003ccsto53bjw0ln"}]}}